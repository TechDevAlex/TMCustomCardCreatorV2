[ {
  "module" : "base",
  "name" : "Adaptation Technology",
  "tags" : [ "science" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/AdaptationTechnology.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class AdaptationTechnology extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ADAPTATION_TECHNOLOGY,\n      tags: [Tag.SCIENCE],\n      cost: 4,\n      globalParameterRequirementBonus: {steps: 2},\n\n      metadata: {\n        cardNumber: '153',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Your global requirements are +2 or -2 steps, your choice in each case.', (eb) => {\n            eb.plate('Global requirements').startEffect.text('+/- 2');\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Adapted Lichen",
  "tags" : [ "plant" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/AdaptedLichen.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class AdaptedLichen extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ADAPTED_LICHEN,\n      tags: [Tag.PLANT],\n      cost: 8,\n\n      behavior: {\n        production: {plants: 1},\n      },\n\n      metadata: {\n        description: 'Increase your plant production 1 step.',\n        cardNumber: '048',\n        renderData: CardRenderer.builder((b) => b.production((pb) => pb.plants(1))),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Advanced Ecosystems",
  "tags" : [ "plant", "microbe", "animal" ],
  "victoryPoints" : 3,
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "plant"
  }, {
    "tag" : "animal"
  }, {
    "tag" : "microbe"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/AdvancedEcosystems.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\n\nexport class AdvancedEcosystems extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ADVANCED_ECOSYSTEMS,\n      tags: [Tag.PLANT, Tag.MICROBE, Tag.ANIMAL],\n      cost: 11,\n      victoryPoints: 3,\n\n      requirements: [{tag: Tag.PLANT}, {tag: Tag.ANIMAL}, {tag: Tag.MICROBE}],\n      metadata: {\n        description: 'Requires a plant tag, a microbe tag, and an animal tag.',\n        cardNumber: '135',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Aerobraked Ammonia Asteroid",
  "tags" : [ "space" ],
  "cost" : 25,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/AerobrakedAmmoniaAsteroid.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class AerobrakedAmmoniaAsteroid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.AEROBRAKED_AMMONIA_ASTEROID,\n      tags: [Tag.SPACE],\n      cost: 25,\n\n      behavior: {\n        production: {heat: 3, plants: 2},\n        addResourcesToAnyCard: {count: 4, type: CardResource.MICROBE},\n      },\n\n      metadata: {\n        description: 'Increase your heat production 3 steps and your plant production 2 steps. Add 4 microbes to ANOTHER card.',\n        cardNumber: '170',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.heat(3).br;\n            pb.plants(2);\n          }).br;\n          b.resource(CardResource.MICROBE, 4).asterix();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Ants",
  "tags" : [ "microbe" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 2,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 8,
    "count" : 8
  } ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Ants.ts",
  "sourceCode" : "import {IActionCard} from '../ICard';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {RemoveResourcesFromCard} from '../../deferredActions/RemoveResourcesFromCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class Ants extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ANTS,\n      tags: [Tag.MICROBE],\n      cost: 2,\n\n      resourceType: CardResource.MICROBE,\n      victoryPoints: {resourcesHere: {}, per: 2},\n      requirements: {oxygen: 8},\n\n      metadata: {\n        cardNumber: '035',\n        description: 'Nom Nom microbe myam at 8% Oxygen',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Remove 1 microbe from any card to add 1 to this card.', (eb) => {\n            eb.resource(CardResource.MICROBE, {all}).startAction.resource(CardResource.MICROBE);\n          }).br;\n          b.vpText('1 VP per 2 microbes on this card.');\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    if (player.game.isSoloMode()) return true;\n    return RemoveResourcesFromCard.getAvailableTargetCards(player, CardResource.MICROBE).length > 0;\n  }\n\n  public action(player: IPlayer) {\n    player.game.defer(new RemoveResourcesFromCard(player, CardResource.MICROBE).andThen((response) => {\n      if (response.proceed) {\n        player.game.defer(new AddResourcesToCard(player, CardResource.MICROBE, {filter: (c) => c.name === this.name}));\n      }\n    }));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Aquifer Pumping",
  "tags" : [ "building" ],
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/AquiferPumping.ts",
  "sourceCode" : "import {IActionCard} from '../ICard';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {PlaceOceanTile} from '../../deferredActions/PlaceOceanTile';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {TITLES} from '../../inputs/titles';\n\nexport const OCEAN_COST = 8;\nexport class AquiferPumping extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.AQUIFER_PUMPING,\n      tags: [Tag.BUILDING],\n      cost: 10,\n\n      metadata: {\n        cardNumber: '187',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 8 Mâ‚¬ to place 1 ocean tile. STEEL MAY BE USED as if you were playing a building card.',\n            (eb) => eb.megacredits(8).super((b) => b.steel(1)).startAction.oceans(1));\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.canAfford({cost: OCEAN_COST, steel: true, tr: {oceans: 1}});\n  }\n  public action(player: IPlayer) {\n    player.game.defer(new SelectPaymentDeferred(player, 8, {canUseSteel: true, title: TITLES.payForCardAction(this.name)}))\n      .andThen(() => player.game.defer(new PlaceOceanTile(player)));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Algae",
  "tags" : [ "plant" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 5,
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Algae.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Algae extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ALGAE,\n      tags: [Tag.PLANT],\n      cost: 10,\n\n      behavior: {\n        production: {plants: 2},\n        stock: {plants: 1},\n      },\n\n      requirements: {oceans: 5},\n      metadata: {\n        description: 'Requires 5 ocean tiles. Gain 1 plant and increase your plant production 2 steps.',\n        cardNumber: '047',\n        renderData: CardRenderer.builder((b) => b.production((pb) => pb.plants(2)).plants(1)),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "ArchaeBacteria",
  "tags" : [ "microbe" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -18,
    "max" : true,
    "count" : -18
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ArchaeBacteria.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {max} from '../Options';\n\nexport class ArchaeBacteria extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ARCHAEBACTERIA,\n      tags: [Tag.MICROBE],\n      cost: 6,\n\n      behavior: {\n        production: {plants: 1},\n      },\n\n      requirements: {temperature: -18, max},\n      metadata: {\n        description: 'It must be -18 C or colder. Increase your plant production 1 step.',\n        cardNumber: '042',\n        renderData: CardRenderer.builder((b) => b.production((pb) => pb.plants(1))),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Arctic Algae",
  "tags" : [ "plant" ],
  "cost" : 12,
  "type" : "active",
  "requirements" : [ {
    "temperature" : -12,
    "max" : true,
    "count" : -12
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ArcticAlgae.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {Priority} from '../../deferredActions/Priority';\nimport {GainResources} from '../../deferredActions/GainResources';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all, max} from '../Options';\nimport {Board} from '../../boards/Board';\n\nexport class ArcticAlgae extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ARCTIC_ALGAE,\n      tags: [Tag.PLANT],\n      cost: 12,\n\n      behavior: {\n        stock: {plants: 1},\n      },\n\n      requirements: {temperature: -12, max},\n      metadata: {\n        description: 'It must be -12 C or colder to play. Gain 1 plant.',\n        cardNumber: '023',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When anyone places an ocean tile, gain 2 plants.', (be) => be.oceans(1, {all}).startEffect.plants(2)).br;\n          b.plants(1);\n        }),\n      },\n    });\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    if (Board.isUncoveredOceanSpace(space)) {\n      cardOwner.game.defer(\n        new GainResources(cardOwner, Resource.PLANTS, {count: 2}).andThen(() => activePlayer.game.log(\n          '${0} gained 2 ${1} from ${2}',\n          (b) => b.player(cardOwner).string(Resource.PLANTS).cardName(this.name))),\n        cardOwner.id !== activePlayer.id ? Priority.OPPONENT_TRIGGER : undefined);\n    }\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Artificial Lake",
  "tags" : [ "building" ],
  "victoryPoints" : 1,
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -6,
    "count" : -6
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ArtificialLake.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CanAffordOptions, IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class ArtificialLake extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ARTIFICIAL_LAKE,\n      tags: [Tag.BUILDING],\n      cost: 10,\n      victoryPoints: 1,\n\n      behavior: {\n        ocean: {on: 'land'},\n      },\n\n      requirements: {temperature: -6},\n      metadata: {\n        description: 'Requires -6 C or warmer. Place 1 ocean tile ON AN AREA NOT RESERVED FOR OCEAN.',\n        cardNumber: '116',\n        renderData: CardRenderer.builder((b) => b.oceans(1).asterix()),\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer, canAffordOptions: CanAffordOptions) {\n    // This is not covered in executor.\n    if (!player.game.canAddOcean()) return true; // Card is playable, it just has no effect.\n    return player.game.board.getAvailableSpacesOnLand(player, canAffordOptions).length > 0;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Artificial Photosynthesis",
  "tags" : [ "science", "power" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ArtificialPhotosynthesis.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class ArtificialPhotosynthesis extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ARTIFICIAL_PHOTOSYNTHESIS,\n      tags: [Tag.SCIENCE, Tag.POWER],\n      cost: 12,\n\n      behavior: {\n        or: {\n          autoSelect: true,\n          behaviors: [\n            {\n              production: {energy: 2},\n              title: 'Increase your energy production 2 steps',\n            },\n            {\n              production: {plants: 1, heat: 1},\n              title: 'Increase your plant and heat production 1 step',\n            },\n          ],\n        },\n      },\n\n      metadata: {\n        description: 'Increase your plant and heat production 1 step or your energy production 2 steps.',\n        cardNumber: '115',\n        renderData: CardRenderer.builder((b) => b.production((pb) => pb.plants(1).heat(1).or(Size.SMALL).energy(2))),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Asteroid",
  "tags" : [ "space" ],
  "cost" : 14,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Asteroid.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class Asteroid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.ASTEROID,\n      tags: [Tag.SPACE],\n      cost: 14,\n\n      behavior: {\n        stock: {titanium: 2},\n        global: {temperature: 1},\n        removeAnyPlants: 3,\n      },\n\n      metadata: {\n        description: 'Raise temperature 1 step and gain 2 titanium. Remove up to 3 plants from any player.',\n        cardNumber: '009',\n        renderData: CardRenderer.builder((b) => {\n          b.temperature(1).br;\n          b.titanium(2).br;\n          b.minus().plants(-3, {all});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Asteroid Mining",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : {
    "tag" : "jovian",
    "per" : 2
  },
  "cost" : 27,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/AsteroidMining.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class AsteroidMining extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ASTEROID_MINING,\n      tags: [Tag.JOVIAN, Tag.SPACE],\n      cost: 27,\n      victoryPoints: {tag: Tag.JOVIAN, per: 2},\n\n\n      behavior: {\n        production: {titanium: 2},\n      },\n\n      metadata: {\n        description: 'Increase your titanium production 2 steps.',\n        cardNumber: '040',\n        renderData: CardRenderer.builder((b) => b.production((pb) => pb.titanium(2))),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Beam From A Thorium Asteroid",
  "tags" : [ "jovian", "space", "power" ],
  "victoryPoints" : {
    "tag" : "jovian",
    "per" : 3
  },
  "cost" : 24,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "jovian"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/BeamFromAThoriumAsteroid.ts",
  "sourceCode" : "\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class BeamFromAThoriumAsteroid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.BEAM_FROM_A_THORIUM_ASTEROID,\n      tags: [Tag.JOVIAN, Tag.SPACE, Tag.POWER],\n      cost: 24,\n      victoryPoints: {tag: Tag.JOVIAN, per: 3},\n\n\n      behavior: {\n        production: {heat: 3, energy: 3},\n      },\n\n      requirements: {tag: Tag.JOVIAN},\n      metadata: {\n        cardNumber: '058',\n        description: 'Requires a Jovian tag. Increase your heat production and energy production 3 steps each.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.heat(3).br;\n            pb.energy(3);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Big Asteroid",
  "tags" : [ "space" ],
  "cost" : 27,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/BigAsteroid.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../../cards/render/CardRenderer';\nimport {all} from '../Options';\n\nexport class BigAsteroid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.BIG_ASTEROID,\n      tags: [Tag.SPACE],\n      cost: 27,\n\n      behavior: {\n        stock: {titanium: 5},\n        global: {temperature: 2},\n        removeAnyPlants: 4,\n      },\n\n      metadata: {\n        description: 'Raise temperature 2 steps and gain 5 titanium. Remove up to 4 plants from any player.',\n        cardNumber: '011',\n        renderData: CardRenderer.builder((b) => {\n          b.temperature(2).br;\n          b.titanium(5).br;\n          b.minus().plants(-4, {all});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Biomass Combustors",
  "tags" : [ "power", "building" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 7,
    "count" : 7
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/BiomassCombustors.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class BiomassCombustors extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.BIOMASS_COMBUSTORS,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 6,\n\n      // This might not work for Robotic Workforce yet.\n      behavior: {\n        decreaseAnyProduction: {type: Resource.PLANTS, count: 1},\n        production: {energy: 2},\n      },\n\n      requirements: {oxygen: 7},\n      metadata: {\n        description: 'Requires 7% oxygen. Decrease any plant production 1 step and increase your energy production 2 steps.',\n        cardNumber: '183',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().plants(-1, {all}).br;\n            pb.plus().energy(2);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Birds",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 13,
    "count" : 13
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Birds.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Resource} from '../../../common/Resource';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class Birds extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.BIRDS,\n      tags: [Tag.ANIMAL],\n      cost: 10,\n\n      resourceType: CardResource.ANIMAL,\n      requirements: {oxygen: 13},\n      victoryPoints: {resourcesHere: {}},\n\n      behavior: {\n        decreaseAnyProduction: {type: Resource.PLANTS, count: 2},\n      },\n\n      action: {\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: '072',\n        description: 'Requires 13% oxygen. Decrease any plant production 2 steps. 1 VP per animal on this card.',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add an animal to this card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.ANIMAL);\n          }).br;\n          b.production((pb) => {\n            pb.minus().plants(-2, {all});\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Black Polar Dust",
  "tags" : [ ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/BlackPolarDust.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class BlackPolarDust extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.BLACK_POLAR_DUST,\n      cost: 11,\n\n      behavior: {\n        ocean: {},\n        production: {megacredits: -2, heat: 3},\n      },\n\n      metadata: {\n        cardNumber: '022',\n        description: 'Place an ocean tile. Decrease your Mâ‚¬ production 2 steps and increase your heat production 3 steps.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().megacredits(2).br;\n            pb.plus().heat(3);\n          }).oceans(1);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Breathing Filters",
  "tags" : [ "science" ],
  "victoryPoints" : 2,
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 7,
    "count" : 7
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/BreathingFilters.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\n\nexport class BreathingFilters extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.BREATHING_FILTERS,\n      tags: [Tag.SCIENCE],\n      cost: 9,\n      victoryPoints: 2,\n\n      requirements: {oxygen: 7},\n      metadata: {\n        description: 'Requires 7% oxygen.',\n        cardNumber: '114',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Bushes",
  "tags" : [ "plant" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -10,
    "count" : -10
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Bushes.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Bushes extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.BUSHES,\n      tags: [Tag.PLANT],\n      cost: 10,\n\n      behavior: {\n        production: {plants: 2},\n        stock: {plants: 2},\n      },\n\n      requirements: {temperature: -10},\n      metadata: {\n        cardNumber: '093',\n        description: 'Requires -10 C or warmer. Increase your plant production 2 steps. Gain 2 plants.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.plants(2);\n          }).plants(2);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Capital",
  "tags" : [ "city", "building" ],
  "victoryPoints" : "special",
  "cost" : 22,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Capital.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {TileType} from '../../../common/TileType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {AdjacencyBonus} from '../../ares/AdjacencyBonus';\nimport {Board} from '../../boards/Board';\nimport {CardMetadata} from '../../../common/cards/CardMetadata';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardRenderDynamicVictoryPoints} from '../render/CardRenderDynamicVictoryPoints';\n\nexport class Capital extends Card implements IProjectCard {\n  constructor(\n    name = CardName.CAPITAL,\n    adjacencyBonus: AdjacencyBonus | undefined = undefined,\n    metadata: CardMetadata = {\n      cardNumber: '008',\n      description: {\n        text: 'Requires 3 ocean tiles. Place this tile. Decrease your energy production 2 steps and increase your Mâ‚¬ production 5 steps.',\n        align: 'left',\n      },\n      renderData: CardRenderer.builder((b) => {\n        b.production((pb) => {\n          pb.minus().energy(2).br;\n          pb.plus().megacredits(5);\n        }).nbsp.tile(TileType.CAPITAL, false).br;\n        b.vpText('1 additional VP for each ocean tile adjacent to this city tile.');\n      }),\n      victoryPoints: CardRenderDynamicVictoryPoints.oceans(1, 1),\n    },\n  ) {\n    super({\n      type: CardType.AUTOMATED,\n      name,\n      tags: [Tag.CITY, Tag.BUILDING],\n      cost: 22,\n\n      behavior: {\n        production: {energy: -2, megacredits: 5},\n        tile: {\n          type: TileType.CAPITAL,\n          on: 'city',\n          title: 'Select space for special city tile',\n          adjacencyBonus: adjacencyBonus,\n        },\n      },\n\n      requirements: {oceans: 3},\n      victoryPoints: 'special',\n      metadata,\n    });\n  }\n  public override getVictoryPoints(player: IPlayer) {\n    const usedSpace = player.game.board.getSpaceByTileCard(this.name);\n    if (usedSpace !== undefined) {\n      return player.game.board.getAdjacentSpaces(usedSpace)\n        .filter((s) => Board.isOceanSpace(s)).length;\n    }\n    return 0;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Carbonate Processing",
  "tags" : [ "building" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/CarbonateProcessing.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class CarbonateProcessing extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.CARBONATE_PROCESSING,\n      tags: [Tag.BUILDING],\n      cost: 4,\n\n      behavior: {\n        production: {energy: -1, heat: 3},\n      },\n\n      metadata: {\n        cardNumber: '043',\n        description: 'Decrease your energy production 1 step and increase your heat production 3 steps.',\n        renderData: CardRenderer.builder((b) => b.production((pb) => {\n          pb.minus().energy(1).br;\n          pb.plus().heat(3);\n        })),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Cloud Seeding",
  "tags" : [ ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/CloudSeeding.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class CloudSeeding extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.CLOUD_SEEDING,\n      cost: 8,\n\n      behavior: {\n        production: {megacredits: -1, plants: 2},\n        decreaseAnyProduction: {type: Resource.HEAT, count: 1},\n      },\n\n      requirements: {oceans: 3},\n      metadata: {\n        cardNumber: '004',\n        description: 'Requires 3 ocean tiles. Decrease your Mâ‚¬ production 1 step and any heat production 1 step. Increase your plant production 2 steps.',\n        renderData: CardRenderer.builder((b) => b.production((pb) => {\n          pb.minus().megacredits(1).heat(1, {all}).br;\n          pb.plus().plants(2);\n        })),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Colonizer Training Camp",
  "tags" : [ "jovian", "building" ],
  "victoryPoints" : 3,
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 5,
    "max" : true,
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ColonizerTrainingCamp.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {max} from '../Options';\n\nexport class ColonizerTrainingCamp extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.COLONIZER_TRAINING_CAMP,\n      tags: [Tag.JOVIAN, Tag.BUILDING],\n      cost: 8,\n      victoryPoints: 3,\n\n      requirements: {oxygen: 5, max},\n      metadata: {\n        description: 'Oxygen must be 5% or less.',\n        cardNumber: '001',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Comet",
  "tags" : [ "space" ],
  "cost" : 21,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Comet.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class Comet extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.COMET,\n      tags: [Tag.SPACE],\n      cost: 21,\n\n      behavior: {\n        global: {temperature: 1},\n        ocean: {},\n        removeAnyPlants: 3,\n      },\n\n      metadata: {\n        cardNumber: '010',\n        description: 'Raise temperature 1 step and place an ocean tile. Remove up to 3 plants from any player.',\n        renderData: CardRenderer.builder((b) => {\n          b.temperature(1).oceans(1).br;\n          b.minus().plants(-3, {all});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Convoy From Europa",
  "tags" : [ "space" ],
  "cost" : 14,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ConvoyFromEuropa.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class ConvoyFromEuropa extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.CONVOY_FROM_EUROPA,\n      tags: [Tag.SPACE],\n      cost: 14,\n\n      behavior: {\n        ocean: {},\n        drawCard: 1,\n      },\n\n      metadata: {\n        cardNumber: '161',\n        description: 'Place 1 ocean tile and draw 1 card.',\n        renderData: CardRenderer.builder((b) => b.oceans(1).cards(1)),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Cupola City",
  "tags" : [ "city", "building" ],
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 9,
    "max" : true,
    "count" : 9
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/CupolaCity.ts",
  "sourceCode" : "\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {max} from '../Options';\n\nexport class CupolaCity extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.CUPOLA_CITY,\n      tags: [Tag.CITY, Tag.BUILDING],\n      cost: 16,\n\n      behavior: {\n        production: {energy: -1, megacredits: 3},\n        city: {},\n      },\n\n      requirements: {oxygen: 9, max},\n      metadata: {\n        cardNumber: '029',\n        description: 'Oxygen must be 9% or less. Place a city tile. Decrease your energy production 1 step and increase your Mâ‚¬ production 3 steps.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().megacredits(3);\n          }).nbsp.nbsp.city();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Decomposers",
  "tags" : [ "microbe" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 5,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 3,
    "count" : 3
  } ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Decomposers.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Phase} from '../../../common/Phase';\n\nexport class Decomposers extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.DECOMPOSERS,\n      tags: [Tag.MICROBE],\n      cost: 5,\n\n      resourceType: CardResource.MICROBE,\n      victoryPoints: {resourcesHere: {}, per: 3},\n      requirements: {oxygen: 3},\n\n      metadata: {\n        cardNumber: '131',\n        description: 'Requires 3% oxygen.',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play an animal, plant, or microbe tag, including this, add a microbe to this card.', (be) => {\n            be.tag(Tag.ANIMAL).slash();\n            be.tag(Tag.PLANT).slash();\n            be.tag(Tag.MICROBE);\n            be.startEffect.resource(CardResource.MICROBE);\n          }).br;\n          b.vpText('1 VP per 3 microbes on this card.');\n        }),\n      },\n    });\n  }\n  public onCardPlayed(player: IPlayer, card: IProjectCard): void {\n    const qty = player.tags.cardTagCount(card, [Tag.ANIMAL, Tag.PLANT, Tag.MICROBE]);\n    player.addResourceTo(this, {qty, log: true});\n  }\n  public override bespokePlay(player: IPlayer) {\n    // Get two extra microbes from EcoExperts if played during prelude while having just played EcoExperts\n    if (player.game.phase === Phase.PRELUDES && player.playedCards.length > 0 && player.playedCards[player.playedCards.length-1].name === CardName.ECOLOGY_EXPERTS) {\n      player.addResourceTo(this, {qty: 2, log: true});\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Deep Well Heating",
  "tags" : [ "power", "building" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/DeepWellHeating.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class DeepWellHeating extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.DEEP_WELL_HEATING,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 12,\n\n      behavior: {\n        production: {energy: 1},\n        global: {temperature: 1},\n      },\n\n      metadata: {\n        cardNumber: '003',\n        description: 'Increase your energy production 1 step. Increase temperature 1 step.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1)).temperature(1);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Deimos Down",
  "tags" : [ "space" ],
  "cost" : 31,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/DeimosDown.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class DeimosDown extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.DEIMOS_DOWN,\n      tags: [Tag.SPACE],\n      cost: 31,\n\n      behavior: {\n        stock: {steel: 5},\n        global: {temperature: 3},\n        removeAnyPlants: 8,\n      },\n\n      metadata: {\n        cardNumber: '039',\n        description: 'Raise temperature 3 steps and gain 5 steel. Remove up to 8 plants from any player.',\n        renderData: CardRenderer.builder((b) => {\n          b.temperature(3).br;\n          b.steel(5).br;\n          b.minus().plants(-8, {all});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Designed Microorganisms",
  "tags" : [ "science", "microbe" ],
  "cost" : 14,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -14,
    "max" : true,
    "count" : -14
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/DesignedMicroorganisms.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Domed Crater",
  "tags" : [ "city", "building" ],
  "victoryPoints" : 2,
  "cost" : 26,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 7,
    "max" : true,
    "count" : 7
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/DomedCrater.ts",
  "sourceCode" : "\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit, max} from '../Options';\n\nexport class DomedCrater extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.DOMED_CRATER,\n      tags: [Tag.CITY, Tag.BUILDING],\n      cost: 26,\n      victoryPoints: 2,\n\n      behavior: {\n        production: {energy: -1, megacredits: 3},\n        stock: {plants: 4},\n        city: {},\n      },\n\n      requirements: {oxygen: 7, max},\n      metadata: {\n        cardNumber: '016',\n        description: {\n          text: 'Oxygen must be 7% or less. Gain 4 plants. Place a city tile. Decrease your energy production 1 step and increase your Mâ‚¬ production 3 steps.',\n          align: 'left',\n        },\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().megacredits(3);\n          }).nbsp.city().plants(4, {digit}).br;\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Dust Seals",
  "tags" : [ ],
  "victoryPoints" : 2,
  "cost" : 2,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 3,
    "max" : true,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/DustSeals.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {max} from '../Options';\n\nexport class DustSeals extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.DUST_SEALS,\n      cost: 2,\n      victoryPoints: 2,\n\n      requirements: {oceans: 3, max},\n      metadata: {\n        description: 'Requires 3 or less ocean tiles.',\n        cardNumber: '119',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Ecological Zone",
  "tags" : [ "animal", "plant" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 12,
  "type" : "active",
  "requirements" : [ {
    "greeneries" : 1,
    "count" : 1
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/EcologicalZone.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CanAffordOptions, IPlayer} from '../../IPlayer';\nimport {CardResource} from '../../../common/CardResource';\nimport {TileType} from '../../../common/TileType';\nimport {PlaceTile} from '../../../server/deferredActions/PlaceTile';\nimport {Space} from '../../boards/Space';\nimport {CardName} from '../../../common/cards/CardName';\nimport {AdjacencyBonus} from '../../ares/AdjacencyBonus';\nimport {CardMetadata} from '../../../common/cards/CardMetadata';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Phase} from '../../../common/Phase';\nimport {Board} from '../../boards/Board';\n\nexport class EcologicalZone extends Card implements IProjectCard {\n  constructor(\n    name = CardName.ECOLOGICAL_ZONE,\n    cost = 12,\n    adjacencyBonus: AdjacencyBonus | undefined = undefined,\n    metadata: CardMetadata = {\n      description: {\n        text: 'Requires that YOU have a greenery tile. Place this tile adjacent to ANY greenery.',\n        align: 'left',\n      },\n      cardNumber: '128',\n      renderData: CardRenderer.builder((b) => {\n        b.effect('When you play an animal or plant tag INCLUDING THESE, add an animal to this card.', (eb) => {\n          eb.tag(Tag.ANIMAL).slash().tag(Tag.PLANT).startEffect.resource(CardResource.ANIMAL);\n        }).br;\n        b.vpText('1 VP per 2 animals on this card.').tile(TileType.ECOLOGICAL_ZONE, true).asterix();\n      }),\n    },\n  ) {\n    super({\n      type: CardType.ACTIVE,\n      name,\n      tags: [Tag.ANIMAL, Tag.PLANT],\n      cost,\n      resourceType: CardResource.ANIMAL,\n      adjacencyBonus,\n      victoryPoints: {resourcesHere: {}, per: 2},\n      requirements: {greeneries: 1},\n      metadata,\n    });\n  }\n\n\n  private getAvailableSpaces(player: IPlayer, canAffordOptions?: CanAffordOptions): Array<Space> {\n    return player.game.board.getAvailableSpacesOnLand(player, canAffordOptions)\n      .filter((space) => player.game.board.getAdjacentSpaces(space).filter(Board.isGreenerySpace).length > 0);\n  }\n  public override bespokeCanPlay(player: IPlayer, canAffordOptions: CanAffordOptions): boolean {\n    return this.getAvailableSpaces(player, canAffordOptions).length > 0;\n  }\n  public onCardPlayed(player: IPlayer, card: IProjectCard): void {\n    const qty = player.tags.cardTagCount(card, [Tag.ANIMAL, Tag.PLANT]);\n    player.addResourceTo(this, {qty, log: true});\n  }\n  public override bespokePlay(player: IPlayer) {\n    // Get one extra animal from EcoExperts if played during prelude while having just played EcoExperts\n    if (player.game.phase === Phase.PRELUDES && player.playedCards.length > 0 && player.playedCards[player.playedCards.length-1].name === CardName.ECOLOGY_EXPERTS) {\n      player.addResourceTo(this, {qty: 1, log: true});\n    }\n\n    player.game.defer(\n      new PlaceTile(player, {\n        tile: {tileType: TileType.ECOLOGICAL_ZONE, card: this.name},\n        on: () => this.getAvailableSpaces(player),\n        title: 'Select space next to greenery for special tile',\n        adjacencyBonus: this.adjacencyBonus,\n      }));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Energy Saving",
  "tags" : [ "power", "power" ],
  "victoryPoints" : 1,
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/EnergySaving.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Size} from '../../../common/cards/render/Size';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class EnergySaving extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ENERGY_SAVING,\n      tags: [Tag.POWER, Tag.POWER],\n      cost: 15,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {energy: {cities: {}}},\n      },\n\n      metadata: {\n        cardNumber: '189',\n        description: 'Increase your energy production 1 step for each city tile in play.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1).slash().city({size: Size.SMALL, all}));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Eos Chasma National Park",
  "tags" : [ "plant", "building" ],
  "victoryPoints" : 1,
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -18,
    "count" : -18
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/EosChasmaNationalPark.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Equatorial Magnetizer",
  "tags" : [ "building" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/EquatorialMagnetizer.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class EquatorialMagnetizer extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.EQUATORIAL_MAGNETIZER,\n      tags: [Tag.BUILDING],\n      cost: 6,\n\n      action: {\n        production: {energy: -1, megacredits: +1},\n        tr: 1,\n      },\n\n      metadata: {\n        cardNumber: '015',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Decrease your energy production 1 step to increase your terraform rating AND megacredits production 1 step.', (eb) => {\n            eb.production((pb) => pb.energy(1)).startAction.tr(1);\n            eb.production((pb) => pb.megacredits(1));\n          });\n        }),\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Extreme-Cold Fungus",
  "tags" : [ "microbe" ],
  "cost" : 13,
  "type" : "active",
  "requirements" : [ {
    "temperature" : -10,
    "max" : true,
    "count" : -10
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Extreme-ColdFungus.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Farming",
  "tags" : [ "plant" ],
  "victoryPoints" : 2,
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Farming.ts",
  "sourceCode" : "\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Farming extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.FARMING,\n      tags: [Tag.PLANT],\n      cost: 16,\n      victoryPoints: 2,\n\n      behavior: {\n        production: {megacredits: 2, plants: 2},\n        stock: {plants: 2},\n      },\n\n      requirements: {temperature: 4},\n      metadata: {\n        cardNumber: '118',\n        description: 'Requires +4Â° C or warmer. Increase your Mâ‚¬ production 2 steps and your plant production 2 steps. Gain 2 plants.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.megacredits(2).br;\n            pb.plants(2);\n          }).nbsp.plants(2);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Fish",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 9,
  "type" : "active",
  "requirements" : [ {
    "temperature" : 2,
    "count" : 2
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Fish.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class Fish extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.FISH,\n      tags: [Tag.ANIMAL],\n      cost: 9,\n\n      behavior: {\n        decreaseAnyProduction: {type: Resource.PLANTS, count: 1},\n      },\n\n      action: {\n        addResources: 1,\n      },\n\n      resourceType: CardResource.ANIMAL,\n      victoryPoints: {resourcesHere: {}},\n      requirements: {temperature: 2},\n\n      metadata: {\n        cardNumber: '052',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 animal to this card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.ANIMAL);\n          }).br;\n          b.production((pb) => pb.minus().plants(1, {all})).br;\n          b.vpText('1 VP for each animal on this card.');\n        }),\n        description: {\n          text: 'Requires +2 CÂ° or warmer. Decrease any plant production 1 step.',\n          align: 'left',\n        },\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Flooding",
  "tags" : [ ],
  "victoryPoints" : -1,
  "cost" : 7,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Flooding.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {SelectPlayer} from '../../inputs/SelectPlayer';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {PlaceOceanTile} from '../../deferredActions/PlaceOceanTile';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class Flooding extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.FLOODING,\n      cost: 7,\n      tr: {oceans: 1},\n      victoryPoints: -1,\n\n      metadata: {\n        cardNumber: '188',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(1).nbsp.minus().megacredits(4, {all}).asterix();\n        }),\n        description: 'Place an ocean tile. IF THERE ARE TILES ADJACENT TO THIS OCEAN TILE, YOU MAY REMOVE 4 Mâ‚¬ FROM THE OWNER OF ONE OF THOSE TILES.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    if (player.game.isSoloMode()) {\n      game.defer(new PlaceOceanTile(player));\n      return undefined;\n    }\n\n    game.defer(new PlaceOceanTile(player)).andThen((space) => {\n      const adjacentPlayers: Set<IPlayer> = new Set();\n      game.board.getAdjacentSpaces(space).forEach((space) => {\n        if (space.player && space.player !== player && space.tile) {\n          adjacentPlayers.add(space.player);\n        }\n      });\n\n      // TODO(kberg) This has got to be a common thing, right? Reuse this, right?\n      if (adjacentPlayers.size > 0) {\n        return new OrOptions(\n          new SelectPlayer(\n            Array.from(adjacentPlayers),\n            'Select adjacent player to remove 4 Mâ‚¬ from',\n            'Remove credits',\n          ).andThen((target) => {\n            target.maybeBlockAttack(player, (proceed) => {\n              if (proceed) {\n                target.stock.deduct(Resource.MEGACREDITS, 4, {log: true, from: player});\n              }\n              return undefined;\n            });\n            return undefined;\n          }),\n          new SelectOption('Don\\'t remove Mâ‚¬ from adjacent player'));\n      }\n      return undefined;\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Food Factory",
  "tags" : [ "building" ],
  "victoryPoints" : 2,
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/FoodFactory.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class FoodFactory extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.FOOD_FACTORY,\n      tags: [Tag.BUILDING],\n      cost: 15,\n\n      behavior: {\n        production: {megacredits: 10, plants: -2},\n      },\n      victoryPoints: 2,\n\n      metadata: {\n        cardNumber: '041',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().plants(2).br;\n            pb.plus().megacredits(10);\n          });\n        }),\n        description: 'Decrease your plant production 2 steps and increase your Mâ‚¬ production 10 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Fusion Power",
  "tags" : [ "science", "power", "building" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 1
  },
  "cost" : 25,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "power",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/FusionPower.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class FusionPower extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.FUSION_POWER,\n      tags: [Tag.SCIENCE, Tag.POWER, Tag.BUILDING],\n      cost: 25,\n      victoryPoints: {tag: Tag.POWER, per: 1},\n\n      behavior: {\n        production: {energy: 3},\n      },\n\n      requirements: {tag: Tag.POWER, count: 2},\n      metadata: {\n        cardNumber: '132',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(3));\n        }),\n        description: 'Requires 2 power tags. Increase your energy production 3 steps.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Fueled Generators",
  "tags" : [ "power", "building" ],
  "cost" : 1,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/FueledGenerators.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class FueledGenerators extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.FUELED_GENERATORS,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 1,\n\n      behavior: {\n        production: {energy: 1, megacredits: -1},\n      },\n\n      metadata: {\n        cardNumber: '100',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().megacredits(1).br;\n            pb.plus().energy(1);\n          });\n        }),\n        description: 'Decrease your Mâ‚¬ production 1 step and increase your energy production 1 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Ganymede Colony",
  "tags" : [ "jovian", "space", "city" ],
  "victoryPoints" : {
    "tag" : "jovian"
  },
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/GanymedeColony.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {SpaceName} from '../../SpaceName';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class GanymedeColony extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.GANYMEDE_COLONY,\n      tags: [Tag.JOVIAN, Tag.SPACE, Tag.CITY],\n      cost: 20,\n\n      victoryPoints: {tag: Tag.JOVIAN},\n      behavior: {\n        city: {space: SpaceName.GANYMEDE_COLONY},\n      },\n\n      metadata: {\n        description: 'Place a city tile ON THE RESERVED AREA.',\n        cardNumber: '081',\n        renderData: CardRenderer.builder((b) => {\n          b.city().asterix().br;\n          b.vpText('1 VP per Jovian tag you have.');\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Geothermal Power",
  "tags" : [ "power", "building" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/GeothermalPower.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class GeothermalPower extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.GEOTHERMAL_POWER,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 11,\n\n      behavior: {\n        production: {energy: 2},\n      },\n\n      metadata: {\n        cardNumber: '117',\n        renderData: CardRenderer.builder((b) => b.production((pb) => pb.energy(2))),\n        description: 'Increase your energy production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "GHG Factories",
  "tags" : [ "building" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/GHGFactories.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class GHGFactories extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.GHG_FACTORIES,\n      tags: [Tag.BUILDING],\n      cost: 10,\n\n      behavior: {\n        production: {energy: -1, heat: 4},\n      },\n\n      metadata: {\n        cardNumber: '126',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().heat(4, {digit});\n          });\n        }),\n        description: 'Decrease your energy production 1 step and increase your heat production 4 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "GHG Producing Bacteria",
  "tags" : [ "science", "microbe" ],
  "cost" : 8,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 3,
    "count" : 3
  } ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/GHGProducingBacteria.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\n\nexport class GHGProducingBacteria extends ActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.GHG_PRODUCING_BACTERIA,\n      tags: [Tag.SCIENCE, Tag.MICROBE],\n      cost: 8,\n      resourceType: CardResource.MICROBE,\n\n      requirements: {oxygen: 3},\n\n      action: {\n        or: {\n          autoSelect: true,\n          behaviors: [\n            {\n              spend: {resourcesHere: 2},\n              global: {temperature: 1},\n              title: 'Remove 2 microbes to raise temperature 1 step',\n              // LogHelper.logRemoveResource(player, this, 2, 'raise temperature 1 step');\n            },\n            {\n              addResources: 1,\n              title: 'Add 1 microbe to this card',\n            },\n          ],\n        },\n      },\n\n      metadata: {\n        description: 'Requires 3% oxygen.',\n        cardNumber: '034',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 microbe to this card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.MICROBE);\n          }).br;\n          b.or().br;\n          b.action('Remove 2 microbes to raise temperature 1 step.', (eb) => {\n            eb.resource(CardResource.MICROBE, 2).startAction.temperature(1);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Giant Ice Asteroid",
  "tags" : [ "space" ],
  "cost" : 36,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/GiantIceAsteroid.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class GiantIceAsteroid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.GIANT_ICE_ASTEROID,\n      tags: [Tag.SPACE],\n      cost: 36,\n\n      behavior: {\n        global: {temperature: 2},\n        removeAnyPlants: 6,\n        ocean: {count: 2},\n      },\n\n      metadata: {\n        description: 'Raise temperature 2 steps and place 2 ocean tiles. Remove up to 6 plants from any player.',\n        cardNumber: '080',\n        renderData: CardRenderer.builder((b) => {\n          b.temperature(2).br;\n          b.oceans(2).br;\n          b.minus().plants(-6, {all});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Giant Space Mirror",
  "tags" : [ "power", "space" ],
  "cost" : 17,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/GiantSpaceMirror.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class GiantSpaceMirror extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.GIANT_SPACE_MIRROR,\n      tags: [Tag.POWER, Tag.SPACE],\n      cost: 17,\n\n      behavior: {\n        production: {energy: 3},\n      },\n\n      metadata: {\n        cardNumber: '083',\n        renderData: CardRenderer.builder((b) => b.production((pb) => pb.energy(3))),\n        description: 'Increase your energy production 3 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Grass",
  "tags" : [ "plant" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -16,
    "count" : -16
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Grass.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Grass extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.GRASS,\n      tags: [Tag.PLANT],\n      cost: 11,\n\n      behavior: {\n        production: {plants: 1},\n        stock: {plants: 3},\n      },\n\n      requirements: {temperature: -16},\n      metadata: {\n        cardNumber: '087',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1)).plants(3);\n        }),\n        description: 'Requires -16Â° C or warmer. Increase your plant production 1 step. Gain 3 plants.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Great Dam",
  "tags" : [ "power", "building" ],
  "victoryPoints" : 1,
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/GreatDam.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class GreatDam extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.GREAT_DAM,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 12,\n\n      behavior: {\n        production: {energy: 2},\n      },\n      victoryPoints: 1,\n\n      requirements: {oceans: 4},\n      metadata: {\n        cardNumber: '136',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(2));\n        }),\n        description: 'Requires 4 ocean tiles. Increase your energy production 2 steps.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Greenhouses",
  "tags" : [ "plant", "building" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Greenhouses.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\nexport class Greenhouses extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.GREENHOUSES,\n      tags: [Tag.PLANT, Tag.BUILDING],\n      cost: 6,\n\n      behavior: {\n        stock: {plants: {cities: {}}},\n      },\n\n      metadata: {\n        cardNumber: '096',\n        renderData: CardRenderer.builder((b) => {\n          b.plants(1).slash().city({size: Size.SMALL, all});\n        }),\n        description: 'Gain 1 plant for each city tile in play.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Heather",
  "tags" : [ "plant" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -14,
    "count" : -14
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Heather.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Heather extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.HEATHER,\n      tags: [Tag.PLANT],\n      cost: 6,\n\n      behavior: {\n        production: {plants: 1},\n        stock: {plants: 1},\n      },\n\n      requirements: {temperature: -14},\n      metadata: {\n        cardNumber: '88',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1)).plants(1);\n        }),\n        description: 'Requires -14 CÂ° or warmer. Increase your plant production 1 step. Gain 1 plant.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Heat Trappers",
  "tags" : [ "power", "building" ],
  "victoryPoints" : -1,
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/HeatTrappers.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class HeatTrappers extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.HEAT_TRAPPERS,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 6,\n      victoryPoints: -1,\n\n      behavior: {\n        decreaseAnyProduction: {type: Resource.HEAT, count: 2},\n        production: {energy: 1},\n      },\n\n      metadata: {\n        cardNumber: '178',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().heat(2, {all}).br;\n            pb.plus().energy(1);\n          });\n        }),\n        description: 'Decrease any heat production 2 steps and increase your energy production 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Herbivores",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 12,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 8,
    "count" : 8
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Herbivores.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {Resource} from '../../../common/Resource';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\nimport {Board} from '../../boards/Board';\n\nexport class Herbivores extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.HERBIVORES,\n      tags: [Tag.ANIMAL],\n      cost: 12,\n\n      resourceType: CardResource.ANIMAL,\n      victoryPoints: {resourcesHere: {}, per: 2},\n      requirements: {oxygen: 8},\n\n      behavior: {\n        decreaseAnyProduction: {type: Resource.PLANTS, count: 1},\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: '147',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you place a greenery tile, add an animal to this card.', (eb) => {\n            eb.greenery({withO2: false}).startEffect.resource(CardResource.ANIMAL);\n          }).br;\n          b.vpText('1 VP per 2 animals on this card.');\n          b.resource(CardResource.ANIMAL).production((pb) => pb.minus().plants(1, {all}));\n        }),\n        description: {\n        // TODO (chosta): revert the original description once a solution for description space is found\n          text: 'Requires 8% oxygen. +1 animal to this card. -1 any plant production',\n          align: 'left',\n        },\n      },\n    });\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    if (cardOwner.id === activePlayer.id && Board.isGreenerySpace(space)) {\n      cardOwner.game.defer(new AddResourcesToCard(cardOwner, CardResource.ANIMAL, {filter: (c) => c.name === this.name}));\n    }\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Ice Asteroid",
  "tags" : [ "space" ],
  "cost" : 23,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/IceAsteroid.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class IceAsteroid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.ICE_ASTEROID,\n      tags: [Tag.SPACE],\n      cost: 23,\n\n      behavior: {\n        ocean: {count: 2},\n      },\n\n      metadata: {\n        cardNumber: '078',\n        renderData: CardRenderer.builder((b) => b.oceans(2)),\n        description: 'Place 2 ocean tiles.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Ice Cap Melting",
  "tags" : [ ],
  "cost" : 3,
  "type" : "event",
  "requirements" : [ {
    "temperature" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/IceCapMelting.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class IceCapMelting extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.ICE_CAP_MELTING,\n      cost: 3,\n\n      behavior: {\n        ocean: {},\n      },\n\n      requirements: {temperature: 2},\n      metadata: {\n        cardNumber: '181',\n        renderData: CardRenderer.builder((b) => b.oceans(1)),\n        description: 'Requires +2 C or warmer. Place 1 ocean tile.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Immigrant City",
  "tags" : [ "city", "building" ],
  "cost" : 13,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ImmigrantCity.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {PlaceCityTile} from '../../deferredActions/PlaceCityTile';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Priority} from '../../deferredActions/Priority';\nimport {GainProduction} from '../../deferredActions/GainProduction';\nimport {LoseProduction} from '../../deferredActions/LoseProduction';\nimport {Board} from '../../boards/Board';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class ImmigrantCity extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.IMMIGRANT_CITY,\n      tags: [Tag.CITY, Tag.BUILDING],\n      cost: 13,\n\n      metadata: {\n        cardNumber: '200',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When a city tile is placed, including this, increase your Mâ‚¬ production 1 step.', (eb) => {\n            eb.city({all}).startEffect.production((pb) => pb.megacredits(1));\n          }).br;\n          b.production((pb) => pb.minus().energy(1).megacredits(-2)).city();\n        }),\n        description: 'Decrease your energy production 1 step and decrease your Mâ‚¬ production 2 steps. Place a city tile.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    const hasEnergyProduction = player.production.energy >= 1;\n    const canPlaceCityOnMars = player.game.board.getAvailableSpacesForCity(player).length > 0;\n    const canDecreaseMcProduction = player.production.megacredits >= -4 || player.isCorporation(CardName.THARSIS_REPUBLIC);\n\n    return hasEnergyProduction && canDecreaseMcProduction && canPlaceCityOnMars;\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    if (Board.isCitySpace(space)) {\n      cardOwner.game.defer(\n        new GainProduction(cardOwner, Resource.MEGACREDITS),\n        cardOwner.id !== activePlayer.id ? Priority.OPPONENT_TRIGGER : undefined,\n      );\n    }\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlaceCityTile(player)).andThen(() => {\n      player.game.defer(new LoseProduction(player, Resource.ENERGY, {count: 1}));\n      player.game.defer(new LoseProduction(player, Resource.MEGACREDITS, {count: 2}));\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Immigration Shuttles",
  "tags" : [ "earth", "space" ],
  "victoryPoints" : {
    "cities" : { },
    "all" : true,
    "per" : 3
  },
  "cost" : 24,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ImmigrationShuttles.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class ImmigrationShuttles extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.IMMIGRATION_SHUTTLES,\n      tags: [Tag.EARTH, Tag.SPACE],\n      cost: 24,\n      victoryPoints: {cities: {}, all: true, per: 3},\n\n      behavior: {\n        production: {megacredits: 5},\n      },\n\n      metadata: {\n        cardNumber: '198',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(5)).br;\n          b.vpText('1 VP for every 3rd City in play.');\n        }),\n        description: 'Increase your Mâ‚¬ production 5 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Imported GHG",
  "tags" : [ "earth", "space" ],
  "cost" : 6,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ImportedGHG.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class ImportedGHG extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.IMPORTED_GHG,\n      tags: [Tag.EARTH, Tag.SPACE],\n      cost: 6,\n\n      behavior: {\n        production: {heat: 1},\n        stock: {heat: 3},\n      },\n\n      metadata: {\n        cardNumber: '162',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.heat(1)).heat(3);\n        }),\n        description: 'Increase your heat production 1 step and gain 3 heat.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Imported Hydrogen",
  "tags" : [ "earth", "space" ],
  "cost" : 16,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ImportedHydrogen.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {PlayerInput} from '../../PlayerInput';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class ImportedHydrogen extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.IMPORTED_HYDROGEN,\n      tags: [Tag.EARTH, Tag.SPACE],\n      cost: 16,\n\n      behavior: {\n        ocean: {},\n      },\n\n      metadata: {\n        cardNumber: '019',\n        renderData: CardRenderer.builder((b) => {\n          b.plants(3, {digit});\n          b.or();\n          b.resource(CardResource.MICROBE, {amount: 3, digit}).asterix().or();\n          b.resource(CardResource.ANIMAL, {amount: 2, digit}).asterix().br;\n          b.oceans(1);\n        }),\n        description: 'Gain 3 plants, or add 3 microbes or 2 animals to ANOTHER card. Place an ocean tile.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer): undefined | PlayerInput {\n    const availableMicrobeCards = player.getResourceCards(CardResource.MICROBE);\n    const availableAnimalCards = player.getResourceCards(CardResource.ANIMAL);\n\n    const gainPlants = function() {\n      player.stock.add(Resource.PLANTS, 3, {log: true});\n      return undefined;\n    };\n\n    if (availableMicrobeCards.length === 0 && availableAnimalCards.length === 0) {\n      return gainPlants();\n    }\n\n    const availableActions = [];\n\n    const gainPlantsOption = new SelectOption('Gain 3 plants', 'Gain plants').andThen(gainPlants);\n    availableActions.push(gainPlantsOption);\n\n    if (availableMicrobeCards.length === 1) {\n      const targetMicrobeCard = availableMicrobeCards[0];\n      availableActions.push(new SelectOption(message('Add ${0} microbes to ${1}', (b) => b.number(3).card(targetMicrobeCard)), 'Add microbes').andThen(() => {\n        player.addResourceTo(targetMicrobeCard, {qty: 3, log: true});\n        return undefined;\n      }));\n    } else if (availableMicrobeCards.length > 1) {\n      availableActions.push(new SelectCard('Add 3 microbes to a card',\n        'Add microbes',\n        availableMicrobeCards)\n        .andThen(([card]) => {\n          player.addResourceTo(card, {qty: 3, log: true});\n          return undefined;\n        }));\n    }\n\n    if (availableAnimalCards.length === 1) {\n      const targetAnimalCard = availableAnimalCards[0];\n      availableActions.push(new SelectOption(message('Add ${0} animals to ${1}', (b) => b.number(2).card(targetAnimalCard)), 'Add animals').andThen(() => {\n        player.addResourceTo(targetAnimalCard, {qty: 2, log: true});\n        return undefined;\n      }));\n    } else if (availableAnimalCards.length > 1) {\n      availableActions.push(new SelectCard('Add 2 animals to a card', 'Add animals', availableAnimalCards)\n        .andThen(([card]) => {\n          player.addResourceTo(card, {qty: 2, log: true});\n          return undefined;\n        }));\n    }\n\n    return new OrOptions(...availableActions);\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Imported Nitrogen",
  "tags" : [ "earth", "space" ],
  "cost" : 23,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ImportedNitrogen.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class ImportedNitrogen extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.IMPORTED_NITROGEN,\n      tags: [Tag.EARTH, Tag.SPACE],\n      cost: 23,\n\n      behavior: {\n        stock: {plants: 4},\n        tr: 1,\n        addResourcesToAnyCard: [\n          {type: CardResource.MICROBE, count: 3},\n          {type: CardResource.ANIMAL, count: 2},\n        ],\n      },\n\n      metadata: {\n        cardNumber: '163',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(1).br;\n          b.plants(4, {digit});\n          b.resource(CardResource.MICROBE, {amount: 3, digit}).asterix().nbsp;\n          b.resource(CardResource.ANIMAL, {amount: 2, digit}).asterix();\n        }),\n        description: 'Raise your TR 1 step and gain 4 plants. Add 3 microbes to ANOTHER card and 2 animals to ANOTHER card.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Import of Advanced GHG",
  "tags" : [ "earth", "space" ],
  "cost" : 8,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ImportofAdvancedGHG.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Industrial Microbes",
  "tags" : [ "microbe", "building", "power" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/IndustrialMicrobes.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class IndustrialMicrobes extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.INDUSTRIAL_MICROBES,\n      tags: [Tag.MICROBE, Tag.BUILDING, Tag.POWER],\n      cost: 12,\n\n      behavior: {\n        production: {energy: 1, steel: 1},\n      },\n\n      metadata: {\n        cardNumber: '158',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1).steel(1));\n        }),\n        description: 'Increase your energy production and your steel production 1 step each.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Insects",
  "tags" : [ "microbe" ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 6,
    "count" : 6
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Insects.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Insects extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.INSECTS,\n      tags: [Tag.MICROBE],\n      cost: 9,\n\n      behavior: {\n        production: {plants: {tag: Tag.PLANT}},\n      },\n\n      requirements: {oxygen: 6},\n      metadata: {\n        cardNumber: '148',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1).slash().tag(Tag.PLANT));\n        }),\n        description: 'Requires 6% oxygen. Increase your plant production 1 step for each plant tag you have.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Insulation",
  "tags" : [ ],
  "victoryPoints" : 1,
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Insulation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {SelectAmount} from '../../inputs/SelectAmount';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Insulation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.INSULATION,\n      cost: 4,\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: '152',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.text('-X').heat(1).nbsp.text('+').megacredits(1, {text: 'x'});\n          });\n        }),\n        description: 'Decrease your heat production any number of steps and increase your Mâ‚¬ production the same number of steps.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return player.production.heat >= 1;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    return new SelectAmount('Select amount of heat production to decrease', 'Decrease', 1, player.production.heat)\n      .andThen((amount) => {\n        player.production.add(Resource.HEAT, -amount, {log: true});\n        player.production.add(Resource.MEGACREDITS, amount, {log: true});\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Ironworks",
  "tags" : [ "building" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 11,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Ironworks.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class Ironworks extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.IRONWORKS,\n      tags: [Tag.BUILDING],\n      cost: 11,\n      victoryPoints: {tag: Tag.POWER, per: 3},\n\n      action: {\n        spend: {energy: 4},\n        stock: {steel: 1},\n        global: {oxygen: 1},\n      },\n\n      metadata: {\n        cardNumber: '101',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 4 energy to gain 1 steel and raise oxygen 1 step.', (eb) => {\n            eb.energy(4, {digit}).startAction.steel(1).oxygen(1);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Kelp Farming",
  "tags" : [ "plant" ],
  "victoryPoints" : 1,
  "cost" : 17,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 6,
    "count" : 6
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/KelpFarming.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class KelpFarming extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.KELP_FARMING,\n      tags: [Tag.PLANT],\n      cost: 17,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {megacredits: 2, plants: 3},\n        stock: {plants: 2},\n      },\n\n      requirements: {oceans: 6},\n      metadata: {\n        cardNumber: '055',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.megacredits(2).br;\n            pb.plants(3);\n          }).nbsp.plants(2);\n        }),\n        description: 'Requires 6 ocean tiles. Increase your Mâ‚¬ production 2 steps and your plant production 3 steps. Gain 2 plants.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Lake Marineris",
  "tags" : [ ],
  "victoryPoints" : 2,
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : 0,
    "count" : 0
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/LakeMarineris.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class LakeMarineris extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.LAKE_MARINERIS,\n      cost: 16,\n      requirements: {temperature: 0},\n      victoryPoints: 2,\n\n      behavior: {\n        ocean: {count: 2},\n      },\n\n      metadata: {\n        cardNumber: '053',\n        renderData: CardRenderer.builder((b) => b.oceans(2)),\n        description: 'Requires 0Â° C or warmer. Place 2 ocean tiles.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Large Convoy",
  "tags" : [ "earth", "space" ],
  "victoryPoints" : 2,
  "cost" : 36,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/LargeConvoy.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {PlayerInput} from '../../PlayerInput';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {digit} from '../Options';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class LargeConvoy extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.LARGE_CONVOY,\n      tags: [Tag.EARTH, Tag.SPACE],\n      cost: 36,\n      victoryPoints: 2,\n\n      behavior: {\n        drawCard: 2,\n        ocean: {},\n      },\n\n      metadata: {\n        cardNumber: '143',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(1).cards(2).br;\n          b.plants(5, {digit}).or(Size.MEDIUM).resource(CardResource.ANIMAL, {amount: 4, digit}).asterix();\n        }),\n        description: 'Place an ocean tile and draw 2 cards. Gain 5 plants or add 4 animals to ANOTHER card.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer): PlayerInput | undefined {\n    const animalCards = player.getResourceCards(CardResource.ANIMAL);\n\n    const gainPlants = function() {\n      player.stock.add(Resource.PLANTS, 5, {log: true});\n      return undefined;\n    };\n\n    if (animalCards.length === 0 ) return gainPlants();\n\n    const availableActions = [];\n\n    const gainPlantsOption = new SelectOption('Gain 5 plants', 'Gain plants').andThen(gainPlants);\n    availableActions.push(gainPlantsOption);\n\n    if (animalCards.length === 1) {\n      const targetAnimalCard = animalCards[0];\n      availableActions.push(new SelectOption(message('Add ${0} animals to ${1}', (b) => b.number(4).card(targetAnimalCard)), 'Add animals').andThen(() => {\n        player.addResourceTo(targetAnimalCard, {qty: 4, log: true});\n        return undefined;\n      }));\n    } else {\n      availableActions.push(\n        new SelectCard(\n          'Select card to add 4 animals',\n          'Add animals',\n          animalCards)\n          .andThen(([card]) => {\n            player.addResourceTo(card, {qty: 4, log: true});\n            return undefined;\n          }),\n      );\n    }\n\n    return new OrOptions(...availableActions);\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Lava Flows",
  "tags" : [ ],
  "cost" : 18,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/LavaFlows.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {TileType} from '../../../common/TileType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {AdjacencyBonus} from '../../ares/AdjacencyBonus';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class LavaFlows extends Card implements IProjectCard {\n  constructor(\n    name = CardName.LAVA_FLOWS,\n    adjacencyBonus: AdjacencyBonus | undefined = undefined,\n    metadata = {\n      cardNumber: '140',\n      renderData: CardRenderer.builder((b) => {\n        b.temperature(2).br;\n        b.tile(TileType.LAVA_FLOWS, true, false).asterix();\n      }),\n      description: 'Raise temperature 2 steps and place this tile ON EITHER THARSIS THOLUS, ASCRAEUS MONS, PAVONIS MONS OR ARSIA MONS.',\n    }) {\n    super({\n      type: CardType.EVENT,\n      name,\n      cost: 18,\n      adjacencyBonus,\n\n      behavior: {\n        global: {temperature: 2},\n        tile: {\n          type: TileType.LAVA_FLOWS,\n          on: 'volcanic',\n          title: 'Select either Tharsis Tholus, Ascraeus Mons, Pavonis Mons or Arsia Mons',\n          adjacencyBonus: adjacencyBonus,\n        },\n      },\n      metadata,\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Lichen",
  "tags" : [ "plant" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -24,
    "count" : -24
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Lichen.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Lichen extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.LICHEN,\n      tags: [Tag.PLANT],\n      cost: 7,\n\n      behavior: {\n        production: {plants: 1},\n      },\n\n      requirements: {temperature: -24},\n      metadata: {\n        cardNumber: '159',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1));\n        }),\n        description: 'Requires -24 C or warmer. Increase your plant production 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Livestock",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 9,
    "count" : 9
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Livestock.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Livestock extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.LIVESTOCK,\n      tags: [Tag.ANIMAL],\n      cost: 10,\n\n      resourceType: CardResource.ANIMAL,\n      victoryPoints: {resourcesHere: {}},\n      requirements: {oxygen: 9},\n\n      behavior: {\n        production: {plants: -1, megacredits: 2},\n      },\n\n      action: {\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: '184',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 animal to this card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.ANIMAL);\n          }).br;\n          b.production((pb) => {\n            pb.minus().plants(1).nbsp.plus().megacredits(2);\n          }).br;\n          b.vpText('1 VP for each animal on this card.');\n        }),\n        description: {\n          text: 'Requires 9% oxygen. Decrease your plant production 1 step and increase your Mâ‚¬ production 2 steps',\n          align: 'left',\n        },\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Local Heat Trapping",
  "tags" : [ ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/LocalHeatTrapping.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {ICard} from '../ICard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class LocalHeatTrapping extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.LOCAL_HEAT_TRAPPING,\n      cost: 1,\n\n      // Normally reserveUnits is managed by the rest of the game engine. But in this case\n      // the only purpose of reserveUnits is to prevent the player from spending that heat\n      // as Helion. Managing reserveUnits in this case will be handled by overriding canPlay\n      // and play, which is not a rare behavior.\n      //\n      // This is made that much more complicated thanks to Merger and Stormcraft Incorporated.\n      reserveUnits: {heat: 5},\n\n      metadata: {\n        cardNumber: '190',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().heat(5, {digit});\n          b.plus().plants(4, {digit});\n          b.or().resource(CardResource.ANIMAL, {amount: 2, digit}).asterix();\n        }),\n        description: 'Spend 5 heat to gain either 4 plants, or to add 2 animals to ANOTHER card.',\n      },\n    });\n  }\n\n  public override canPlay(player: IPlayer) {\n    // This card can cost 0 or 1.\n    const cardCost = player.getCardCost(this); // Would be nice to use precalculated value.\n\n    let heat = player.heat;\n    let floaters = player.resourcesOnCard(CardName.STORMCRAFT_INCORPORATED);\n\n    // If the card costs anything, determine where that 1MC can come from. Assume it can come from MC first.\n    if (cardCost === 1 && player.megaCredits === 0) {\n      if (heat > 0) {\n        heat--;\n      } else if (floaters > 0) {\n        floaters--;\n      } else {\n        return false;\n      }\n    }\n\n    // At this point, the card cost has been assumed handled, and it's just a question of whether there's 5 heat\n    // left.\n\n    const availableHeat = heat + (floaters * 2);\n    return availableHeat >= 5;\n  }\n\n  // By overriding play, the heat is not deducted automatically.\n  public override play(player: IPlayer) {\n    const availableActions = new OrOptions();\n\n    const animalCards: Array<ICard> = player.getResourceCards(CardResource.ANIMAL);\n    const gainPlantsOption = new SelectOption('Gain 4 plants', 'Gain plants').andThen(() => {\n      player.stock.add(Resource.PLANTS, 4, {log: true});\n      return undefined;\n    });\n\n    if (animalCards.length === 0) {\n      availableActions.options.push(gainPlantsOption);\n    } else if (animalCards.length === 1) {\n      const targetCard = animalCards[0];\n      availableActions.options.push(\n        gainPlantsOption,\n        new SelectOption(message('Add ${0} animals to ${1}', (b) => b.number(2).card(targetCard)), 'Add animals').andThen(() => {\n          player.addResourceTo(targetCard, {qty: 2, log: true});\n          return undefined;\n        }));\n    } else {\n      availableActions.options.push(\n        gainPlantsOption,\n        new SelectCard('Select card to add 2 animals', 'Add animals', animalCards)\n          .andThen(([card]) => {\n            player.addResourceTo(card, {qty: 2, log: true});\n            return undefined;\n          }));\n    }\n\n    return player.spendHeat(5, () => {\n      if (availableActions.options.length === 1) return availableActions.options[0].cb();\n      return availableActions;\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Lunar Beam",
  "tags" : [ "earth", "power" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/LunarBeam.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class LunarBeam extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.LUNAR_BEAM,\n      tags: [Tag.EARTH, Tag.POWER],\n      cost: 12,\n\n      behavior: {\n        production: {megacredits: -2, heat: 2, energy: 2},\n      },\n\n      metadata: {\n        cardNumber: '030',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().megacredits(2).br;\n            pb.plus().heat(2).br;\n            pb.plus().energy(2);\n          });\n        }),\n        description: 'Decrease your Mâ‚¬ production 2 steps and increase your heat production and energy production 2 steps each.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Magnetic Field Dome",
  "tags" : [ "building" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/MagneticFieldDome.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MagneticFieldDome extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.MAGNETIC_FIELD_DOME,\n      tags: [Tag.BUILDING],\n      cost: 5,\n\n      behavior: {\n        production: {energy: -2, plants: 2},\n        tr: 1,\n      },\n\n      metadata: {\n        cardNumber: '171',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(2).br;\n            pb.plus().plants(2);\n          });\n          b.tr(1);\n        }),\n        description: 'Decrease your energy production 2 steps and increase your plant production 2 steps. Raise your TR 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Magnetic Field Generators",
  "tags" : [ "building" ],
  "cost" : 14,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/MagneticFieldGenerators.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class MagneticFieldGenerators extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.MAGNETIC_FIELD_GENERATORS,\n      tags: [Tag.BUILDING],\n      cost: 14,\n\n      behavior: {\n        production: {energy: -3, plants: 2},\n        tr: 3,\n      },\n\n      metadata: {\n        cardNumber: '165',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(3, {digit}).br;\n            pb.plus().plants(2);\n          }).br;\n          b.tr(3);\n        }),\n        description: 'Decrease your energy production 3 steps and increase your plant production 2 steps. Raise your TR 3 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Mangrove",
  "tags" : [ "plant" ],
  "victoryPoints" : 1,
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Mangrove.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Mangrove extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.MANGROVE,\n      tags: [Tag.PLANT],\n      cost: 12,\n      victoryPoints: 1,\n\n      behavior: {\n        greenery: {on: 'ocean'},\n      },\n\n      requirements: {temperature: 4},\n      metadata: {\n        cardNumber: '059',\n        renderData: CardRenderer.builder((b) => b.greenery().asterix()),\n        description: 'Requires +4 C or warmer. Place a greenery tile ON AN AREA RESERVED FOR OCEAN and raise oxygen 1 step. Disregard normal placement restrictions for this.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Martian Rails",
  "tags" : [ "building" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 11,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/MartianRails.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\nexport class MartianRails extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MARTIAN_RAILS,\n      tags: [Tag.BUILDING],\n      cost: 11,\n      victoryPoints: {tag: Tag.POWER, per: 3},\n\n\n      action: {\n        spend: {energy: 1},\n        stock: {megacredits: {cities: {where: 'onmars'}}},\n      },\n\n      metadata: {\n        cardNumber: '007',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 energy to gain 1 Mâ‚¬ for each city tile ON MARS.', (eb) => {\n            eb.energy(1).startAction.megacredits(1).slash();\n            eb.city({all, size: Size.SMALL}).asterix();\n          }).br;\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Methane From Titan",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : 2,
  "cost" : 23,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/MethaneFromTitan.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MethaneFromTitan extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.METHANE_FROM_TITAN,\n      tags: [Tag.JOVIAN, Tag.SPACE],\n      cost: 23,\n      victoryPoints: 2,\n\n      behavior: {\n        production: {heat: 2, plants: 2},\n      },\n\n      requirements: {oxygen: 4},\n      metadata: {\n        description: 'Requires 4% oxygen. Increase your heat production 2 steps and your plant production 2 steps.',\n        cardNumber: '018',\n        renderData: CardRenderer.builder((b) => b.production((pb) => {\n          pb.heat(2).br;\n          pb.plants(2);\n        })),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Micro-Mills",
  "tags" : [ ],
  "cost" : 2,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Micro-Mills.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Mining Expedition",
  "tags" : [ ],
  "cost" : 12,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/MiningExpedition.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class MiningExpedition extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.MINING_EXPEDITION,\n      cost: 12,\n\n      behavior: {\n        stock: {steel: 3},\n        global: {oxygen: 1},\n        removeAnyPlants: 2,\n      },\n\n      metadata: {\n        cardNumber: '063',\n        renderData: CardRenderer.builder((b) => {\n          b.oxygen(1).br;\n          b.minus().plants(-2, {all});\n          b.steel(3);\n        }),\n        description: 'Raise oxygen 1 step. Remove 2 plants from any player. Gain 3 steel.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Mining Rights",
  "tags" : [ "building" ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/MiningRights.ts",
  "sourceCode" : "\nimport {CardName} from '../../../common/cards/CardName';\nimport {MiningCard} from './MiningCard';\nimport {TileType} from '../../../common/TileType';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MiningRights extends MiningCard {\n  protected readonly title: string = 'Select a space with a steel or titanium bonus';\n\n  constructor(\n    name = CardName.MINING_RIGHTS,\n    metadata = {\n      cardNumber: '067',\n      renderData: CardRenderer.builder((b) => {\n        b.tile(TileType.MINING_RIGHTS, true).asterix().br;\n        b.production((pb) => {\n          pb.steel(1).or().titanium(1);\n        }).asterix();\n      }),\n      description: 'Place this tile on an area with a steel or titanium placement bonus. Increase that production 1 step.',\n    },\n  ) {\n    super(\n      name,\n      9,\n      metadata);\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Mohole Area",
  "tags" : [ "building" ],
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/MoholeArea.ts",
  "sourceCode" : "import {TileType} from '../../../common/TileType';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {AdjacencyBonus} from '../../ares/AdjacencyBonus';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class MoholeArea extends Card implements IProjectCard {\n  constructor(\n    name = CardName.MOHOLE_AREA,\n    adjacencyBonus: AdjacencyBonus | undefined = undefined,\n    metadata = {\n      cardNumber: '142',\n      renderData: CardRenderer.builder((b) => {\n        b.production((pb) => pb.heat(4, {digit})).br;\n        b.tile(TileType.MOHOLE_AREA, true);\n      }),\n      description: 'Increase your heat production 4 steps. Place this tile ON AN AREA RESERVED FOR OCEAN.',\n    }) {\n    super({\n      type: CardType.AUTOMATED,\n      name,\n      tags: [Tag.BUILDING],\n      cost: 20,\n      metadata,\n\n      behavior: {\n        production: {heat: 4},\n        tile: {\n          type: TileType.MOHOLE_AREA,\n          on: 'ocean',\n          adjacencyBonus: adjacencyBonus,\n        },\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Moss",
  "tags" : [ "plant" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Moss.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Moss extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.MOSS,\n      tags: [Tag.PLANT],\n      cost: 4,\n\n      behavior: {\n        production: {plants: 1},\n      },\n\n      requirements: {oceans: 3},\n      metadata: {\n        cardNumber: '122',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1)).nbsp.minus().plants(1);\n        }),\n        description: 'Requires 3 ocean tiles and that you lose 1 plant. Increase your plant production 1 step.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    const hasViralEnhancers = player.playedCards.find((card) => card.name === CardName.VIRAL_ENHANCERS);\n    const hasEnoughPlants = player.plants >= 1 || hasViralEnhancers !== undefined || player.isCorporation(CardName.MANUTECH);\n\n    return hasEnoughPlants;\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.plants--;\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Natural Preserve",
  "tags" : [ "science", "building" ],
  "victoryPoints" : 1,
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 4,
    "max" : true,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/NaturalPreserve.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {TileType} from '../../../common/TileType';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {AdjacencyBonus} from '../../ares/AdjacencyBonus';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {max} from '../Options';\n\nexport class NaturalPreserve extends Card implements IProjectCard {\n  constructor(\n    name = CardName.NATURAL_PRESERVE,\n    adjacencyBonus: AdjacencyBonus | undefined = undefined,\n    metadata = {\n      cardNumber: '044',\n      renderData: CardRenderer.builder((b) => {\n        b.production((pb) => pb.megacredits(1)).nbsp.tile(TileType.NATURAL_PRESERVE, true).asterix();\n      }),\n      description: 'Oxygen must be 4% or less. Place this tile NEXT TO NO OTHER TILE. Increase your Mâ‚¬ production 1 step.',\n    }) {\n    super({\n      type: CardType.AUTOMATED,\n      name,\n      tags: [Tag.SCIENCE, Tag.BUILDING],\n      cost: 9,\n\n      behavior: {\n        production: {megacredits: 1},\n        tile: {\n          type: TileType.NATURAL_PRESERVE,\n          on: 'isolated',\n          adjacencyBonus: adjacencyBonus,\n        },\n      },\n\n      adjacencyBonus,\n      requirements: {oxygen: 4, max},\n      victoryPoints: 1,\n      metadata,\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Nitrite Reducing Bacteria",
  "tags" : [ "microbe" ],
  "cost" : 8,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/NitriteReducingBacteria.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\n\nexport class NitriteReducingBacteria extends ActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.NITRITE_REDUCING_BACTERIA,\n      tags: [Tag.MICROBE],\n      cost: 8,\n      resourceType: CardResource.MICROBE,\n\n      behavior: {\n        addResources: 3,\n      },\n\n      action: {\n        or: {\n          autoSelect: true,\n          behaviors: [\n            {\n              spend: {resourcesHere: 3},\n              tr: 1,\n              title: 'Remove 3 microbes to increase your terraform rating 1 step',\n              // LogHelper.logRemoveResource(player, this, 3, 'gain 1 TR');\n            },\n            {\n              addResources: 1,\n              title: 'Add 1 microbe to this card',\n            },\n          ],\n        },\n      },\n\n      metadata: {\n        cardNumber: '157',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 microbe to this card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.MICROBE);\n          }).br;\n          b.or().br;\n          b.action('Remove 3 microbes to increase your TR 1 step.', (eb) => {\n            eb.resource(CardResource.MICROBE, 3).startAction.tr(1);\n          }).br;\n          b.resource(CardResource.MICROBE, 3);\n        }),\n        description: 'Add 3 microbes to this card.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Nitrogen-Rich Asteroid",
  "tags" : [ "space" ],
  "cost" : 31,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Nitrogen-RichAsteroid.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Nitrophilic Moss",
  "tags" : [ "plant" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/NitrophilicMoss.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class NitrophilicMoss extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.NITROPHILIC_MOSS,\n      tags: [Tag.PLANT],\n      cost: 8,\n\n      behavior: {\n        production: {plants: 2},\n      },\n\n      requirements: {oceans: 3},\n      metadata: {\n        cardNumber: '146',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.plants(2);\n          }).nbsp.minus().plants(2);\n        }),\n        description: 'Requires 3 ocean tiles and that you lose 2 plants. Increase your plant production 2 steps.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    const viralEnhancers = player.playedCards.find((card) => card.name === CardName.VIRAL_ENHANCERS);\n    const hasEnoughPlants = player.plants >= 2 || player.isCorporation(CardName.MANUTECH) || player.plants >= 1 && viralEnhancers !== undefined;\n\n    return hasEnoughPlants;\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.plants -= 2;\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Noctis City",
  "tags" : [ "city", "building" ],
  "cost" : 18,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/NoctisCity.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {PlaceCityTile} from '../../deferredActions/PlaceCityTile';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class NoctisCity extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.NOCTIS_CITY,\n      tags: [Tag.CITY, Tag.BUILDING],\n      cost: 18,\n\n      behavior: {\n        production: {energy: -1, megacredits: 3},\n      },\n\n      metadata: {\n        cardNumber: '017',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().megacredits(3);\n          }).nbsp.city().asterix();\n        }),\n        description: 'Decrease your energy production 1 step and increase your Mâ‚¬ production 3 steps. Place a city tile ON THE RESERVED AREA, disregarding normal placement restrictions.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    if (player.game.board.noctisCitySpaceId !== undefined) {\n      return true;\n    } else {\n      return player.game.board.getAvailableSpacesForCity(player).length > 0;\n    }\n  }\n  public override bespokePlay(player: IPlayer) {\n    const noctisCitySpaceId = player.game.board.noctisCitySpaceId;\n    if (noctisCitySpaceId !== undefined) {\n      const space = player.game.board.getSpaceOrThrow(noctisCitySpaceId);\n      player.game.addCity(player, space);\n    } else {\n      player.game.defer(\n        new PlaceCityTile(player, {\n          title: message('Select space for ${0}', (b) => b.card(this)),\n        }),\n      );\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Noctis Farming",
  "tags" : [ "plant", "building" ],
  "victoryPoints" : 1,
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -20,
    "count" : -20
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/NoctisFarming.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class NoctisFarming extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.NOCTIS_FARMING,\n      tags: [Tag.PLANT, Tag.BUILDING],\n      cost: 10,\n      requirements: {temperature: -20},\n      victoryPoints: 1,\n\n      behavior: {\n        production: {megacredits: 1},\n        stock: {plants: 2},\n      },\n\n      metadata: {\n        cardNumber: '176',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.megacredits(1);\n          }).nbsp.plants(2);\n        }),\n        description: 'Requires -20 C or warmer. Increase your Mâ‚¬ production 1 step and gain 2 plants.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Nuclear Power",
  "tags" : [ "power", "building" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/NuclearPower.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class NuclearPower extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.NUCLEAR_POWER,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 10,\n\n      behavior: {\n        production: {energy: 3, megacredits: -2},\n      },\n\n      metadata: {\n        cardNumber: '045',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().megacredits(2).br;\n            pb.plus().energy(3);\n          });\n        }),\n        description: 'Decrease your Mâ‚¬ production 2 steps and increase your energy production 3 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Nuclear Zone",
  "tags" : [ "earth" ],
  "victoryPoints" : -2,
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/NuclearZone.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {TileType} from '../../../common/TileType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {AdjacencyBonus} from '../../ares/AdjacencyBonus';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class NuclearZone extends Card implements IProjectCard {\n  constructor(\n    name = CardName.NUCLEAR_ZONE,\n    cost = 10,\n    adjacencyBonus: AdjacencyBonus | undefined = undefined,\n    metadata = {\n      cardNumber: '097',\n      renderData: CardRenderer.builder((b) => {\n        b.tile(TileType.NUCLEAR_ZONE, true).br;\n        b.temperature(2);\n      }),\n      description: 'Place this tile and raise temperature 2 steps.',\n    }) {\n    super({\n      type: CardType.AUTOMATED,\n      name,\n      tags: [Tag.EARTH],\n      cost,\n      behavior: {\n        global: {temperature: 2},\n        tile: {\n          type: TileType.NUCLEAR_ZONE,\n          on: 'land',\n          adjacencyBonus: adjacencyBonus,\n        },\n      },\n      metadata,\n      victoryPoints: -2,\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Open City",
  "tags" : [ "city", "building" ],
  "victoryPoints" : 1,
  "cost" : 21,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 12,
    "count" : 12
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/OpenCity.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class OpenCity extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.OPEN_CITY,\n      tags: [Tag.CITY, Tag.BUILDING],\n      cost: 21,\n      requirements: {oxygen: 12},\n      victoryPoints: 1,\n\n      behavior: {\n        production: {energy: -1, megacredits: 4},\n        stock: {plants: 2},\n        city: {},\n      },\n\n      metadata: {\n        cardNumber: '108',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().megacredits(4);\n          }).city().plants(2);\n        }),\n        description: {\n          text: 'Requires 12% oxygen. Gain 2 plants. Place a city tile. Decrease your energy production 1 step and increase your Mâ‚¬ production 4 steps.',\n          align: 'left',\n        },\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Optimal Aerobraking",
  "tags" : [ "space" ],
  "cost" : 7,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/OptimalAerobraking.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\n\nexport class OptimalAerobraking extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.OPTIMAL_AEROBRAKING,\n      tags: [Tag.SPACE],\n      cost: 7,\n\n      metadata: {\n        cardNumber: '031',\n        renderData: CardRenderer.builder((b) => b.effect('When you play a space event, you gain 3 Mâ‚¬ and 3 heat.', (be) => {\n          be.tag(Tag.SPACE).tag(Tag.EVENT).startEffect.megacredits(3).heat(3);\n        })),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    if (card.type === CardType.EVENT && card.tags.includes(Tag.SPACE)) {\n      player.stock.add(Resource.MEGACREDITS, 3, {log: true, from: this});\n      player.stock.add(Resource.HEAT, 3, {log: true, from: this});\n    }\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Ore Processor",
  "tags" : [ "building" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 13,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/OreProcessor.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class OreProcessor extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ORE_PROCESSOR,\n      tags: [Tag.BUILDING],\n      cost: 13,\n      victoryPoints: {tag: Tag.POWER, per: 3},\n\n\n      action: {\n        spend: {energy: 4},\n        stock: {titanium: 1},\n        global: {oxygen: 1},\n      },\n\n      metadata: {\n        cardNumber: '104',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 4 energy to gain 1 titanium and increase oxygen 1 step.', (eb) => {\n            eb.energy(4, {digit}).startAction.titanium(1).oxygen(1);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Permafrost Extraction",
  "tags" : [ ],
  "cost" : 8,
  "type" : "event",
  "requirements" : [ {
    "temperature" : -8,
    "count" : -8
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/PermafrostExtraction.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class PermafrostExtraction extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.PERMAFROST_EXTRACTION,\n      cost: 8,\n\n      behavior: {\n        ocean: {},\n      },\n\n      requirements: {temperature: -8},\n      metadata: {\n        cardNumber: '191',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(1);\n        }),\n        description: 'Requires -8 C or warmer. Place 1 ocean tile.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Peroxide Power",
  "tags" : [ "power", "building" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/PeroxidePower.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class PeroxidePower extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.PEROXIDE_POWER,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 7,\n\n      behavior: {\n        production: {energy: 2, megacredits: -1},\n      },\n\n      metadata: {\n        cardNumber: '089',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().megacredits(1).br;\n            pb.plus().energy(2);\n          });\n        }),\n        description: 'Decrease your Mâ‚¬ production 1 step and increase your energy production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Pets",
  "tags" : [ "earth", "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Pets.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Priority} from '../../deferredActions/Priority';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {Board} from '../../boards/Board';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\nexport class Pets extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.PETS,\n      tags: [Tag.EARTH, Tag.ANIMAL],\n      cost: 10,\n      resourceType: CardResource.ANIMAL,\n      protectedResources: true,\n\n      victoryPoints: {resourcesHere: {}, per: 2},\n\n      behavior: {\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: '172',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When any city tile is placed, add an animal to this card.', (eb) => {\n            eb.city({size: Size.SMALL, all}).startEffect.resource(CardResource.ANIMAL);\n          }).br;\n          b.resource(CardResource.ANIMAL).br;\n          b.text('Animals may not be removed from this card', Size.SMALL, true).br;\n          b.vpText('1 VP per 2 animals here.');\n        }),\n        description: {text: 'Add 1 animal to this card.', align: 'left'},\n      },\n    });\n  }\n\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    if (Board.isCitySpace(space)) {\n      cardOwner.game.defer(\n        new AddResourcesToCard(cardOwner, CardResource.ANIMAL, {filter: (c) => c.name === this.name}),\n        cardOwner.id !== activePlayer.id ? Priority.OPPONENT_TRIGGER : undefined,\n      );\n    }\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Phobos Space Haven",
  "tags" : [ "jovian", "space", "city" ],
  "victoryPoints" : 2,
  "cost" : 21,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/PhobosSpaceHaven.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {SpaceName} from '../../SpaceName';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class PhobosSpaceHaven extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.PHOBOS_SPACE_HAVEN,\n      tags: [Tag.JOVIAN, Tag.SPACE, Tag.CITY],\n      cost: 21,\n      victoryPoints: 2,\n\n      behavior: {\n        production: {titanium: 1},\n        city: {space: SpaceName.PHOBOS_SPACE_HAVEN},\n      },\n\n      metadata: {\n        cardNumber: '021',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.titanium(1)).nbsp.city().asterix();\n        }),\n        description: 'Increase your titanium production 1 step and place a city tile ON THE RESERVED AREA.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Plantation",
  "tags" : [ "plant" ],
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Plantation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Plantation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.PLANTATION,\n      tags: [Tag.PLANT],\n      cost: 15,\n\n      behavior: {\n        greenery: {},\n      },\n\n      requirements: {tag: Tag.SCIENCE, count: 2},\n      metadata: {\n        cardNumber: '193',\n        renderData: CardRenderer.builder((b) => {\n          b.greenery();\n        }),\n        description: 'Requires 2 science tags. Place a greenery tile and raise oxygen 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Power Grid",
  "tags" : [ "power" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/PowerGrid.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class PowerGrid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.POWER_GRID,\n      tags: [Tag.POWER],\n      victoryPoints: {tag: Tag.POWER, per: 3},\n\n      cost: 16,\n\n      behavior: {\n        production: {energy: {tag: Tag.POWER}},\n      },\n\n      metadata: {\n        cardNumber: '102',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1).slash().tag(Tag.POWER));\n        }),\n        description: 'Increase your energy production step for each power tag you have, including this.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Power Plant",
  "tags" : [ "power", "building" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/PowerPlant.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class PowerPlant extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.POWER_PLANT,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 4,\n\n      behavior: {\n        production: {energy: 1},\n      },\n\n      metadata: {\n        cardNumber: '141',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1));\n        }),\n        description: 'Increase your energy production 1 step.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Predators",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 13,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 11,
    "count" : 11
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Predators.ts",
  "sourceCode" : "import {IActionCard} from '../ICard';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {RemoveResourcesFromCard} from '../../deferredActions/RemoveResourcesFromCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class Predators extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.PREDATORS,\n      tags: [Tag.ANIMAL],\n      cost: 13,\n\n      resourceType: CardResource.ANIMAL,\n      victoryPoints: {resourcesHere: {}},\n      requirements: {oxygen: 11},\n\n      metadata: {\n        cardNumber: '024',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Remove 1 animal from any card and add it to this card.', (eb) => {\n            eb.resource(CardResource.ANIMAL, {all}).startAction.resource(CardResource.ANIMAL);\n          }).br;\n          b.vpText('1 VP per animal on this card.');\n        }),\n        description: 'Requires 11% oxygen.',\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    if (player.game.isSoloMode()) return true;\n    return RemoveResourcesFromCard.getAvailableTargetCards(player, CardResource.ANIMAL).length > 0;\n  }\n\n  public action(player: IPlayer) {\n    player.game.defer(\n      new RemoveResourcesFromCard(player, CardResource.ANIMAL)\n        .andThen((response) => {\n          if (response.proceed) {\n            player.game.defer(new AddResourcesToCard(player, CardResource.ANIMAL, {filter: (c) => c.name === this.name}));\n          }\n        }));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Protected Valley",
  "tags" : [ "plant", "building" ],
  "cost" : 21,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ProtectedValley.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class ProtectedValley extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.PROTECTED_VALLEY,\n      tags: [Tag.PLANT, Tag.BUILDING],\n      cost: 21,\n\n      behavior: {\n        production: {megacredits: 2},\n        greenery: {on: 'ocean'},\n      },\n\n      metadata: {\n        cardNumber: '174',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(2)).nbsp;\n          b.greenery().asterix();\n        }),\n        description: 'Increase your Mâ‚¬ production 2 steps. Place a greenery tile ON AN AREA RESERVED FOR OCEAN, disregarding normal placement restrictions, and increase oxygen 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Rad-Chem Factory",
  "tags" : [ "building" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Rad-ChemFactory.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Regolith Eaters",
  "tags" : [ "science", "microbe" ],
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/RegolithEaters.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class RegolithEaters extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.REGOLITH_EATERS,\n      tags: [Tag.SCIENCE, Tag.MICROBE],\n      cost: 10,\n      resourceType: CardResource.MICROBE,\n\n      action: {\n        or: {\n          autoSelect: true,\n          behaviors: [{\n            title: 'Remove 2 microbes to raise oxygen level 1 step',\n            spend: {resourcesHere: 2},\n            global: {oxygen: 1},\n            // LogHelper.logRemoveResource(player, this, 2, 'raise oxygen 1 step');\n          },\n          {\n            title: 'Add 1 microbe to this card',\n            addResources: 1,\n          }],\n        },\n      },\n\n      metadata: {\n        cardNumber: '033',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 microbe to this card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.MICROBE);\n          }).br;\n          b.or().br;\n          b.action('Remove 2 microbes from this card to raise oxygen level 1 step.', (eb) => {\n            eb.resource(CardResource.MICROBE, 2).startAction.oxygen(1);\n          }).br;\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Release of Inert Gases",
  "tags" : [ ],
  "cost" : 11,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ReleaseofInertGases.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Research Outpost",
  "tags" : [ "science", "city", "building" ],
  "cardDiscount" : {
    "amount" : 1
  },
  "victoryPoints" : -1,
  "cost" : 19,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ResearchOutpost.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class ResearchOutpost extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.RESEARCH_OUTPOST,\n      tags: [Tag.SCIENCE, Tag.CITY, Tag.BUILDING],\n      cost: 19,\n      victoryPoints: -1,\n\n      behavior: {\n        city: {on: 'isolated'},\n      },\n\n      cardDiscount: {amount: 1},\n      metadata: {\n        cardNumber: '020',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play a card, you pay 1 Mâ‚¬ less for it.', (eb) => {\n            eb.empty().startEffect.megacredits(-1);\n          }).br;\n          b.city();\n        }),\n        description: 'Place a city tile NEXT TO NO OTHER TILE.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Rover Construction",
  "tags" : [ "building" ],
  "victoryPoints" : 1,
  "cost" : 7,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/RoverConstruction.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Space} from '../../boards/Space';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {Priority} from '../../deferredActions/Priority';\nimport {GainResources} from '../../deferredActions/GainResources';\nimport {Board} from '../../boards/Board';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\nexport class RoverConstruction extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ROVER_CONSTRUCTION,\n      tags: [Tag.BUILDING],\n      cost: 7,\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: '038',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When any city tile is placed, gain 2 Mâ‚¬.', (eb) => {\n            eb.city({size: Size.SMALL, all}).startEffect.megacredits(2);\n          });\n        }),\n      },\n    });\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    if (Board.isCitySpace(space)) {\n      cardOwner.game.defer(\n        new GainResources(cardOwner, Resource.MEGACREDITS, {count: 2, log: true}),\n        cardOwner.id !== activePlayer.id ? Priority.OPPONENT_TRIGGER : undefined,\n      );\n    }\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Search For Life",
  "tags" : [ "science", "microbe" ],
  "victoryPoints" : "special",
  "cost" : 3,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 6,
    "max" : true,
    "count" : 6
  } ],
  "resourceType" : "Science",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/SearchForLife.ts",
  "sourceCode" : "import {IActionCard} from '../ICard';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardRenderDynamicVictoryPoints} from '../render/CardRenderDynamicVictoryPoints';\nimport {max} from '../Options';\nimport {TITLES} from '../../inputs/titles';\n\nexport class SearchForLife extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SEARCH_FOR_LIFE,\n      tags: [Tag.SCIENCE, Tag.MICROBE],\n      cost: 3,\n\n      resourceType: CardResource.SCIENCE,\n      victoryPoints: 'special',\n\n      requirements: {oxygen: 6, max},\n      metadata: {\n        cardNumber: '005',\n        description: 'Oxygen must be 6% or less.',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 Mâ‚¬ to reveal the top card of the draw deck. If that card has a microbe tag, add a science resource here.', (eb) => {\n            eb.megacredits(1).startAction.tag(Tag.MICROBE).asterix().nbsp.colon().nbsp.resource(CardResource.SCIENCE);\n          }).br;\n          b.vpText('3 VPs if you have one or more science resources here.');\n        }),\n        victoryPoints: CardRenderDynamicVictoryPoints.searchForLife(),\n      },\n    });\n  }\n\n  public override getVictoryPoints() {\n    if (this.resourceCount > 0) {\n      return 3;\n    }\n    return 0;\n  }\n  public canAct(player: IPlayer): boolean {\n    return player.canAfford(1) && player.game.projectDeck.canDraw(1);\n  }\n\n  public action(player: IPlayer) {\n    player.game.defer(new SelectPaymentDeferred(player, 1, {title: TITLES.payForCardAction(this.name)}))\n      .andThen(() => {\n        const card = player.game.projectDeck.drawOrThrow(player.game);\n        player.game.log('${0} revealed and discarded ${1}', (b) => b.player(player).card(card, {tags: true}));\n        if (card.tags.includes(Tag.MICROBE)) {\n          player.addResourceTo(this, 1);\n          player.game.log('${0} found life!', (b) => b.player(player));\n        }\n\n        player.game.projectDeck.discard(card);\n      });\n\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Shuttles",
  "tags" : [ "space" ],
  "cardDiscount" : {
    "tag" : "space",
    "amount" : 2
  },
  "victoryPoints" : 1,
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 5,
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Shuttles.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Shuttles extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SHUTTLES,\n      tags: [Tag.SPACE],\n      cost: 10,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {energy: -1, megacredits: 2},\n      },\n\n      requirements: {oxygen: 5},\n      cardDiscount: {tag: Tag.SPACE, amount: 2},\n      metadata: {\n        cardNumber: '166',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play a space card, you pay 2 Mâ‚¬ less for it.', (eb) => {\n            eb.tag(Tag.SPACE).startEffect.megacredits(-2);\n          }).br;\n          b.production((pb) => {\n            pb.minus().energy(1).nbsp;\n            pb.plus().megacredits(2);\n          });\n        }),\n        description: {\n          text: 'Requires 5% oxygen. Decrease your energy production 1 step and increase your Mâ‚¬ production 2 steps.',\n          align: 'left',\n        },\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Small Animals",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 6,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 6,
    "count" : 6
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/SmallAnimals.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Resource} from '../../../common/Resource';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class SmallAnimals extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SMALL_ANIMALS,\n      tags: [Tag.ANIMAL],\n      cost: 6,\n\n      resourceType: CardResource.ANIMAL,\n      victoryPoints: {resourcesHere: {}, per: 2},\n      requirements: {oxygen: 6},\n\n      behavior: {\n        decreaseAnyProduction: {type: Resource.PLANTS, count: 1},\n      },\n\n      action: {\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: '054',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 animal to this card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.ANIMAL);\n          }).br;\n          b.production((pb) => pb.minus().plants(1, {all})).br;\n          b.vpText('1 VP per 2 animals on this card.');\n        }),\n        description: {\n          text: 'Requires 6% oxygen. Decrease any plant production 1 step.',\n          align: 'left',\n        },\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Soil Factory",
  "tags" : [ "plant", "building" ],
  "victoryPoints" : 1,
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/SoilFactory.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SoilFactory extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SOIL_FACTORY,\n      tags: [Tag.PLANT, Tag.BUILDING],\n      cost: 7,\n\n      behavior: {\n        production: {energy: -1, plants: 1},\n      },\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: '179',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().plants(1);\n          });\n        }),\n        description: 'Decrease your energy production 1 step and increase your plant production 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Solar Power",
  "tags" : [ "power", "building" ],
  "victoryPoints" : 1,
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/SolarPower.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SolarPower extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SOLAR_POWER,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 8,\n\n      behavior: {\n        production: {energy: 1},\n      },\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: '113',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1));\n        }),\n        description: 'Increase your energy production 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Solar Wind Power",
  "tags" : [ "science", "space", "power" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/SolarWindPower.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SolarWindPower extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SOLAR_WIND_POWER,\n      tags: [Tag.SCIENCE, Tag.SPACE, Tag.POWER],\n      cost: 11,\n\n      behavior: {\n        production: {energy: 1},\n        stock: {titanium: 2},\n      },\n\n      metadata: {\n        cardNumber: '077',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1)).br.titanium(2);\n        }),\n        description: 'Increase your energy production 1 step and gain 2 titanium.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Soletta",
  "tags" : [ "space" ],
  "cost" : 29,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Soletta.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Soletta extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SOLETTA,\n      tags: [Tag.SPACE],\n      cost: 29,\n\n      behavior: {\n        production: {heat: 7},\n      },\n\n      metadata: {\n        cardNumber: '203',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.heat(7));\n        }),\n        description: 'Increase your heat production 7 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Space Mirrors",
  "tags" : [ "power", "space" ],
  "cost" : 1,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/SpaceMirrors.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SpaceMirrors extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SPACE_MIRRORS,\n      tags: [Tag.POWER, Tag.SPACE],\n      cost: 1,\n\n      action: {\n        spend: {megacredits: 7},\n        production: {energy: 1},\n      },\n\n      metadata: {\n        cardNumber: '076',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 7 Mâ‚¬ to increase your energy production 1 step.', (eb) => {\n            eb.megacredits(7).startAction.production((pb) => pb.energy(1));\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Special Design",
  "tags" : [ "science" ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/SpecialDesign.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SpecialDesign extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.SPECIAL_DESIGN,\n      tags: [Tag.SCIENCE],\n      cost: 1,\n      globalParameterRequirementBonus: {steps: 2, nextCardOnly: true},\n\n      metadata: {\n        cardNumber: '206',\n        renderData: CardRenderer.builder((b) => {\n          b.plate('Global requirements').colon().text('+/- 2');\n        }),\n        description: 'The next card you play this generation is +2 or -2 steps in global requirements, your choice.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Steelworks",
  "tags" : [ "building" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 15,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Steelworks.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class Steelworks extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.STEELWORKS,\n      tags: [Tag.BUILDING],\n      cost: 15,\n      victoryPoints: {tag: Tag.POWER, per: 3},\n\n\n      action: {\n        spend: {energy: 4},\n        stock: {steel: 2},\n        global: {oxygen: 1},\n      },\n\n      metadata: {\n        cardNumber: '103',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 4 energy to gain 2 steel and increase oxygen 1 step.', (eb) => {\n            eb.energy(4, {digit}).startAction.steel(2).oxygen(1);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Strip Mine",
  "tags" : [ "building" ],
  "cost" : 25,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/StripMine.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class StripMine extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.STRIP_MINE,\n      tags: [Tag.BUILDING],\n      cost: 25,\n\n      behavior: {\n        production: {energy: -2, steel: 2, titanium: 1},\n        global: {oxygen: 2},\n      },\n\n      metadata: {\n        cardNumber: '138',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(2).br;\n            pb.plus().steel(2).titanium(1);\n          }).br;\n          b.oxygen(2);\n        }),\n        description: 'Decrease your energy production 2 steps. Increase your steel production 2 steps and your titanium production 1 step. Raise oxygen 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Subterranean Reservoir",
  "tags" : [ ],
  "cost" : 11,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/SubterraneanReservoir.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SubterraneanReservoir extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.SUBTERRANEAN_RESERVOIR,\n      cost: 11,\n\n      behavior: {\n        ocean: {},\n      },\n\n      metadata: {\n        cardNumber: '127',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(1);\n        }),\n        description: 'Place 1 ocean tile.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Symbiotic Fungus",
  "tags" : [ "microbe" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ {
    "temperature" : -18,
    "count" : -18
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/SymbioticFungus.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SymbioticFungus extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SYMBIOTIC_FUNGUS,\n      tags: [Tag.MICROBE],\n      cost: 4,\n\n      action: {\n        addResourcesToAnyCard: {type: CardResource.MICROBE, count: 1, autoSelect: true},\n        // return new SelectCard('Select card to add microbe', 'Add microbe', availableCards, ([card]) => {\n      },\n\n      requirements: {temperature: -18},\n      metadata: {\n        cardNumber: '133',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add a microbe to ANOTHER card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.MICROBE).asterix();\n          });\n        }),\n        description: 'Requires -18 CÂ° or warmer.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Tectonic Stress Power",
  "tags" : [ "power", "building" ],
  "victoryPoints" : 2,
  "cost" : 18,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/TectonicStressPower.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class TectonicStressPower extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.TECTONIC_STRESS_POWER,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 18,\n\n      behavior: {\n        production: {energy: 3},\n      },\n      victoryPoints: 2,\n\n      requirements: {tag: Tag.SCIENCE, count: 2},\n      metadata: {\n        cardNumber: '145',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(3));\n        }),\n        description: 'Requires 2 science tags. Increase your energy production 3 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Towing A Comet",
  "tags" : [ "space" ],
  "cost" : 23,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/TowingAComet.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class TowingAComet extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.TOWING_A_COMET,\n      tags: [Tag.SPACE],\n      cost: 23,\n\n      behavior: {\n        stock: {plants: 3},\n        global: {oxygen: 1},\n        ocean: {},\n      },\n\n      metadata: {\n        cardNumber: '075',\n        renderData: CardRenderer.builder((b) => {\n          b.oxygen(1).oceans(1).br;\n          b.plants(3);\n        }),\n        description: 'Gain 3 plants. Raise oxygen level 1 step and place an ocean tile.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Trees",
  "tags" : [ "plant" ],
  "victoryPoints" : 1,
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -4,
    "count" : -4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Trees.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Trees extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.TREES,\n      tags: [Tag.PLANT],\n      cost: 13,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {plants: 3},\n        stock: {plants: 1},\n      },\n\n      requirements: {temperature: -4},\n      metadata: {\n        cardNumber: '060',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(3)).plants(1);\n        }),\n        description: 'Requires -4 C or warmer. Increase your plant production 3 steps. Gain 1 plant.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Tundra Farming",
  "tags" : [ "plant" ],
  "victoryPoints" : 2,
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -6,
    "count" : -6
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/TundraFarming.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class TundraFarming extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.TUNDRA_FARMING,\n      tags: [Tag.PLANT],\n      cost: 16,\n      victoryPoints: 2,\n\n      behavior: {\n        production: {megacredits: 1, plants: 2},\n        stock: {plants: 1},\n      },\n\n      requirements: {temperature: -6},\n      metadata: {\n        cardNumber: '169',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) =>{\n            pb.plants(2).megacredits(1);\n          }).plants(1);\n        }),\n        description: 'Requires -6Â° C or warmer. Increase your plant production 2 steps and your Mâ‚¬ production 1 step. Gain 1 plant.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Underground City",
  "tags" : [ "city", "building" ],
  "cost" : 14,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/UndergroundCity.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class UndergroundCity extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.UNDERGROUND_CITY,\n      tags: [Tag.CITY, Tag.BUILDING],\n      cost: 14,\n\n      behavior: {\n        production: {energy: -2, steel: 2},\n        city: {},\n      },\n\n      metadata: {\n        cardNumber: '032',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(2).br;\n            pb.plus().steel(2);\n          }).nbsp.city();\n        }),\n        description: 'Place a city tile. Decrease your energy production 2 steps and increase your steel production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Underground Detonations",
  "tags" : [ "building" ],
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/UndergroundDetonations.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class UndergroundDetonations extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.UNDERGROUND_DETONATIONS,\n      tags: [Tag.BUILDING],\n      cost: 10,\n\n      action: {\n        spend: {megacredits: 5},\n        production: {heat: 3},\n      },\n\n      metadata: {\n        cardNumber: '202',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 5Mâ‚¬ to increase your heat production 3 steps.', (eb) => {\n            eb.megacredits(5).startAction.production((pb)=>pb.heat(3));\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Urbanized Area",
  "tags" : [ "city", "building" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/UrbanizedArea.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CanAffordOptions, IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {PlaceCityTile} from '../../deferredActions/PlaceCityTile';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Board} from '../../boards/Board';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class UrbanizedArea extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.URBANIZED_AREA,\n      tags: [Tag.CITY, Tag.BUILDING],\n      cost: 10,\n\n      behavior: {\n        production: {energy: -1, megacredits: 2},\n      },\n\n      metadata: {\n        cardNumber: '120',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().megacredits(2);\n          }).city().asterix();\n        }),\n        description: 'Decrease your energy production 1 step and increase your Mâ‚¬ production 2 steps. Place a city tile ADJACENT TO AT LEAST 2 OTHER CITY TILES.',\n      },\n    });\n  }\n  private getAvailableSpaces(player: IPlayer, canAffordOptions?: CanAffordOptions): Array<Space> {\n    return player.game.board.getAvailableSpacesOnLand(player, canAffordOptions)\n      .filter((space) => player.game.board.getAdjacentSpaces(space).filter((adjacentSpace) => Board.isCitySpace(adjacentSpace)).length >= 2);\n  }\n  public override bespokeCanPlay(player: IPlayer, canAffordOptions: CanAffordOptions): boolean {\n    return this.getAvailableSpaces(player, canAffordOptions).length > 0;\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlaceCityTile(player, {\n      title: 'Select space next to at least 2 other city tiles',\n      spaces: this.getAvailableSpaces(player),\n    }));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Water Import From Europa",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : {
    "tag" : "jovian",
    "per" : 2
  },
  "cost" : 16,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/WaterImportFromEuropa.ts",
  "sourceCode" : "import {IActionCard} from '../ICard';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {PlaceOceanTile} from '../../deferredActions/PlaceOceanTile';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {TITLES} from '../../inputs/titles';\n\nconst ACTION_COST = 9;\nexport class WaterImportFromEuropa extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.WATER_IMPORT_FROM_EUROPA,\n      tags: [Tag.JOVIAN, Tag.SPACE],\n      cost: 16,\n\n      victoryPoints: {tag: Tag.JOVIAN, per: 2},\n\n      metadata: {\n        cardNumber: '012',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Pay 9 Mâ‚¬ to place an ocean tile. TITANIUM MAY BE USED as if playing a space card.', (eb) => {\n            eb.megacredits(9).super((b) => b.titanium(1)).startAction.oceans(1);\n          }).br;\n          b.vpText('1 VP for each 2 Jovian tags you have.');\n        }),\n      },\n    });\n  }\n  public canAct(player: IPlayer): boolean {\n    return player.canAfford({cost: ACTION_COST, titanium: true, tr: {oceans: 1}});\n  }\n  public action(player: IPlayer) {\n    player.game.defer(new SelectPaymentDeferred(player, ACTION_COST, {canUseTitanium: true, title: TITLES.action}))\n      .andThen(() => player.game.defer(new PlaceOceanTile(player)));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Water Splitting Plant",
  "tags" : [ "building" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 12,
  "type" : "active",
  "requirements" : [ {
    "oceans" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/WaterSplittingPlant.ts",
  "sourceCode" : "import {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\n\nexport class WaterSplittingPlant extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.WATER_SPLITTING_PLANT,\n      tags: [Tag.BUILDING],\n      cost: 12,\n      victoryPoints: {tag: Tag.POWER, per: 3},\n\n\n      action: {\n        spend: {energy: 3},\n        global: {oxygen: 1},\n      },\n\n      requirements: {oceans: 2},\n      metadata: {\n        cardNumber: '177',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 3 energy to raise oxygen 1 step.', (eb) => {\n            eb.energy(3).startAction.oxygen(1);\n          });\n        }),\n        description: 'Requires 2 ocean tiles.',\n      },\n    });\n  }\n\n  public override bespokeCanAct(player: IPlayer) {\n    // This tests for Reds costs that would ideally be dealt with somewhere\n    // between ActionCard and the Executor.\n    return player.canAfford({cost: 0, tr: {oxygen: 1}});\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Wave Power",
  "tags" : [ "power" ],
  "victoryPoints" : 1,
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/WavePower.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class WavePower extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.WAVE_POWER,\n      tags: [Tag.POWER],\n      cost: 7,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {energy: 1},\n      },\n\n      requirements: {oceans: 3},\n      metadata: {\n        cardNumber: '139',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1));\n        }),\n        description: 'Requires 3 ocean tiles. Increase your energy production 1 step.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Windmills",
  "tags" : [ "power", "building" ],
  "victoryPoints" : 1,
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 7,
    "count" : 7
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Windmills.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Windmills extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.WINDMILLS,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 6,\n\n      behavior: {\n        production: {energy: 1},\n      },\n      victoryPoints: 1,\n\n      requirements: {oxygen: 7},\n      metadata: {\n        cardNumber: '168',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1));\n        }),\n        description: 'Requires 7% oxygen. Increase your energy production 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Worms",
  "tags" : [ "microbe" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Worms.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Worms extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.WORMS,\n      tags: [Tag.MICROBE],\n      cost: 6,\n\n      behavior: {\n        production: {plants: {tag: Tag.MICROBE, per: 2}},\n      },\n\n      requirements: {oxygen: 2},\n      metadata: {\n        cardNumber: '130',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1).slash().tag(Tag.MICROBE, 2));\n        }),\n        description: '2% Oxygen. 1 Plantprod/2microbe tags, including this.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "base",
  "name" : "Zeppelins",
  "tags" : [ ],
  "victoryPoints" : 1,
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 5,
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Zeppelins.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\nexport class Zeppelins extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ZEPPELINS,\n      cost: 11,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {megacredits: {cities: {where: 'onmars'}}},\n      },\n\n      requirements: {oxygen: 5},\n      metadata: {\n        cardNumber: '129',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.megacredits(1).slash();\n            pb.city({size: Size.SMALL, all}).asterix();\n          });\n        }),\n        description: 'Requires 5% oxygen. Increase your Mâ‚¬ production 1 step for each city tile ON MARS.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "base",
  "name" : "Beginner Corporation",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 42,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/BeginnerCorporation.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "CrediCor",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 45,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/CrediCor.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "EcoLine",
  "tags" : [ "plant" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 36,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/EcoLine.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Helion",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 42,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Helion.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Interplanetary Cinematics",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 30,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/InterplanetaryCinematics.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Inventrix",
  "tags" : [ "science" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 50,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Inventrix.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Mining Guild",
  "tags" : [ "building", "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 30,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/MiningGuild.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "PhoboLog",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 28,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/PhoboLog.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Tharsis Republic",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 45,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/TharsisRepublic.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Thorgate",
  "tags" : [ "power" ],
  "cardDiscount" : {
    "tag" : "power",
    "amount" : 3
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 47,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Thorgate.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "United Nations Mars Initiative",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 50,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/UnitedNationsMarsInitiative.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Convert Plants",
  "tags" : [ ],
  "cost" : 0,
  "type" : "standard_action",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ConvertPlants.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Convert Heat",
  "tags" : [ ],
  "cost" : 0,
  "type" : "standard_action",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/ConvertHeat.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Aquifer",
  "tags" : [ ],
  "cost" : 18,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Aquifer.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "City",
  "tags" : [ ],
  "cost" : 25,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/City.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Power Plant:SP",
  "tags" : [ ],
  "cost" : 11,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/PowerPlant:SP.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Greenery",
  "tags" : [ ],
  "cost" : 23,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Greenery.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Asteroid:SP",
  "tags" : [ ],
  "cost" : 14,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/Asteroid:SP.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Sell Patents",
  "tags" : [ ],
  "cost" : 0,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/SellPatents.ts",
  "sourceCode" : ""
}, {
  "module" : "base",
  "name" : "Buffer Gas",
  "tags" : [ ],
  "cost" : 16,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/base/BufferGas.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Acquired Company",
  "tags" : [ "earth" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/AcquiredCompany.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Advanced Alloys",
  "tags" : [ "science" ],
  "victoryPoints" : 1,
  "cost" : 15,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/AdvancedAlloys.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "AI Central",
  "tags" : [ "science", "building" ],
  "victoryPoints" : 1,
  "cost" : 15,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/AICentral.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Anti-Gravity Technology",
  "tags" : [ "science" ],
  "cardDiscount" : {
    "amount" : 2
  },
  "victoryPoints" : 3,
  "cost" : 14,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 7
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Anti-GravityTechnology.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Asteroid Mining Consortium",
  "tags" : [ "jovian" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "production" : "titanium",
    "count" : 1,
    "tag" : "jovian"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/AsteroidMiningConsortium.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Bribed Committee",
  "tags" : [ "earth" ],
  "victoryPoints" : -3,
  "cost" : 9,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/BribedCommittee.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Building Industries",
  "tags" : [ "building" ],
  "victoryPoints" : 1,
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/BuildingIndustries.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Business Contacts",
  "tags" : [ "earth" ],
  "cost" : 7,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/BusinessContacts.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Business Network",
  "tags" : [ "earth" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/BusinessNetwork.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Callisto Penal Mines",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : {
    "tag" : "jovian",
    "per" : 2
  },
  "cost" : 24,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/CallistoPenalMines.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Caretaker Contract",
  "tags" : [ ],
  "cost" : 2,
  "type" : "active",
  "requirements" : [ {
    "temperature" : -20,
    "count" : -20
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/CaretakerContract.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Cartel",
  "tags" : [ "earth" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Cartel.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "CEO's Favorite Project",
  "tags" : [ ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/CEO'sFavoriteProject.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Commercial District",
  "tags" : [ "building" ],
  "victoryPoints" : "special",
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/CommercialDistrict.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Corporate Stronghold",
  "tags" : [ "city", "building" ],
  "victoryPoints" : -3,
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/CorporateStronghold.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Development Center",
  "tags" : [ "science", "building" ],
  "cost" : 11,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/DevelopmentCenter.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Earth Catapult",
  "tags" : [ "earth" ],
  "cardDiscount" : {
    "amount" : 2
  },
  "victoryPoints" : 2,
  "cost" : 26,
  "type" : "active",
  "requirements" : [ {
    "tag" : "city"
  }, {
    "tag" : "earth"
  }, {
    "tag" : "earth"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/EarthCatapult.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Earth Office",
  "tags" : [ "earth" ],
  "cardDiscount" : {
    "tag" : "earth",
    "amount" : 3
  },
  "cost" : 1,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/EarthOffice.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Electro Catapult",
  "tags" : [ "building" ],
  "cost" : 11,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 8,
    "max" : true,
    "count" : 8
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/ElectroCatapult.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Energy Tapping",
  "tags" : [ "power" ],
  "victoryPoints" : -1,
  "cost" : 2,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/EnergyTapping.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Fuel Factory",
  "tags" : [ "building" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/FuelFactory.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Gene Repair",
  "tags" : [ "science" ],
  "victoryPoints" : 2,
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/GeneRepair.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Great Escarpment Consortium",
  "tags" : [ "building" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "production" : "steel",
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/GreatEscarpmentConsortium.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Hackers",
  "tags" : [ ],
  "victoryPoints" : -1,
  "cost" : 1,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Hackers.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Hired Raiders",
  "tags" : [ ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/HiredRaiders.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Indentured Workers",
  "tags" : [ ],
  "victoryPoints" : -1,
  "cost" : 0,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/IndenturedWorkers.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Industrial Center",
  "tags" : [ "building" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/IndustrialCenter.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Interstellar Colony Ship",
  "tags" : [ "earth", "space" ],
  "victoryPoints" : 4,
  "cost" : 24,
  "type" : "event",
  "requirements" : [ {
    "tag" : "science",
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/InterstellarColonyShip.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Invention Contest",
  "tags" : [ "science" ],
  "cost" : 2,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/InventionContest.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Inventors' Guild",
  "tags" : [ "science" ],
  "cost" : 9,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Inventors'Guild.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Investment Loan",
  "tags" : [ "earth" ],
  "cost" : 3,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/InvestmentLoan.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Io Mining Industries",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : {
    "tag" : "jovian"
  },
  "cost" : 41,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/IoMiningIndustries.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Lagrange Observatory",
  "tags" : [ "science", "space" ],
  "victoryPoints" : 1,
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/LagrangeObservatory.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Land Claim",
  "tags" : [ ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/LandClaim.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Lightning Harvest",
  "tags" : [ "power", "science" ],
  "victoryPoints" : 1,
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/LightningHarvest.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Mars University",
  "tags" : [ "science", "building" ],
  "victoryPoints" : 3,
  "cost" : 23,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/MarsUniversity.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Mass Converter",
  "tags" : [ "science", "power" ],
  "cardDiscount" : {
    "tag" : "space",
    "amount" : 2,
    "per" : "card"
  },
  "cost" : 8,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/MassConverter.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Media Archives",
  "tags" : [ "earth" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/MediaArchives.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Media Group",
  "tags" : [ "earth" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/MediaGroup.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Medical Lab",
  "tags" : [ "science", "building" ],
  "victoryPoints" : 1,
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/MedicalLab.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Mine",
  "tags" : [ "building" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Mine.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Mineral Deposit",
  "tags" : [ ],
  "cost" : 5,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/MineralDeposit.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Mining Area",
  "tags" : [ "building" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/MiningArea.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Miranda Resort",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : 1,
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/MirandaResort.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Olympus Conference",
  "tags" : [ "science", "earth", "building" ],
  "victoryPoints" : 3,
  "cost" : 20,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Science",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/OlympusConference.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Physics Complex",
  "tags" : [ "science", "building" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "each" : 2
  },
  "cost" : 8,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Science",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/PhysicsComplex.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Power Infrastructure",
  "tags" : [ "power", "building" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/PowerInfrastructure.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Power Supply Consortium",
  "tags" : [ "power" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "power",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/PowerSupplyConsortium.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Protected Habitats",
  "tags" : [ ],
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/ProtectedHabitats.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Quantum Extractor",
  "tags" : [ "science", "power" ],
  "cardDiscount" : {
    "tag" : "space",
    "amount" : 2
  },
  "cost" : 13,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/QuantumExtractor.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Rad-Suits",
  "tags" : [ ],
  "victoryPoints" : 1,
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ {
    "cities" : 2,
    "all" : true,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Rad-Suits.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Research",
  "tags" : [ "science", "science" ],
  "victoryPoints" : 1,
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Research.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Restricted Area",
  "tags" : [ "science" ],
  "cost" : 11,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/RestrictedArea.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Robotic Workforce",
  "tags" : [ "science" ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/RoboticWorkforce.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Sabotage",
  "tags" : [ ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Sabotage.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Satellites",
  "tags" : [ "space" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Satellites.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Security Fleet",
  "tags" : [ "space" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Fighter",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/SecurityFleet.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Space Elevator",
  "tags" : [ "space", "building" ],
  "victoryPoints" : 2,
  "cost" : 27,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/SpaceElevator.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Space Station",
  "tags" : [ "space" ],
  "cardDiscount" : {
    "tag" : "space",
    "amount" : 2
  },
  "victoryPoints" : 1,
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/SpaceStation.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Sponsors",
  "tags" : [ "earth" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Sponsors.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Standard Technology",
  "tags" : [ "science" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/StandardTechnology.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Tardigrades",
  "tags" : [ "microbe" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 4
  },
  "cost" : 2,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Tardigrades.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Technology Demonstration",
  "tags" : [ "science", "space" ],
  "cost" : 5,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/TechnologyDemonstration.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Terraforming Ganymede",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : 2,
  "cost" : 33,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/TerraformingGanymede.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Titanium Mine",
  "tags" : [ "building" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/TitaniumMine.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Toll Station",
  "tags" : [ "space" ],
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/TollStation.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Trans-Neptune Probe",
  "tags" : [ "science", "space" ],
  "victoryPoints" : 1,
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Trans-NeptuneProbe.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Tropical Resort",
  "tags" : [ "building" ],
  "victoryPoints" : 2,
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/TropicalResort.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Vesta Shipyard",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : 1,
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/VestaShipyard.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Viral Enhancers",
  "tags" : [ "science", "microbe" ],
  "cost" : 11,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/ViralEnhancers.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Virus",
  "tags" : [ "microbe" ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Virus.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Saturn Systems",
  "tags" : [ "jovian" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 40,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/SaturnSystems.ts",
  "sourceCode" : ""
}, {
  "module" : "corpera",
  "name" : "Teractor",
  "tags" : [ "earth" ],
  "cardDiscount" : {
    "tag" : "earth",
    "amount" : 3
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 48,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/corpera/Teractor.ts",
  "sourceCode" : ""
}, {
  "module" : "promo",
  "name" : "Penguins",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 6,
  "type" : "active",
  "requirements" : [ {
    "oceans" : 8,
    "count" : 8
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Penguins.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {ActionCard} from '../ActionCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Penguins extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.PENGUINS,\n      tags: [Tag.ANIMAL],\n      cost: 6,\n      resourceType: CardResource.ANIMAL,\n      victoryPoints: {resourcesHere: {}},\n\n      action: {\n        addResources: 1,\n      },\n\n      requirements: {oceans: 8},\n      metadata: {\n        cardNumber: '212',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 animal to this card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.ANIMAL);\n          }).br;\n          b.vpText('1 VP for each animal on this card.');\n        }),\n        description: 'Requires 8 oceans.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Self-replicating Robots",
  "tags" : [ ],
  "cost" : 7,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Self-replicatingRobots.ts",
  "sourceCode" : ""
}, {
  "module" : "promo",
  "name" : "Small Asteroid",
  "tags" : [ "space" ],
  "cost" : 10,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/SmallAsteroid.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class SmallAsteroid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.SMALL_ASTEROID,\n      tags: [Tag.SPACE],\n      cost: 10,\n\n      behavior: {\n        global: {temperature: 1},\n        removeAnyPlants: 2,\n      },\n\n      metadata: {\n        cardNumber: '209',\n        renderData: CardRenderer.builder((b) => {\n          b.temperature(1).br;\n          b.minus().plants(2, {all});\n        }),\n        description: 'Increase temperature 1 step. Remove up to 2 plants from any player.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Snow Algae",
  "tags" : [ "plant" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/SnowAlgae.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class SnowAlgae extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SNOW_ALGAE,\n      cost: 11,\n      tags: [Tag.PLANT],\n\n      behavior: {\n        production: {plants: 1, heat: 1},\n      },\n\n      requirements: {oceans: 2},\n      metadata: {\n        cardNumber: '211',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.plants(1).heat(1);\n          });\n        }),\n        description: 'Requires 2 oceans. Increase your plant production and your heat production 1 step each.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Dusk Laser Mining",
  "tags" : [ "space" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/DuskLaserMining.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {digit} from '../Options';\n\nexport class DuskLaserMining extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.DUSK_LASER_MINING,\n      cost: 8,\n      tags: [Tag.SPACE],\n\n      behavior: {\n        production: {energy: -1, titanium: 1},\n        stock: {titanium: 4},\n      },\n\n      requirements: {tag: Tag.SCIENCE, count: 2},\n      metadata: {\n        cardNumber: 'X01',\n        description: 'Requires 2 science tags. Decrease your energy production 1 step, and increase your titanium production 1 step. Gain 4 titanium.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().titanium(1);\n          }).nbsp.titanium(4, {digit});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Mercurian Alloys",
  "tags" : [ "space" ],
  "cost" : 3,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/MercurianAlloys.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class MercurianAlloys extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MERCURIAN_ALLOYS,\n      tags: [Tag.SPACE],\n      cost: 3,\n\n      behavior: {\n        titanumValue: 1,\n      },\n\n      requirements: {tag: Tag.SCIENCE, count: 2},\n      metadata: {\n        cardNumber: 'X07',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Your titanium resources are worth 1 Mâ‚¬ extra.', (eb) => {\n            eb.titanium(1).startEffect.plus(Size.SMALL).megacredits(1);\n          });\n        }),\n        description: 'Requires 2 science tags.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Rego Plastics",
  "tags" : [ "building" ],
  "victoryPoints" : 1,
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/RegoPlastics.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class RegoPlastics extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.REGO_PLASTICS,\n      tags: [Tag.BUILDING],\n      cost: 10,\n      victoryPoints: 1,\n\n      behavior: {\n        steelValue: 1,\n      },\n\n      metadata: {\n        cardNumber: 'X10',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Your steel resources are worth 1 Mâ‚¬ extra.', (eb) => {\n            eb.steel(1).startEffect.plus(Size.SMALL).megacredits(1);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Interplanetary Trade",
  "tags" : [ "space", "jovian" ],
  "victoryPoints" : 1,
  "cost" : 29,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/InterplanetaryTrade.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../../cards/render/CardRenderer';\n\nexport class InterplanetaryTrade extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.INTERPLANETARY_TRADE,\n      tags: [Tag.SPACE, Tag.JOVIAN],\n      cost: 29,\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'X05',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1));\n          b.slash().diverseTag();\n        }),\n        description: 'Increase your Mâ‚¬ production 1 step per different tag you have in play, including this.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const distinctTagCount = player.tags.distinctCount('default', Tag.SPACE);\n    player.production.add(Resource.MEGACREDITS, distinctTagCount, {log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Orbital Cleanup",
  "tags" : [ "earth", "space" ],
  "victoryPoints" : 2,
  "cost" : 14,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/OrbitalCleanup.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {ActionCard} from '../ActionCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class OrbitalCleanup extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ORBITAL_CLEANUP,\n      tags: [Tag.EARTH, Tag.SPACE],\n      cost: 14,\n      victoryPoints: 2,\n\n      behavior: {\n        production: {megacredits: -2},\n      },\n\n      action: {\n        stock: {megacredits: {tag: Tag.SCIENCE}},\n      },\n\n      metadata: {\n        cardNumber: 'X08',\n\n        renderData: CardRenderer.builder((b) => {\n          b.action('Gain 1 Mâ‚¬ per science tag you have.', (eb) => {\n            eb.empty().startAction.megacredits(1).slash().tag(Tag.SCIENCE);\n          }).br;\n          b.production((pb) => {\n            pb.megacredits(-2);\n          });\n        }),\n        description: 'Decrease your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Project Inspection",
  "tags" : [ ],
  "cost" : 0,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/ProjectInspection.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {IActionCard, ICard, isIActionCard, isIHasCheckLoops} from '../ICard';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class ProjectInspection extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.PROJECT_INSPECTION,\n      cost: 0,\n\n      metadata: {\n        cardNumber: 'X02',\n        renderData: CardRenderer.builder((b) => {\n          b.text('Use a card action that has been used this generation.', Size.SMALL, true);\n        }),\n      },\n    });\n  }\n\n  // This matches Viron.getActionCards.\n  private getActionCards(player: IPlayer): Array<IActionCard & ICard> {\n    const result = [];\n\n    for (const playedCard of player.tableau) {\n      if (playedCard === this) {\n        continue;\n      }\n      if (!isIActionCard(playedCard)) {\n        continue;\n      }\n      if (isIHasCheckLoops(playedCard) && playedCard.getCheckLoops() >= 2) {\n        continue;\n      }\n      if (player.getActionsThisGeneration().has(playedCard.name) && playedCard.canAct(player)) {\n        result.push(playedCard);\n      }\n    }\n    return result;\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return this.getActionCards(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const actionCards = this.getActionCards(player);\n    if (actionCards.length === 0 ) {\n      return undefined;\n    }\n    return new SelectCard<IActionCard & ICard>(\n      'Perform an action from a played card again',\n      'Take action',\n      actionCards)\n      .andThen(([card]) => {\n        const foundCard = card;\n        player.game.log('${0} used ${1} action with ${2}', (b) => b.player(player).card(foundCard).card(this));\n        return foundCard.action(player);\n      });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Hi-Tech Lab",
  "tags" : [ "science", "building" ],
  "victoryPoints" : 1,
  "cost" : 17,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Hi-TechLab.ts",
  "sourceCode" : ""
}, {
  "module" : "promo",
  "name" : "Energy Market",
  "tags" : [ "power" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/EnergyMarket.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectAmount} from '../../inputs/SelectAmount';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class EnergyMarket extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ENERGY_MARKET,\n      tags: [Tag.POWER],\n      cost: 5,\n      victoryPoints: {tag: Tag.POWER, per: 3},\n\n      metadata: {\n        cardNumber: 'X03',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 2X Mâ‚¬ to gain X energy.', (eb) => {\n            eb.megacredits(1, {text: '2x'}).startAction.text('x').energy(1);\n          }).br;\n          b.or().br;\n          b.action('Decrease energy production 1 step to gain 8 Mâ‚¬.', (eb) => {\n            eb.production((pb) => pb.energy(1)).startAction.megacredits(8);\n          });\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.canAfford(2) || player.production.energy >= 1;\n  }\n\n  private getEnergyOption(player: IPlayer, availableMC: number): SelectAmount {\n    return new SelectAmount(\n      'Select amount of energy to gain', 'Gain energy', 1, Math.floor(availableMC / 2))\n      .andThen((amount) => {\n        player.game.defer(new SelectPaymentDeferred(player, amount * 2))\n          .andThen(() => player.stock.add(Resource.ENERGY, amount, {log: true}));\n        return undefined;\n      });\n  }\n\n  private getMegacreditsOption(player: IPlayer) {\n    player.production.add(Resource.ENERGY, -1);\n    player.stock.add(Resource.MEGACREDITS, 8);\n    player.game.log('${0} decreased energy production 1 step to gain 8 Mâ‚¬', (b) => b.player(player));\n    return undefined;\n  }\n\n  public action(player: IPlayer) {\n    const availableMC = player.spendableMegacredits();\n    if (availableMC >= 2 && player.production.energy >= 1) {\n      return new OrOptions(\n        new SelectOption('Spend 2X Mâ‚¬ to gain X energy', 'Spend Mâ‚¬').andThen(() => {\n          return this.getEnergyOption(player, availableMC);\n        }),\n        new SelectOption('Decrease energy production 1 step to gain 8 Mâ‚¬', 'Decrease energy').andThen(() => {\n          return this.getMegacreditsOption(player);\n        }),\n      );\n    } else if (availableMC >= 2) {\n      return this.getEnergyOption(player, availableMC);\n    } else if (player.production.energy >= 1) {\n      return this.getMegacreditsOption(player);\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Law Suit",
  "tags" : [ "earth" ],
  "victoryPoints" : "special",
  "cost" : 2,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/LawSuit.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {SelectPlayer} from '../../inputs/SelectPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {CardRenderDynamicVictoryPoints} from '../render/CardRenderDynamicVictoryPoints';\nimport {all} from '../Options';\n\nexport class LawSuit extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.LAW_SUIT,\n      tags: [Tag.EARTH],\n      cost: 2,\n      victoryPoints: 'special',\n\n      metadata: {\n        cardNumber: 'X06',\n        renderData: CardRenderer.builder((b) => {\n          b.text('steal', Size.SMALL, true).megacredits(3, {all}).asterix();\n        }),\n        description: 'Steal 3 Mâ‚¬ from a player that REMOVED YOUR RESOURCES OR DECREASED YOUR PRODUCTION this generation. Place this card face down in THAT PLAYER\\'S EVENT PILE.',\n        victoryPoints: CardRenderDynamicVictoryPoints.any(-1),\n      },\n    });\n  }\n\n  private targets(player: IPlayer) {\n    return player.game.getPlayersById(player.removingPlayers);\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.targets(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    return new SelectPlayer(this.targets(player), 'Select player to sue (steal 3 Mâ‚¬ from)', 'Steal Mâ‚¬')\n      .andThen((suedPlayer: IPlayer) => {\n        const amount = Math.min(3, suedPlayer.megaCredits);\n        if (amount === 0) {\n          player.game.log('${0} sued ${1} who had 0 MC.', (b) => b.player(player).player(suedPlayer));\n        }\n        suedPlayer.playedCards.push(this);\n        suedPlayer.maybeBlockAttack(player, (proceed) => {\n          if (proceed) {\n            suedPlayer.stock.deduct(Resource.MEGACREDITS, amount, {log: true, from: player, stealing: true});\n          }\n          player.stock.add(Resource.MEGACREDITS, amount);\n          return undefined;\n        });\n        return undefined;\n      });\n  }\n  public override getVictoryPoints() {\n    return -1;\n  }\n\n  public static resourceHook(player: IPlayer, _resource: Resource, amount: number, from: IPlayer) {\n    if (from === player || amount >= 0) {\n      return;\n    }\n    if (player.removingPlayers.includes(from.id) === false) {\n      player.removingPlayers.push(from.id);\n    }\n  }\n}\n\n"
}, {
  "module" : "promo",
  "name" : "Stanford Torus",
  "tags" : [ "space", "city" ],
  "victoryPoints" : 2,
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/StanfordTorus.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {SpaceName} from '../../SpaceName';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class StanfordTorus extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.STANFORD_TORUS,\n      tags: [Tag.SPACE, Tag.CITY],\n      cost: 12,\n      victoryPoints: 2,\n\n      behavior: {\n        city: {space: SpaceName.STANFORD_TORUS},\n      },\n\n      metadata: {\n        cardNumber: 'X12',\n        renderData: CardRenderer.builder((b) => {\n          b.city().asterix();\n        }),\n        description: 'Place a city tile IN SPACE, outside and separate from the planet.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Asteroid Hollowing",
  "tags" : [ "space" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Asteroid",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/AsteroidHollowing.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {ActionCard} from '../ActionCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class AsteroidHollowing extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ASTEROID_HOLLOWING,\n      tags: [Tag.SPACE],\n      cost: 6,\n      resourceType: CardResource.ASTEROID,\n\n      action: {\n        spend: {titanium: 1},\n        production: {megacredits: 1},\n        addResources: 1,\n      },\n\n      victoryPoints: {resourcesHere: {}, per: 2},\n\n      metadata: {\n        cardNumber: 'X15',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 titanium to add 1 asteroid resource here and increase Mâ‚¬ production 1 step.', (eb) => {\n            eb.titanium(1).startAction.resource(CardResource.ASTEROID).production((pb) => pb.megacredits(1));\n          }).br;\n          b.vpText('1VP for each 2 asteroids on this card.');\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Asteroid Rights",
  "tags" : [ "earth", "space" ],
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Asteroid",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/AsteroidRights.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IActionCard} from '../ICard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {LogHelper} from '../../LogHelper';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class AsteroidRights extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ASTEROID_RIGHTS,\n      tags: [Tag.EARTH, Tag.SPACE],\n      cost: 10,\n      resourceType: CardResource.ASTEROID,\n\n      behavior: {\n        addResources: 2,\n      },\n\n      metadata: {\n        cardNumber: 'X34',\n        description: 'Add 2 asteroids to this card.',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 Mâ‚¬ to add 1 asteroid to ANY card.', (eb) => {\n            eb.megacredits(1).startAction.resource(CardResource.ASTEROID).asterix().nbsp.or();\n          }).br;\n          b.action('Spend 1 asteroid here to increase Mâ‚¬ production 1 step OR gain 2 titanium.', (eb) => {\n            eb.resource(CardResource.ASTEROID)\n              .startAction.production((pb) => pb.megacredits(1))\n              .or()\n              .titanium(2);\n          }).br;\n          b.resource(CardResource.ASTEROID, 2);\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.canAfford(1) || this.resourceCount > 0;\n  }\n\n  public action(player: IPlayer) {\n    const canAddAsteroid = player.canAfford(1);\n    const hasAsteroids = this.resourceCount > 0;\n    const asteroidCards = player.getResourceCards(CardResource.ASTEROID);\n\n    const gainTitaniumOption = new SelectOption('Remove 1 asteroid on this card to gain 2 titanium', 'Remove asteroid').andThen(() => {\n      this.resourceCount--;\n      player.titanium += 2;\n      LogHelper.logRemoveResource(player, this, 1, 'gain 2 titanium');\n      return undefined;\n    });\n\n    const increaseMcProdOption = new SelectOption('Remove 1 asteroid on this card to increase Mâ‚¬ production 1 step', 'Remove asteroid').andThen(() => {\n      this.resourceCount--;\n      player.production.add(Resource.MEGACREDITS, 1);\n      LogHelper.logRemoveResource(player, this, 1, 'increase Mâ‚¬ production 1 step');\n      return undefined;\n    });\n\n    const addAsteroidToSelf = new SelectOption('Add 1 asteroid to this card', 'Add asteroid').andThen(() => {\n      player.game.defer(new SelectPaymentDeferred(player, 1, {title: 'Select how to pay for asteroid'}));\n      player.addResourceTo(this, {log: true});\n\n      return undefined;\n    });\n\n    const addAsteroidOption = new SelectCard('Select card to add 1 asteroid', 'Add asteroid', asteroidCards)\n      .andThen(([card]) => {\n        player.game.defer(new SelectPaymentDeferred(player, 1, {title: 'Select how to pay for asteroid'}));\n        player.addResourceTo(card, {log: true});\n\n        return undefined;\n      });\n\n    // Spend asteroid\n    if (!canAddAsteroid) return new OrOptions(gainTitaniumOption, increaseMcProdOption);\n\n    // Add asteroid to any card\n    if (!hasAsteroids) {\n      if (asteroidCards.length === 1) return addAsteroidToSelf.cb(undefined);\n      return addAsteroidOption;\n    }\n\n    const opts = [];\n    opts.push(gainTitaniumOption);\n    opts.push(increaseMcProdOption);\n    asteroidCards.length === 1 ? opts.push(addAsteroidToSelf) : opts.push(addAsteroidOption);\n\n    return new OrOptions(...opts);\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Comet Aiming",
  "tags" : [ "space" ],
  "cost" : 12,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Asteroid",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/CometAiming.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IActionCard} from '../ICard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {LogHelper} from '../../LogHelper';\nimport {PlaceOceanTile} from '../../deferredActions/PlaceOceanTile';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Payment} from '../../../common/inputs/Payment';\n\nexport class CometAiming extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.COMET_AIMING,\n      tags: [Tag.SPACE],\n      cost: 12,\n      resourceType: CardResource.ASTEROID,\n\n      metadata: {\n        cardNumber: 'X16',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 titanium to add 1 asteroid resource to ANY CARD.', (eb) => {\n            eb.titanium(1).startAction.resource(CardResource.ASTEROID).asterix();\n          }).br;\n          b.or().br;\n          b.action('Remove 1 asteroid here to place an ocean.', (eb) => {\n            eb.resource(CardResource.ASTEROID).startAction.oceans(1);\n          });\n        }),\n      },\n    });\n  }\n\n  private canPlaceOcean(player: IPlayer) {\n    return player.game.canAddOcean() && player.canAfford({cost: 0, tr: {oceans: 1}});\n  }\n\n  public canAct(player: IPlayer): boolean {\n    if (player.titanium > 0) {\n      return true;\n    }\n    return this.resourceCount > 0 && this.canPlaceOcean(player);\n  }\n\n  public action(player: IPlayer) {\n    const asteroidCards = player.getResourceCards(CardResource.ASTEROID);\n\n    const addAsteroidToSelf = function() {\n      player.pay(Payment.of({titanium: 1}));\n      player.addResourceTo(asteroidCards[0], {log: true});\n      return undefined;\n    };\n\n    const addAsteroidToCard = new SelectCard(\n      'Select card to add 1 asteroid',\n      'Add asteroid',\n      asteroidCards)\n      .andThen(([card]) => {\n        player.pay(Payment.of({titanium: 1}));\n        player.addResourceTo(card, {log: true});\n        return undefined;\n      });\n\n    const spendAsteroidResource = () => {\n      this.resourceCount--;\n      LogHelper.logRemoveResource(player, this, 1, 'place an ocean');\n      player.game.defer(new PlaceOceanTile(player));\n      return undefined;\n    };\n\n    if (this.resourceCount === 0) {\n      if (asteroidCards.length === 1) return addAsteroidToSelf();\n      return addAsteroidToCard;\n    }\n\n    if (player.titanium === 0) return spendAsteroidResource();\n\n    const availableActions = [];\n\n    if (this.canPlaceOcean(player)) {\n      availableActions.push(new SelectOption('Remove an asteroid resource to place an ocean', 'Remove asteroid').andThen(spendAsteroidResource));\n    }\n\n    if (asteroidCards.length === 1) {\n      availableActions.push(new SelectOption('Spend 1 titanium to gain 1 asteroid resource', 'Spend titanium').andThen(addAsteroidToSelf));\n    } else {\n      availableActions.push(addAsteroidToCard);\n    }\n\n    if (availableActions.length === 1) {\n      const action = availableActions[0];\n\n      if (action instanceof SelectOption) return action.cb(undefined);\n      return availableActions[0]; // SelectCard\n    }\n\n    return new OrOptions(...availableActions);\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Cutting Edge Technology",
  "tags" : [ "science" ],
  "victoryPoints" : 1,
  "cost" : 12,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/CuttingEdgeTechnology.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class CuttingEdgeTechnology extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.CUTTING_EDGE_TECHNOLOGY,\n      tags: [Tag.SCIENCE],\n      cost: 12,\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'X18',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When playing a card with a requirement, you pay 2 Mâ‚¬ less for it.', (eb) => {\n            eb.cards(1, {secondaryTag: AltSecondaryTag.REQ}).startEffect.megacredits(-2);\n          });\n        }),\n      },\n    });\n  }\n\n  public override getCardDiscount(_player: IPlayer, card: IProjectCard) {\n    return card.requirements.length > 0 ? 2 : 0;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Crash Site Cleanup",
  "tags" : [ ],
  "victoryPoints" : 1,
  "cost" : 4,
  "type" : "event",
  "requirements" : [ {
    "plantsRemoved" : true
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/CrashSiteCleanup.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class CrashSiteCleanup extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.CRASH_SITE_CLEANUP,\n      cost: 4,\n      requirements: {plantsRemoved: true},\n      victoryPoints: 1,\n\n      metadata: {\n        description: 'Requires that a player removed ANOTHER PLAYER\\'s plants this generation. Gain 1 titanium or 2 steel.',\n        cardNumber: 'X17',\n        renderData: CardRenderer.builder((b) => {\n          b.titanium(1).nbsp.or().nbsp.steel(2);\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const gainTitanium = new SelectOption(\n      'Gain 1 titanium',\n      'Gain titanium')\n      .andThen(() => {\n        player.stock.add(Resource.TITANIUM, 1, {log: true});\n        return undefined;\n      });\n\n    const gain2Steel = new SelectOption(\n      'Gain 2 steel',\n      'Gain steel')\n      .andThen(() => {\n        player.stock.add(Resource.STEEL, 2, {log: true});\n        return undefined;\n      });\n\n    return new OrOptions(gainTitanium, gain2Steel);\n  }\n\n  public static resourceHook(player: IPlayer, resource: Resource, amount: number, from: IPlayer) {\n    if (from === player || amount >= 0) {\n      return;\n    }\n    if (resource === Resource.PLANTS && amount < 0) {\n      player.game.someoneHasRemovedOtherPlayersPlants = true;\n    }\n  }\n}\n\n"
}, {
  "module" : "promo",
  "name" : "Directed Impactors",
  "tags" : [ "space" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Asteroid",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/DirectedImpactors.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IActionCard, ICard} from '../ICard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {MAX_TEMPERATURE} from '../../../common/constants';\nimport {LogHelper} from '../../LogHelper';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {TITLES} from '../../inputs/titles';\n\nexport class DirectedImpactors extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.DIRECTED_IMPACTORS,\n      tags: [Tag.SPACE],\n      cost: 6,\n      resourceType: CardResource.ASTEROID,\n\n      metadata: {\n        cardNumber: 'X19',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 3 Mâ‚¬ to add 1 asteroid to ANY CARD (titanium may be used to pay for this).', (eb) => {\n            eb.megacredits(3).super((b) => b.titanium(1)).startAction.resource(CardResource.ASTEROID).asterix();\n          }).br;\n          b.or().br;\n          b.action('Remove 1 asteroid here to raise temperature 1 step.', (eb) => {\n            eb.resource(CardResource.ASTEROID).startAction.temperature(1);\n          });\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    const cardHasResources = this.resourceCount > 0;\n    const canPayForAsteroid = player.canAfford({cost: 3, titanium: true});\n\n    if (player.game.getTemperature() === MAX_TEMPERATURE && cardHasResources) return true;\n    if (canPayForAsteroid) return true;\n\n    return player.canAfford({cost: 0, tr: {temperature: 1}}) && cardHasResources;\n  }\n\n  public action(player: IPlayer) {\n    const asteroidCards = player.getResourceCards(CardResource.ASTEROID);\n    const opts = [];\n\n    const addResource = new SelectOption('Pay 3 Mâ‚¬ to add 1 asteroid to a card', 'Pay').andThen(() => this.addResource(player, asteroidCards));\n    const spendResource = new SelectOption('Remove 1 asteroid to raise temperature 1 step', 'Remove asteroid').andThen(() => this.spendResource(player));\n    const temperatureIsMaxed = player.game.getTemperature() === MAX_TEMPERATURE;\n\n    if (this.resourceCount > 0) {\n      if (!temperatureIsMaxed && player.canAfford({cost: 0, tr: {temperature: 1}})) {\n        opts.push(spendResource);\n      }\n    } else {\n      return this.addResource(player, asteroidCards);\n    }\n\n    if (player.canAfford({cost: 3, titanium: true})) {\n      opts.push(addResource);\n    } else {\n      return this.spendResource(player);\n    }\n\n    return new OrOptions(...opts);\n  }\n\n  private addResource(player: IPlayer, asteroidCards: ICard[]) {\n    player.game.defer(new SelectPaymentDeferred(player, 3, {canUseTitanium: true, title: TITLES.payForCardAction(this.name)}));\n\n    if (asteroidCards.length === 1) {\n      player.addResourceTo(this, {log: true});\n      return undefined;\n    }\n\n    return new SelectCard(\n      'Select card to add 1 asteroid',\n      'Add asteroid',\n      asteroidCards)\n      .andThen(([card]) => {\n        player.addResourceTo(card, {log: true});\n        return undefined;\n      });\n  }\n\n  private spendResource(player: IPlayer) {\n    this.resourceCount--;\n    LogHelper.logRemoveResource(player, this, 1, 'raise temperature 1 step');\n    player.game.increaseTemperature(player, 1);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Field-Capped City",
  "tags" : [ "city", "building", "power" ],
  "cost" : 28,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Field-CappedCity.ts",
  "sourceCode" : ""
}, {
  "module" : "promo",
  "name" : "Magnetic Shield",
  "tags" : [ "space", "power" ],
  "cost" : 25,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "power",
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/MagneticShield.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class MagneticShield extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.MAGNETIC_SHIELD,\n      tags: [Tag.SPACE, Tag.POWER],\n      cost: 25,\n\n      behavior: {\n        tr: 4,\n      },\n\n      requirements: {tag: Tag.POWER, count: 3},\n      metadata: {\n        cardNumber: 'X24',\n        renderData: CardRenderer.builder((b) => b.tr(4, {digit})),\n        description: 'Requires 3 power tags. Raise your TR 4 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Meltworks",
  "tags" : [ "building" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Meltworks.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\nimport {ActionCard} from '../ActionCard';\n\nexport class Meltworks extends ActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MELTWORKS,\n      tags: [Tag.BUILDING],\n      cost: 4,\n\n      action: {\n        spend: {heat: 5},\n        stock: {steel: 3},\n      },\n\n      metadata: {\n        cardNumber: 'X26',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 5 heat to gain 3 steel.', (eb) => {\n            eb.heat(5, {digit}).startAction.steel(3);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Mohole Lake",
  "tags" : [ "building" ],
  "cost" : 28,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/MoholeLake.ts",
  "sourceCode" : "import {IActionCard} from '../ICard';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MoholeLake extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MOHOLE_LAKE,\n      tags: [Tag.BUILDING],\n      cost: 28,\n\n      behavior: {\n        stock: {plants: 3},\n        global: {temperature: 1},\n        ocean: {},\n      },\n\n      metadata: {\n        cardNumber: 'X27',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add a microbe or animal to ANOTHER card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.MICROBE).asterix();\n            eb.nbsp.or().nbsp.resource(CardResource.ANIMAL).asterix();\n          }).br;\n          b.plants(3).temperature(1).oceans(1);\n        }),\n        description: 'Gain 3 plants. Raise temperature 1 step, and place 1 ocean tile.',\n      },\n    });\n  }\n\n  public canAct(): boolean {\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    const availableCards = player.getResourceCards(CardResource.MICROBE).concat(player.getResourceCards(CardResource.ANIMAL));\n\n    if (availableCards.length === 0) {\n      return undefined;\n    }\n\n    if (availableCards.length === 1) {\n      player.addResourceTo(availableCards[0], {log: true});\n      return undefined;\n    }\n\n    return new SelectCard('Select card to add microbe or animal', 'Add resource', availableCards)\n      .andThen(([card]) => {\n        player.addResourceTo(card, {log: true});\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Diversity Support",
  "tags" : [ ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ {
    "resourceTypes" : 9,
    "count" : 9
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/DiversitySupport.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class DiversitySupport extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.DIVERSITY_SUPPORT,\n      tags: [],\n      cost: 1,\n\n      behavior: {\n        tr: 1,\n      },\n\n      requirements: {resourceTypes: 9},\n      metadata: {\n        cardNumber: 'X20',\n        description: 'Requires that you have 9 different types of resources. Gain 1 TR.',\n        renderData: CardRenderer.builder((b) => b.tr(1)),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Jovian Embassy",
  "tags" : [ "jovian", "building" ],
  "victoryPoints" : {
    "tag" : "jovian",
    "per" : 2
  },
  "cost" : 22,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/JovianEmbassy.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class JovianEmbassy extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.JOVIAN_EMBASSY,\n      tags: [Tag.JOVIAN, Tag.BUILDING],\n      cost: 22,\n      victoryPoints: {tag: Tag.JOVIAN, per: 2},\n\n      behavior: {\n        tr: 1,\n      },\n\n      metadata: {\n        cardNumber: 'X23',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(1);\n        }),\n        description: 'Raise your TR 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Topsoil Contract",
  "tags" : [ "microbe", "earth" ],
  "cost" : 8,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/TopsoilContract.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ICard} from '../ICard';\nimport {CardResource} from '../../../common/CardResource';\nimport {Resource} from '../../../common/Resource';\n\nexport class TopsoilContract extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.TOPSOIL_CONTRACT,\n      tags: [Tag.MICROBE, Tag.EARTH],\n      cost: 8,\n\n      behavior: {\n        stock: {plants: 3},\n      },\n\n      metadata: {\n        cardNumber: 'X30',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you gain a microbe to ANY CARD, also gain 1 Mâ‚¬.', (eb) => {\n            eb.resource(CardResource.MICROBE).asterix().startEffect.megacredits(1);\n          }).br;\n          b.plants(3);\n        }),\n        description: 'Gain 3 plants.',\n      },\n    });\n  }\n\n  public onResourceAdded(player: IPlayer, card: ICard, count: number) {\n    if (card.resourceType === CardResource.MICROBE) {\n      player.stock.add(Resource.MEGACREDITS, count, {log: true});\n    }\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Imported Nutrients",
  "tags" : [ "earth", "space" ],
  "cost" : 14,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/ImportedNutrients.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class ImportedNutrients extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.IMPORTED_NUTRIENTS,\n      tags: [Tag.EARTH, Tag.SPACE],\n      cost: 14,\n\n      behavior: {\n        stock: {plants: 4},\n        addResourcesToAnyCard: {count: 4, type: CardResource.MICROBE},\n      },\n\n      metadata: {\n        cardNumber: 'X22',\n        renderData: CardRenderer.builder((b) => {\n          b.plants(4, {digit}).nbsp.resource(CardResource.MICROBE, {amount: 4, digit}).asterix();\n        }),\n        description: 'Gain 4 plants and add 4 microbes to ANOTHER CARD.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Asteroid Deflection System",
  "tags" : [ "space", "earth", "building" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 11,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Asteroid",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/AsteroidDeflectionSystem.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IActionCard} from '../ICard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class AsteroidDeflectionSystem extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ASTEROID_DEFLECTION_SYSTEM,\n      tags: [Tag.SPACE, Tag.EARTH, Tag.BUILDING],\n      cost: 11,\n\n      resourceType: CardResource.ASTEROID,\n      victoryPoints: {resourcesHere: {}},\n\n      behavior: {\n        production: {energy: -1},\n      },\n\n      metadata: {\n        cardNumber: 'X14',\n        renderData: CardRenderer.builder((b) => {\n          b.action('REVEAL AND DISCARD the top card of the deck. If it has a space tag, add an asteroid here.', (eb) => {\n            eb.empty().startAction.cards(1).asterix().nbsp.tag(Tag.SPACE).colon().resource(CardResource.ASTEROID);\n          }).br;\n          b.production((pb) => pb.minus().energy(1)).text('opponents may not remove your plants', Size.SMALL, true);\n        }),\n        description: {\n          text: 'Decrease your energy production 1 step. 1VP per asteroid on this card.',\n          align: 'left',\n        },\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.game.projectDeck.canDraw(1);\n  }\n\n  public action(player: IPlayer) {\n    const card = player.game.projectDeck.drawOrThrow(player.game);\n    player.game.log('${0} revealed and discarded ${1}', (b) => b.player(player).card(card, {tags: true}));\n    if (card.tags.includes(Tag.SPACE)) {\n      player.addResourceTo(this, {qty: 1, log: true});\n    }\n    player.game.projectDeck.discard(card);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Sub-Crust Measurements",
  "tags" : [ "science", "building", "earth" ],
  "victoryPoints" : 2,
  "cost" : 20,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Sub-CrustMeasurements.ts",
  "sourceCode" : ""
}, {
  "module" : "promo",
  "name" : "Potatoes",
  "tags" : [ "plant" ],
  "cost" : 2,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Potatoes.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Potatoes extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.POTATOES,\n      tags: [Tag.PLANT],\n      cost: 2,\n\n      behavior: {\n        production: {megacredits: 2},\n      },\n\n      metadata: {\n        cardNumber: 'X28',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().plants(2).nbsp.production((pb) => pb.megacredits(2));\n        }),\n        description: 'Lose 2 plants. Increase your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    const viralEnhancers = player.playedCards.find((card) => card.name === CardName.VIRAL_ENHANCERS);\n    const hasEnoughPlants = player.plants >= 2 || player.plants >= 1 && viralEnhancers !== undefined;\n\n    return hasEnoughPlants;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.plants -= 2;\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Meat Industry",
  "tags" : [ "building" ],
  "cost" : 8,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/MeatIndustry.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {ICard} from '../ICard';\nimport {CardResource} from '../../../common/CardResource';\nimport {Resource} from '../../../common/Resource';\n\nexport class MeatIndustry extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MEAT_INDUSTRY,\n      tags: [Tag.BUILDING],\n      cost: 8,\n\n      metadata: {\n        cardNumber: 'X25',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you gain an animal to ANY CARD, gain 2 Mâ‚¬.', (eb) => {\n            eb.resource(CardResource.ANIMAL).asterix().startEffect.megacredits(2);\n          });\n        }),\n      },\n    });\n  }\n\n  public onResourceAdded(player: IPlayer, card: ICard, count: number) {\n    if (card.resourceType === CardResource.ANIMAL) {\n      player.stock.add(Resource.MEGACREDITS, count * 2, {log: true});\n    }\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Advertising",
  "tags" : [ "earth" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Advertising.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Advertising extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ADVERTISING,\n      tags: [Tag.EARTH],\n      cost: 6,\n      behavior: {\n        production: {megacredits: 1},\n      },\n\n      metadata: {\n        cardNumber: 'X13',\n        renderData: CardRenderer.builder((b) => b.effect('When you play a card with a basic cost of 20 Mâ‚¬ or more, increase your Mâ‚¬ production 1 step.', (be) => {\n          be.megacredits(20).asterix().startEffect.production((pb) => pb.megacredits(1));\n        }).br.production((pb) => pb.megacredits(1))),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    if (card.cost >= 20) {\n      player.production.add(Resource.MEGACREDITS, 1, {log: true});\n    }\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Deimos Down:promo",
  "tags" : [ "space" ],
  "cost" : 31,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/DeimosDown:promo.ts",
  "sourceCode" : ""
}, {
  "module" : "promo",
  "name" : "Great Dam:promo",
  "tags" : [ "power", "building" ],
  "victoryPoints" : 1,
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/GreatDam:promo.ts",
  "sourceCode" : ""
}, {
  "module" : "promo",
  "name" : "Magnetic Field Generators:promo",
  "tags" : [ "building" ],
  "cost" : 18,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/MagneticFieldGenerators:promo.ts",
  "sourceCode" : ""
}, {
  "module" : "promo",
  "name" : "Saturn Surfing",
  "tags" : [ "jovian", "earth" ],
  "victoryPoints" : 1,
  "cost" : 13,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/SaturnSurfing.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IActionCard} from '../ICard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SaturnSurfing extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SATURN_SURFING,\n      cost: 13,\n      tags: [Tag.JOVIAN, Tag.EARTH],\n      resourceType: CardResource.FLOATER,\n      victoryPoints: 1,\n\n      behavior: {\n        addResources: {tag: Tag.EARTH},\n      },\n\n      metadata: {\n        cardNumber: 'X11',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 floater from here to gain 1 Mâ‚¬ from each floater here, INCLUDING THE PAID FLOATER. Max 5.', (eb) => {\n            eb.resource(CardResource.FLOATER).startAction.megacredits(1).slash().resource(CardResource.FLOATER);\n            eb.asterix().text('max 5');\n          }).br;\n          b.resource(CardResource.FLOATER).slash().tag(Tag.EARTH);\n        }),\n        description: 'Add 1 floater here for every Earth tag you have, including this.',\n      },\n    });\n  }\n\n  public canAct(): boolean {\n    return this.resourceCount > 0;\n  }\n\n  public action(player: IPlayer) {\n    player.stock.add(Resource.MEGACREDITS, Math.min(5, this.resourceCount--));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Bio Printing Facility",
  "tags" : [ "building" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 7,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/BioPrintingFacility.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IActionCard} from '../ICard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class BioPrintingFacility extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.BIO_PRINTING_FACILITY,\n      tags: [Tag.BUILDING],\n      cost: 7,\n      victoryPoints: {tag: Tag.POWER, per: 3},\n\n\n      metadata: {\n        cardNumber: 'X36',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 2 energy to gain 2 plants OR to add 1 animal to ANOTHER card.', (eb) => {\n            eb.energy(2, {digit}).startAction.plants(2);\n            eb.or().resource(CardResource.ANIMAL).asterix();\n          });\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.energy >= 2;\n  }\n\n  public action(player: IPlayer) {\n    const availableAnimalCards = player.getResourceCards(CardResource.ANIMAL);\n    player.stock.deduct(Resource.ENERGY, 2);\n\n\n    if (availableAnimalCards.length === 0) {\n      player.stock.add(Resource.PLANTS, 2, {log: true});\n      return undefined;\n    }\n\n    const gainPlantOption = new SelectOption('Gain 2 plants', 'Gain plants').andThen(() => {\n      player.stock.add(Resource.PLANTS, 2, {log: true});\n      return undefined;\n    });\n\n    if (availableAnimalCards.length === 1) {\n      const targetCard = availableAnimalCards[0];\n\n      return new OrOptions(\n        new SelectOption(message('Add ${0} animal to ${1}', (b) => b.number(1).card(targetCard)), 'Add animal').andThen(() => {\n          player.addResourceTo(targetCard, {log: true});\n          return undefined;\n        }),\n        gainPlantOption,\n      );\n    }\n\n    return new OrOptions(\n      new SelectCard(\n        'Select card to add 1 animal',\n        'Add animal',\n        availableAnimalCards)\n        .andThen(([card]) => {\n          player.addResourceTo(card, {log: true});\n          return undefined;\n        }),\n      gainPlantOption,\n    );\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Bactoviral Research",
  "tags" : [ "microbe", "science" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/BactoviralResearch.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class BactoviralResearch extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.BACTOVIRAL_RESEARCH,\n      tags: [Tag.MICROBE, Tag.SCIENCE],\n      cost: 10,\n\n      behavior: {\n        drawCard: 1,\n        addResourcesToAnyCard: {count: {tag: Tag.SCIENCE}, type: CardResource.MICROBE},\n      },\n\n      metadata: {\n        cardNumber: 'X35',\n        renderData: CardRenderer.builder((b) => {\n          b.cards(1).br.br; // double br is intentional for visual appeal\n          b.resource(CardResource.MICROBE).asterix().slash().tag(Tag.SCIENCE);\n        }),\n        description: 'Draw 1 card. Choose 1 of your played cards and add 1 microbe to it for each science tag you have, including this.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Harvest",
  "tags" : [ "plant" ],
  "cost" : 4,
  "type" : "event",
  "requirements" : [ {
    "greeneries" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Harvest.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Harvest extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.HARVEST,\n      tags: [Tag.PLANT],\n      cost: 4,\n      requirements: {greeneries: 3},\n\n      behavior: {\n        stock: {megacredits: 12},\n      },\n\n      metadata: {\n        cardNumber: 'X37',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(12);\n        }),\n        description: 'Requires that you have 3 greenery tiles in play. Gain 12 Mâ‚¬.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Outdoor Sports",
  "tags" : [ ],
  "victoryPoints" : 1,
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "cities" : 1,
    "all" : true,
    "nextTo" : true,
    "count" : 1
  }, {
    "oceans" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/OutdoorSports.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all, nextTo} from '../Options';\nimport {Board} from '../../boards/Board';\n\nexport class OutdoorSports extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.OUTDOOR_SPORTS,\n      cost: 7,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {megacredits: 2},\n      },\n\n      requirements: [{cities: 1, all, nextTo}, {oceans: 1}],\n      metadata: {\n        cardNumber: 'X38',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.megacredits(2);\n          });\n        }),\n        description: 'Requires any city adjacent to an ocean. Increase your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    const board = player.game.board;\n    const oceans = board.getOceanSpaces({upgradedOceans: true, wetlands: true});\n    return oceans.some((ocean) => board.getAdjacentSpaces(ocean).some((space) => Board.isCitySpace(space)));\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "16 Psyche",
  "tags" : [ "space" ],
  "victoryPoints" : 2,
  "cost" : 29,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/16Psyche.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Psyche extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.PSYCHE,\n      tags: [Tag.SPACE],\n      cost: 29,\n      victoryPoints: 2,\n      behavior: {\n        production: {titanium: 2},\n        stock: {titanium: 3},\n      },\n\n      metadata: {\n        cardNumber: 'X44',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.titanium(2)).br.titanium(3);\n        }),\n        description: 'Increase titanium production 2 steps. Gain 3 titanium.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Robot Pollinators",
  "tags" : [ ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/RobotPollinators.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class RobotPollinators extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ROBOT_POLLINATORS,\n      cost: 9,\n      requirements: {oxygen: 4},\n      behavior: {\n        production: {plants: 1},\n        stock: {plants: {tag: Tag.PLANT}},\n      },\n\n      metadata: {\n        cardNumber: 'X45',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1)).br.plants(1).slash().tag(Tag.PLANT);\n        }),\n        description: 'Requires 4% oxygen. Increase your plant production 1 step. Gain 1 plant for every plant tag you have.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Supercapacitors",
  "tags" : [ "power", "building" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Supercapacitors.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {SelectAmount} from '../../inputs/SelectAmount';\nimport {Card} from '../Card';\n\nexport class Supercapacitors extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SUPERCAPACITORS,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 4,\n\n      behavior: {\n        production: {megacredits: 1},\n      },\n\n      metadata: {\n        cardNumber: 'X46',\n        renderData: CardRenderer.builder((b) => {\n          b.text('EFFECT: CONVERTING ENERGY TO HEAT DURING PRODUCTION IS OPTIONAL FOR EACH ENERGY RESOURCE.');\n          b.br;\n          b.production((pb) => pb.megacredits(1));\n        }),\n        description: 'Increase Mâ‚¬ production 1 step.',\n      },\n    });\n  }\n\n  public static onProduction(player: IPlayer) {\n    if (player.energy === 0) {\n      player.finishProductionPhase();\n      return;\n    }\n    player.defer(\n      new SelectAmount('Select amount of energy to convert to heat', 'OK', 0, player.energy, true)\n        .andThen((amount) => {\n          player.energy -= amount;\n          player.heat += amount;\n          player.game.log('${0} converted ${1} units of energy to heat', (b) => b.player(player).number(amount));\n          player.finishProductionPhase();\n          return undefined;\n        },\n        ));\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Floyd Continuum",
  "tags" : [ "science" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/FloydContinuum.ts",
  "sourceCode" : "import * as constants from '../../../common/constants';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {IActionCard} from '../ICard';\n\n// Note: Floyd Continuum comes from the Dutch international open.\n// https://boardgamegeek.com/thread/3120204/dutch-open-terraformingmars-international-4th-tour\n\nexport class FloydContinuum extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      cost: 4,\n      name: CardName.FLOYD_CONTINUUM,\n      tags: [Tag.SCIENCE],\n      type: CardType.ACTIVE,\n\n      metadata: {\n        cardNumber: 'X-1',\n        hasExternalHelp: true,\n        renderData: CardRenderer.builder((b) => {\n          b.action('Gain 3 Mâ‚¬ per completed terraforming parameter.', (eb) => {\n            eb.empty().startAction.megacredits(3).slash().oceans(1).oxygen(1).temperature(1).asterix();\n          });\n        }),\n      },\n    });\n  }\n\n  public canAct() {\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    let count = 0;\n    const game = player.game;\n    if (game.getTemperature() === constants.MAX_TEMPERATURE) {\n      count++;\n    }\n    if (game.getOxygenLevel() === constants.MAX_OXYGEN_LEVEL) {\n      count++;\n    }\n    if (!game.canAddOcean()) {\n      count++;\n    }\n    if (game.getVenusScaleLevel() === constants.MAX_VENUS_SCALE) {\n      count++;\n    }\n    player.stock.add(Resource.MEGACREDITS, 3 * count, {log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Aqueduct Systems",
  "tags" : [ "building" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ {
    "cities" : 1,
    "nextTo" : true,
    "count" : 1
  }, {
    "oceans" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/AqueductSystems.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Board} from '../../boards/Board';\nimport {nextTo} from '../Options';\n\nexport class AqueductSystems extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.AQUEDUCT_SYSTEMS,\n      tags: [Tag.BUILDING],\n      cost: 4,\n\n      behavior: {\n        drawCard: {count: 3, tag: Tag.BUILDING},\n      },\n\n      requirements: [{cities: 1, nextTo}, {oceans: 1}],\n\n      metadata: {\n        cardNumber: 'X50',\n        renderData: CardRenderer.builder((b) => {\n          b.cards(3, {secondaryTag: Tag.BUILDING});\n        }),\n        description: 'Requires you have a city next to an ocean. Draw 3 cards with a building tag.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    const board = player.game.board;\n    const oceans = board.getOceanSpaces({upgradedOceans: true, wetlands: true});\n    return oceans.some((ocean) => {\n      return board.getAdjacentSpaces(ocean).some((space) => {\n        return Board.isCitySpace(space) && space.player === player;\n      });\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Astra Mechanica",
  "tags" : [ "science" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/AstraMechanica.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {isSpecialTile} from '../../boards/Board';\n\nexport class AstraMechanica extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ASTRA_MECHANICA,\n      tags: [Tag.SCIENCE],\n      cost: 7,\n\n      metadata: {\n        cardNumber: 'X51',\n        hasExternalHelp: true,\n        renderData: CardRenderer.builder((b) => {\n          b.cards(2, {secondaryTag: Tag.EVENT}).asterix();\n        }),\n        description: 'RETURN UP TO 2 OF YOUR PLAYED EVENT CARDS TO YOUR HAND. THEY MAY NOT BE CARDS THAT PLACE SPECIAL TILES.',\n      },\n    });\n  }\n\n  private getCards(player: IPlayer): ReadonlyArray<IProjectCard> {\n    return player.playedCards.filter((card) => {\n      if (card.type !== CardType.EVENT) {\n        return false;\n      }\n      if (card.name === CardName.PATENT_MANIPULATION || card.name === CardName.RETURN_TO_ABANDONED_TECHNOLOGY) {\n        return false;\n      }\n      if (card.name === CardName.HOSTILE_TAKEOVER) {\n        return false;\n      }\n      if (card.tilesBuilt.some(isSpecialTile)) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.getCards(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const events = this.getCards(player);\n    if (events.length === 0) {\n      player.game.log('${0} had no events', (b) => b.player(player));\n      return undefined;\n    }\n    return new SelectCard(\n      'Select up to 2 events to return to your hand',\n      'Select',\n      events,\n      {max: 2, min: 0})\n      .andThen(\n        (cards) => {\n          for (const card of cards) {\n            player.playedCards = player.playedCards.filter((c) => c.name !== card.name);\n            player.cardsInHand.push(card);\n            card.onDiscard?.(player);\n            player.game.log('${0} returned ${1} to their hand', (b) => b.player(player).card(card));\n          }\n          return undefined;\n        });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "St. Joseph of Cupertino Mission",
  "tags" : [ ],
  "victoryPoints" : "special",
  "cost" : 7,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/St.JosephofCupertinoMission.ts",
  "sourceCode" : ""
}, {
  "module" : "promo",
  "name" : "Carbon Nanosystems",
  "tags" : [ "science", "building" ],
  "victoryPoints" : 2,
  "cost" : 20,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Graphene",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/CarbonNanosystems.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class CarbonNanosystems extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.CARBON_NANOSYSTEMS,\n      tags: [Tag.SCIENCE, Tag.BUILDING],\n      cost: 20,\n      victoryPoints: 2,\n      resourceType: CardResource.GRAPHENE,\n\n      metadata: {\n        cardNumber: 'X52',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play a science tag, including this, add a graphene resource here.', (eb) => eb.tag(Tag.SCIENCE).startEffect.resource(CardResource.GRAPHENE)).br;\n          b.effect('When playing a space or city tag, graphenes may be used as 4 Mâ‚¬ each.', (eb) => eb.tag(Tag.SPACE).or().tag(Tag.CITY, {size: Size.MEDIUM}).startEffect.resource(CardResource.GRAPHENE).equals().megacredits(4)).br;\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    const tags = card.tags.filter((tag) => tag === Tag.SCIENCE).length;\n    player.addResourceTo(this, {qty: tags, log: true});\n    return undefined;\n  }\n  public onColonyAddedToLeavitt(player: IPlayer): void {\n    player.addResourceTo(this, {qty: 1, log: true});\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Cyberia Systems",
  "tags" : [ ],
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/CyberiaSystems.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {RoboticWorkforceBase} from '../base/RoboticWorkforceBase';\nimport {Size} from '../../../common/cards/render/Size';\nimport {IPlayer} from '../../IPlayer';\nimport {ICard} from '../ICard';\nimport {Priority} from '../../deferredActions/Priority';\n\nexport class CyberiaSystems extends RoboticWorkforceBase {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.CYBERIA_SYSTEMS,\n      cost: 16,\n\n      behavior: {production: {steel: 1}},\n\n      metadata: {\n        cardNumber: 'X53',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.steel(1));\n          b.text('Copy', Size.SMALL, true)\n            .production((pb) => pb.tag(Tag.BUILDING))\n            .production((pb) => pb.tag(Tag.BUILDING))\n            .br;\n        }),\n        description: 'Increase your steel production 1 step. Copy the PRODUCTION BOXES of 2 of your cards with building tags.',\n      },\n    });\n  }\n\n  protected override getPlayableBuildingCards(player: IPlayer): ReadonlyArray<ICard> {\n    return super.getPlayableBuildingCards(player).filter((c) => c.name !== CardName.CYBERIA_SYSTEMS);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const firstSet = this.getPlayableBuildingCards(player);\n    const selectFirstCard = this.selectBuildingCard(player, firstSet, 'Select first builder card to copy', (card) => {\n      const secondSet = this.getPlayableBuildingCards(player).filter((c) => c !== card);\n      player.defer(this.selectBuildingCard(player, secondSet, 'Select second card to copy'), Priority.ROBOTIC_WORKFORCE);\n      return undefined;\n    });\n\n    player.defer(selectFirstCard, Priority.ROBOTIC_WORKFORCE);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Hermetic Order of Mars",
  "tags" : [ ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 4,
    "max" : true,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/HermeticOrderofMars.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {max} from '../Options';\nimport {IPlayer} from '../../IPlayer';\nimport {SpaceType} from '../../../common/boards/SpaceType';\nimport {isHazardTileType} from '../../../common/AresTileType';\nimport {Resource} from '../../../common/Resource';\nimport {Space} from '../../boards/Space';\n\nexport class HermeticOrderOfMars extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.HERMETIC_ORDER_OF_MARS,\n      cost: 10,\n\n      requirements: {oxygen: 4, max},\n\n      behavior: {\n        production: {megacredits: 2},\n      },\n\n      metadata: {\n        cardNumber: 'X56',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(2)).nbsp.megacredits(1).slash().emptyTile().asterix();\n        }),\n        description: 'Oxygen must be 4% or lower. Increase your Mâ‚¬ production 2 steps. Gain 1 Mâ‚¬ per empty area adjacent to your tiles.',\n      },\n    });\n  }\n\n  private hasTile(space: Space): boolean {\n    return space.tile !== undefined && !isHazardTileType(space.tile.tileType);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const board = player.game.board;\n    const spaces = board.spaces.filter((space) => {\n      if (space.spaceType === SpaceType.COLONY || space.spaceType === SpaceType.RESTRICTED || this.hasTile(space)) {\n        return false;\n      }\n      return board.getAdjacentSpaces(space).some((s) => s.player === player && this.hasTile(s));\n    }).length;\n\n    player.stock.add(Resource.MEGACREDITS, spaces, {log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Homeostasis Bureau",
  "tags" : [ "building" ],
  "cost" : 16,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/HomeostasisBureau.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {GlobalParameter} from '../../../common/GlobalParameter';\n\nexport class HomeostasisBureau extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.HOMEOSTASIS_BUREAU,\n      cost: 16,\n      tags: [Tag.BUILDING],\n\n      behavior: {\n        production: {heat: 2},\n      },\n\n      metadata: {\n        cardNumber: 'X57',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you raise the temperature, gain 3 Mâ‚¬.', (eb) => eb.temperature(1).startEffect.megacredits(3));\n          b.br;\n          b.production((b) => b.heat(2));\n        }),\n        description: 'Increase your heat production 2 steps.',\n      },\n    });\n  }\n\n  onGlobalParameterIncrease?(player: IPlayer, parameter: GlobalParameter, steps: number) {\n    if (parameter === GlobalParameter.TEMPERATURE) {\n      player.stock.add(Resource.MEGACREDITS, 3 * steps, {log: true});\n    }\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Kaguya Tech",
  "tags" : [ "city", "plant" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/KaguyaTech.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CanAffordOptions, IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SelectSpace} from '../../inputs/SelectSpace';\n\nexport class KaguyaTech extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.KAGUYA_TECH,\n      tags: [Tag.CITY, Tag.PLANT],\n      cost: 10,\n\n      behavior: {\n        production: {megacredits: 2},\n        drawCard: 1,\n      },\n\n      metadata: {\n        cardNumber: 'X58',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(2)).cards(1).br;\n          b.minus().greenery({withO2: false}).plus().city().asterix().br;\n          b.plainText('Increase Mâ‚¬ production 2 steps. Draw 1 card. ' +\n          'Remove 1 of your greenery tiles (does not affect oxygen.) ' +\n          'Place a city tile there, regardless of placement rules. ' +\n          'Gain placement bonuses as usual.');\n        }),\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer, canAffordOptions?: CanAffordOptions) {\n    const greeneries = player.game.board.getGreeneries(player);\n    const filtered = greeneries.filter((space) => player.game.board.canAfford(player, space, canAffordOptions));\n    return filtered;\n  }\n\n  public override bespokeCanPlay(player: IPlayer, canAffordOptions: CanAffordOptions): boolean {\n    // TODO(kberg): Yes But, if the only greenery is Wetlands, warn the player.\n    return this.availableSpaces(player, canAffordOptions).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const greeneries = this.availableSpaces(player);\n    return new SelectSpace('Select a greenery to convert to a city.', greeneries)\n      .andThen((space) => {\n        player.game.removeTile(space.id);\n        player.game.addCity(player, space, this.name);\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Mars Nomads",
  "tags" : [ ],
  "cost" : 13,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/MarsNomads.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {IActionCard} from '../ICard';\nimport {Player} from '../../Player';\nimport {intersection} from '../../../common/utils/utils';\nimport {message} from '../../logs/MessageBuilder';\nexport class MarsNomads extends Card implements IActionCard {\n  /*\n   * A good page about this card: https://boardgamegeek.com/thread/3154812.\n   *\n   * 1. Arcadian Communities and Land Claim block Mars Nomads.\n   *  1a. Even if it's your AC.\n   * 2. Mining Guild and Philares cannot take advantage of it.\n   * 3. Placing next to an ocean tile gives a placement bonus.\n   *\n   * Ares: Adjacency bonuses are not placement bonuses.\n   */\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MARS_NOMADS,\n      cost: 13,\n\n      metadata: {\n        cardNumber: 'X59',\n        renderData: CardRenderer.builder((b) => {\n          b.action('MOVE THE NOMADS to an adjacent, non-reserved empty area and collect THE PLACEMENT BONUS ' +\n            'as if placing a special tile there. No tiles may be placed on the Nomad area.', (ab) => {\n            ab.empty().startAction.nomads().asterix();\n          }).br;\n\n          b.nomads().asterix().br;\n          b.plainText('PLACE THE NOMADS on a non-reserved, empty area on the game board.');\n        }),\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    const spaces = player.game.board.getNonReservedLandSpaces();\n    return spaces.length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    return new SelectSpace(\n      message('Select space for ${0}', (b) => b.card(this)),\n      player.game.board.getNonReservedLandSpaces())\n      .andThen((space) => {\n        player.game.nomadSpace = space.id;\n        return undefined;\n      });\n  }\n\n  private eliglbleDestinationSpaces(player: IPlayer) {\n    const game = player.game;\n    const board = game.board;\n    if (game.nomadSpace === undefined) {\n      return [];\n    }\n\n    const availableSpaces = board.getNonReservedLandSpaces();\n    const currentNomadSpace = board.getSpaceOrThrow(game.nomadSpace);\n    const adjacentSpaces = board.getAdjacentSpaces(currentNomadSpace);\n    return intersection(availableSpaces, adjacentSpaces);\n  }\n\n  public canAct(player: IPlayer) {\n    return this.eliglbleDestinationSpaces(player).length > 0;\n  }\n\n  public action(player: Player) {\n    const spaces = this.eliglbleDestinationSpaces(player);\n\n    return new SelectSpace(\n      message('Select new space for ${0}', (b) => b.card(this)),\n      spaces)\n      .andThen((space) => {\n        player.game.nomadSpace = space.id;\n        player.game.grantPlacementBonuses(player, space);\n\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Neptunian Power Consultants",
  "tags" : [ "power" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Hydroelectric resource",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/NeptunianPowerConsultants.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {all} from '../Options';\nimport {Resource} from '../../../common/Resource';\nimport {Board} from '../../boards/Board';\nimport {Space} from '../../boards/Space';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {SelectPayment} from '../../inputs/SelectPayment';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Priority} from '../../deferredActions/Priority';\n\nexport class NeptunianPowerConsultants extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.NEPTUNIAN_POWER_CONSULTANTS,\n      tags: [Tag.POWER],\n      cost: 4,\n      resourceType: CardResource.HYDROELECTRIC_RESOURCE,\n      victoryPoints: {resourcesHere: {}},\n\n      metadata: {\n        cardNumber: 'X61',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(1, {all, size: Size.SMALL}).asterix()\n            .colon()\n            .minus().megacredits(7).super((b) => b.steel(1));\n          b.br;\n          b.nbsp.nbsp.plus().production((pb) => pb.energy(1)).plus().resource(CardResource.HYDROELECTRIC_RESOURCE);\n          b.br;\n          b.plainText('(Effect: When any ocean is placed, you MAY pay 7 Mâ‚¬ (steel may be used), to ' +\n            'raise energy production 1 step and add 1 hydroelectric resource to this card.)');\n        }),\n        description: '1 VP per hydroelectric resource on this card',\n      },\n    });\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, _activePlayer: IPlayer, space: Space) {\n    const game = cardOwner.game;\n    if (Board.isUncoveredOceanSpace(space)) {\n      if (cardOwner.canAfford({cost: 7, steel: true})) {\n        const orOptions = new OrOptions();\n        orOptions.options.push(new SelectPayment(\n          'Spend 7 Mâ‚¬ for one energy production and hydroelectric resource',\n          7, {steel: true})\n          .andThen((payment) => {\n            cardOwner.pay(payment);\n            cardOwner.production.add(Resource.ENERGY, 1, {log: true});\n            cardOwner.addResourceTo(this, {qty: 1, log: true});\n            return undefined;\n          }));\n        orOptions.options.push(new SelectOption('Do not use card effect').andThen(() => {\n          game.log('${0} declined to use the ${1} effect', (b) => b.player(cardOwner).card(this));\n          return undefined;\n        }));\n        cardOwner.defer(orOptions, Priority.OPPONENT_TRIGGER);\n      } else {\n        game.log('${0} cannot afford to use the ${1} effect', (b) => b.player(cardOwner).card(this));\n      }\n    }\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Martian Lumber Corp",
  "tags" : [ "building", "plant" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ {
    "greeneries" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/MartianLumberCorp.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\n\nexport class MartianLumberCorp extends Card {\n  constructor() {\n    super({\n      name: CardName.MARTIAN_LUMBER_CORP,\n      type: CardType.ACTIVE,\n      tags: [Tag.BUILDING, Tag.PLANT],\n      cost: 6,\n\n      behavior: {\n        production: {plants: 1},\n      },\n\n      requirements: {greeneries: 2},\n\n      metadata: {\n        cardNumber: 'X60',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When playing a building tag, plants may be used as 3 Mâ‚¬ each.',\n            (eb) => eb.tag(Tag.BUILDING).startEffect.plants(1).equals().megacredits(3)).br;\n          b.production((pb) => pb.plants(1)).br;\n          b.plainText('(Requires that you have 2 greenery tiles. Increase plant production 1 step.)').br;\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.canUsePlantsAsMegacredits = true;\n    return undefined;\n  }\n\n  public override onDiscard(player: IPlayer) {\n    player.canUsePlantsAsMegacredits = false;\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Red Ships",
  "tags" : [ ],
  "cost" : 2,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/RedShips.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\nimport {Resource} from '../../../common/Resource';\nimport {Board, isSpecialTileSpace} from '../../boards/Board';\nimport {IActionCard} from '../ICard';\n\nexport class RedShips extends Card implements IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.RED_SHIPS,\n      cost: 2,\n\n      requirements: {oxygen: 4},\n\n      metadata: {\n        cardNumber: 'X62',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Gain 1 Mâ‚¬ for each CITY AND SPECIAL TILE adjacent to an ocean.',\n            (ab) => ab.empty().startAction.megacredits(1).cityorSpecialTile({all}).oceans(1));\n        }),\n        description: 'Requires 4% oxygen.',\n      },\n    });\n  }\n\n  canAct(): boolean {\n    return true;\n  }\n\n  action(player: IPlayer): undefined {\n    const board = player.game.board;\n    const candidates = board.spaces.filter((space) => {\n      return Board.isCitySpace(space) || isSpecialTileSpace(space);\n    });\n    const included = candidates.filter(\n      (space) => board.getAdjacentSpaces(space).some((adj) => Board.isOceanSpace(adj)));\n\n    const megacredits = included.length;\n    if (megacredits === 0) {\n      player.game.log('${0} gained 0 Mâ‚¬ from ${1} action.', (b) => b.player(player).card(this));\n    }\n    player.stock.add(Resource.MEGACREDITS, megacredits, {log: true});\n\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Solar Logistics",
  "tags" : [ "earth", "space" ],
  "cardDiscount" : {
    "tag" : "earth",
    "amount" : 2
  },
  "victoryPoints" : 1,
  "cost" : 28,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/SolarLogistics.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {all} from '../Options';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class SolarLogistics extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SOLAR_LOGISTICS,\n      cost: 28,\n      tags: [Tag.EARTH, Tag.SPACE],\n\n      behavior: {\n        stock: {titanium: 3},\n      },\n      victoryPoints: 1,\n      cardDiscount: {tag: Tag.EARTH, amount: 2},\n\n      metadata: {\n        cardNumber: 'X63',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play an Earth tag, you pay 2 Mâ‚¬ less.',\n            (eb) => eb.tag(Tag.EARTH).startEffect.megacredits(-2));\n          b.br;\n          b.effect('When any player plays a space event, draw a card.',\n            (eb) => eb.tag(Tag.SPACE, {all}).tag(Tag.EVENT, {all}).startEffect.cards(1));\n          b.br;\n          b.titanium(3);\n        }),\n        description: 'Gain 3 titanium.',\n      },\n    });\n  }\n\n  public onCardPlayedFromAnyPlayer(thisCardOwner: IPlayer, _playedCardOwner: IPlayer, card: IProjectCard) {\n    if (card.type === CardType.EVENT && card.tags.includes(Tag.SPACE)) {\n      thisCardOwner.drawCard(1);\n    }\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "promo",
  "name" : "Teslaract",
  "tags" : [ "power", "building" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 14,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Teslaract.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IActionCard} from '../ICard';\nimport {Units} from '../../../common/Units';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class Teslaract extends Card implements IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.TESLARACT,\n      cost: 14,\n      tags: [Tag.POWER, Tag.BUILDING],\n      victoryPoints: {tag: Tag.POWER, per: 3},\n\n\n      behavior: {\n        tr: 1,\n      },\n\n      metadata: {\n        cardNumber: 'X66',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 energy production to gain 1 plant production.',\n            (ab) => ab.production((pb) => pb.energy(1)).startAction.production((pb) => pb.plants(1)));\n          b.br;\n          b.tr(1);\n        }),\n        description: 'Raise your TR 1 step.',\n      },\n    });\n  }\n\n  canAct(player: IPlayer): boolean {\n    return player.production.energy > 0;\n  }\n\n  action(player: IPlayer): undefined {\n    player.production.adjust(Units.of({energy: -1, plants: 1}));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Directed Heat Usage",
  "tags" : [ ],
  "cost" : 1,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/DirectedHeatUsage.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\nimport {digit} from '../Options';\n\nexport class DirectedHeatUsage extends ActionCard {\n  constructor() {\n    super({\n      name: CardName.DIRECTED_HEAT_USAGE,\n      type: CardType.ACTIVE,\n      cost: 1,\n\n      action: {\n        or: {\n          behaviors: [\n            {\n              title: 'Spend 3 heat to gain 4 Mâ‚¬',\n              spend: {heat: 3},\n              stock: {megacredits: 4},\n            },\n            {\n              title: 'Spend 3 heat to gain 2 plants',\n              spend: {heat: 3},\n              stock: {plants: 2},\n            },\n          ],\n        },\n      },\n\n      metadata: {\n        cardNumber: 'X48',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 3 heat to gain either 4 Mâ‚¬ or 2 plants.', (eb) =>\n            eb.empty().heat(3, {digit}).startAction.megacredits(4).or().plants(2));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Icy Impactors",
  "tags" : [ "space" ],
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Asteroid",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/IcyImpactors.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IActionCard} from '../ICard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {message} from '../../logs/MessageBuilder';\nimport {CardResource} from '../../../common/CardResource';\nimport {PlaceOceanTile} from '../../deferredActions/PlaceOceanTile';\n\nexport class IcyImpactors extends Card implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.ICY_IMPACTORS,\n      type: CardType.ACTIVE,\n      tags: [Tag.SPACE],\n      cost: 5,\n      resourceType: CardResource.ASTEROID,\n\n      metadata: {\n        cardNumber: 'X47',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 10 Mâ‚¬ (titanium may be used) to add 2 asteroids here.', (ab) =>\n            ab.megacredits(10).super((b) => b.titanium(1)).startAction.resource(CardResource.ASTEROID, 2));\n          b.br;\n          b.action('Spend 1 asteroid here to place an ocean tile. ' +\n            'FIRST PLAYER CHOOSES WHERE YOU MUST PLACE IT.', (ab) =>\n            ab.or().resource(CardResource.ASTEROID).startAction.oceans(1).asterix());\n        }),\n      },\n    });\n  }\n  private canAffordToBuyAsteroids(player: IPlayer) {\n    return player.canAfford({cost: 10, titanium: true});\n  }\n  private canAffordToPlaceOcean(player: IPlayer) {\n    return this.resourceCount > 0 && player.canAfford({cost: 0, tr: {oceans: 1}});\n  }\n\n  canAct(player: IPlayer): boolean {\n    if (this.canAffordToBuyAsteroids(player)) {\n      return true;\n    }\n    if (this.canAffordToPlaceOcean(player)) {\n      if (!player.game.canAddOcean()) {\n        this.warnings.add('maxoceans');\n      }\n      return true;\n    }\n    return false;\n  }\n\n  action(player: IPlayer) {\n    const options = new OrOptions();\n\n    if (this.canAffordToPlaceOcean(player)) {\n      const placeOceanOption = new SelectOption('Spend 1 asteroid here to place an ocean (first player chooses where to place it)').andThen(() => {\n        player.removeResourceFrom(this, 1, {log: true});\n        player.game.defer(\n          new PlaceOceanTile(player.game.first, {\n            creditedPlayer: player,\n            title: message('Select space for ${0} to place an ocean', (b) => b.player(player)),\n          }));\n        return undefined;\n      });\n      if (!player.game.canAddOcean()) {\n        placeOceanOption.warnings = ['maxoceans'];\n      }\n      options.options.push(placeOceanOption);\n    }\n\n    if (this.canAffordToBuyAsteroids(player)) {\n      options.options.push(\n        new SelectOption('Spend 10 Mâ‚¬ to add 2 asteroids here').andThen(() => {\n          player.game.defer(new SelectPaymentDeferred(player, 10, {canUseTitanium: true})).andThen(() => {\n            player.addResourceTo(this, {qty: 2, log: true});\n          });\n          return undefined;\n        }));\n    }\n\n    if (options.options.length === 0) {\n      return undefined;\n    }\n    if (options.options.length === 1) {\n      return options.options[0].cb();\n    }\n    return options;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Soil Enrichment",
  "tags" : [ "microbe", "plant" ],
  "cost" : 6,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/SoilEnrichment.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\nimport {IPlayer} from '../../IPlayer';\nimport {CardResource} from '../../../common/CardResource';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {Resource} from '../../../common/Resource';\n\nexport class SoilEnrichment extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.SOIL_ENRICHMENT,\n      tags: [Tag.MICROBE, Tag.PLANT],\n      cost: 6,\n\n      metadata: {\n        description: 'Spend 1 microbe from ANY of your cards to gain 5 plants',\n        cardNumber: 'X67',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().resource(CardResource.MICROBE).asterix().nbsp.plus().plants(5, {digit});\n        }),\n      },\n    });\n  }\n\n  private eligibleCards(player: IPlayer) {\n    return player.getCardsWithResources(CardResource.MICROBE);\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.eligibleCards(player).length > 0;\n  }\n\n  public override play(player: IPlayer) {\n    return new SelectCard('Select card to remove 1 microbe from', 'Select', this.eligibleCards(player))\n      .andThen(([card]) => {\n        player.removeResourceFrom(card);\n        player.stock.add(Resource.PLANTS, 5);\n        player.game.log('${0} removed 1 microbe from ${1} to gain 5 plants', (b) => b.player(player).card(card));\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "City Park",
  "tags" : [ "plant" ],
  "victoryPoints" : 2,
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "cities" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/CityPark.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class CityPark extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.CITY_PARK,\n      tags: [Tag.PLANT],\n      cost: 7,\n      victoryPoints: 2,\n\n      requirements: {cities: 3},\n\n      behavior: {\n        stock: {plants: 2},\n      },\n\n      metadata: {\n        cardNumber: 'X71',\n        description: 'Requires that you have 3 cities. Gain 2 plants.',\n        renderData: CardRenderer.builder((b) => {\n          b.plants(2);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Supermarkets",
  "tags" : [ ],
  "victoryPoints" : 1,
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "cities" : 2,
    "all" : true,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Supermarkets.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class Supermarkets extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SUPERMARKETS,\n      cost: 8,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {megacredits: 2},\n      },\n\n      requirements: {cities: 2, all},\n      metadata: {\n        cardNumber: 'X68',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(2));\n        }),\n        description: 'Requires two cities in play. Increase your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Hospitals",
  "tags" : [ "building" ],
  "victoryPoints" : 1,
  "cost" : 8,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Disease",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Hospitals.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IActionCard} from '../ICard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Resource} from '../../../common/Resource';\nimport {Board} from '../../boards/Board';\nimport {Space} from '../../boards/Space';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {all} from '../Options';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class Hospitals extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.HOSPITALS,\n      cost: 8,\n      tags: [Tag.BUILDING],\n      resourceType: CardResource.DISEASE,\n\n      behavior: {\n        production: {energy: -1},\n      },\n\n      victoryPoints: 1,\n      metadata: {\n        cardNumber: 'X69',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Each time a city is placed, gain a disease here.', (eb) => {\n            eb.city({size: Size.SMALL, all}).startEffect.resource(CardResource.DISEASE);\n          }).br;\n          b.action('Remove a disease from ANY OF YOUR CARDS to gain 1 Mâ‚¬ per city in play.', (ab) => {\n            ab.resource(CardResource.DISEASE).asterix().startAction.megacredits(1).slash().city({size: Size.SMALL, all});\n          }).br;\n          b.production((pb) => pb.minus().energy(1));\n        }),\n        description: {\n          text: 'Decrease your energy production 1 step.',\n          align: 'left',\n        },\n      },\n    });\n  }\n\n  public canAct(player: IPlayer) {\n    return player.getResourceCount(CardResource.DISEASE) > 0;\n  }\n\n  public onTilePlaced(cardowner: IPlayer, _activePlayer: IPlayer, space: Space) {\n    if (Board.isCitySpace(space)) {\n      cardowner.addResourceTo(this, {qty: 1, log: true});\n    }\n  }\n\n  public action(player: IPlayer) {\n    const diseaseCards = player.getCardsWithResources(CardResource.DISEASE);\n    const game = player.game;\n\n    const input = new SelectCard('Remove a disease from ANY OF YOUR CARD to gain 1Mâ‚¬ per city in play',\n      'Choose a card to remove 1 disease.',\n      diseaseCards)\n      .andThen(([card]) => {\n        player.removeResourceFrom(card, 1);\n        player.stock.add(Resource.MEGACREDITS, (game.board.getCities()).length, {log: true});\n        return undefined;\n      });\n    if (diseaseCards.length === 0) {\n      return undefined;\n    }\n    if (diseaseCards.length === 1) {\n      input.cb(diseaseCards);\n      return undefined;\n    }\n    return input;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Casinos",
  "tags" : [ "building" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ {
    "cities" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Casinos.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\n// Note: Casinos comes from WSBG.\n// https://boardgamegeek.com/thread/3375070/wsbg-promo-card\n\nexport class Casinos extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 5,\n      name: CardName.CASINOS,\n      tags: [Tag.BUILDING],\n      type: CardType.AUTOMATED,\n      behavior: {\n        production: {energy: -1, megacredits: 4},\n      },\n      requirements: {cities: 1},\n\n      metadata: {\n        cardNumber: 'X72',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.minus().energy(1).plus().megacredits(4));\n        }),\n        description: 'Requires that you have a city. Decrease your energy production 1 step and increase your Mâ‚¬ production 4 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Arcadian Communities",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 40,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/ArcadianCommunities.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {Space} from '../../boards/Space';\nimport {IActionCard} from '../ICard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {digit} from '../Options';\n\nexport class ArcadianCommunities extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.ARCADIAN_COMMUNITIES,\n      startingMegaCredits: 40,\n      initialActionText: 'Place a community (player marker) on a non-reserved area',\n\n      behavior: {\n        stock: {steel: 10},\n      },\n\n      metadata: {\n        cardNumber: 'R44',\n        description: 'You start with 40 Mâ‚¬ and 10 steel. AS YOUR FIRST ACTION, PLACE A COMMUNITY [PLAYER MARKER] ON A NON-RESERVED AREA.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.megacredits(40).nbsp.steel(10, {digit}).nbsp.community().asterix();\n          b.corpBox('action', (ce) => {\n            ce.text('ACTION: PLACE A COMMUNITY (PLAYER MARKER) ON A NON-RESERVED AREA ADJACENT TO ONE OF YOUR TILES OR MARKED AREAS.', Size.TINY, true);\n            ce.vSpace(Size.MEDIUM);\n            ce.text('EFFECT: MARKED AREAS ARE RESERVED FOR YOU. WHEN YOU PLACE A TILE THERE, GAIN 3 Mâ‚¬.', Size.TINY, true);\n          });\n        }),\n      },\n    });\n  }\n\n  public initialAction(player: IPlayer) {\n    return new SelectSpace(\n      'Select space for claim',\n      player.game.board.getAvailableSpacesOnLand(player))\n      .andThen((space: Space) => {\n        space.player = player;\n        player.game.log('${0} placed a Community (player marker)', (b) => b.player(player));\n        return undefined;\n      });\n  }\n\n  public getAvailableSpacesForMarker(player: IPlayer): Array<Space> {\n    const board = player.game.board;\n    const candidateSpaces = board.getAvailableSpacesOnLand(player);\n    const spaces = candidateSpaces.filter((space) => {\n      // Exclude spaces that already have a player marker.\n      if (space.player !== undefined) return false;\n      const adjacentSpaces = board.getAdjacentSpaces(space);\n      return adjacentSpaces.find((adj) => adj.player === player) !== undefined;\n    });\n      // Remove duplicates\n    return spaces.filter((space, index) => spaces.indexOf(space) === index);\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return this.getAvailableSpacesForMarker(player).length > 0;\n  }\n\n  public action(player: IPlayer) {\n    return new SelectSpace('Select space for claim', this.getAvailableSpacesForMarker(player))\n      .andThen((space) => {\n        space.player = player;\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Astrodrill",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Asteroid",
  "startingMegaCredits" : 40,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Astrodrill.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {IActionCard} from '../ICard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {LogHelper} from '../../LogHelper';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {digit} from '../Options';\n\nexport class Astrodrill extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.ASTRODRILL,\n      tags: [Tag.SPACE],\n      startingMegaCredits: 40,\n      resourceType: CardResource.ASTEROID,\n\n      behavior: {\n        addResources: 3,\n      },\n\n      metadata: {\n        cardNumber: 'R21',\n        description: 'You start with 40 Mâ‚¬ and 3 asteroid resources.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.megacredits(40).nbsp.resource(CardResource.ASTEROID, {amount: 3, digit});\n          b.corpBox('action', (ce) => {\n            ce.vSpace(Size.LARGE);\n            ce.action(undefined, (eb) => {\n              eb.empty().startAction.resource(CardResource.ASTEROID).asterix().slash().wild(1).or();\n            });\n            ce.vSpace();\n            ce.action('Add an asteroid resource to ANY card OR gain any standard resource, OR remove an asteroid resource from this card to gain 3 titanium.', (eb) => {\n              eb.resource(CardResource.ASTEROID).startAction.titanium(3, {digit});\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public canAct(): boolean {\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    const asteroidCards = player.getResourceCards(CardResource.ASTEROID);\n    const opts = [];\n\n    const gainStandardResource = new SelectOption('Gain a standard resource', 'Gain').andThen(() => {\n      return new OrOptions(\n        new SelectOption('Gain 1 titanium', 'Gain titanium').andThen(() => {\n          player.stock.add(Resource.TITANIUM, 1, {log: true});\n          return undefined;\n        }),\n        new SelectOption('Gain 1 steel', 'Gain steel').andThen(() => {\n          player.stock.add(Resource.STEEL, 1, {log: true});\n          return undefined;\n        }),\n        new SelectOption('Gain 1 plant', 'Gain plant').andThen(() => {\n          player.stock.add(Resource.PLANTS, 1, {log: true});\n          return undefined;\n        }),\n        new SelectOption('Gain 1 energy', 'Gain energy').andThen(() => {\n          player.stock.add(Resource.ENERGY, 1, {log: true});\n          return undefined;\n        }),\n        new SelectOption('Gain 1 heat', 'Gain heat').andThen(() => {\n          player.stock.add(Resource.HEAT, 1, {log: true});\n          return undefined;\n        }),\n        new SelectOption('Gain 1 Mâ‚¬', 'Gain Mâ‚¬').andThen(() => {\n          player.stock.add(Resource.MEGACREDITS, 1, {log: true});\n          return undefined;\n        }),\n      );\n    });\n\n    const addResourceToSelf = new SelectOption('Add 1 asteroid to this card', 'Add asteroid').andThen(() => {\n      player.addResourceTo(this, {log: true});\n\n      return undefined;\n    });\n\n    const addResource = new SelectCard(\n      'Select card to add 1 asteroid',\n      'Add asteroid',\n      asteroidCards)\n      .andThen(([card]) => {\n        player.addResourceTo(card, {log: true});\n        return undefined;\n      });\n\n    const spendResource = new SelectOption('Remove 1 asteroid on this card to gain 3 titanium', 'Remove asteroid').andThen(() => {\n      this.resourceCount--;\n      player.titanium += 3;\n      LogHelper.logRemoveResource(player, this, 1, 'gain 3 titanium');\n\n      return undefined;\n    });\n\n    if (this.resourceCount > 0) opts.push(spendResource);\n    asteroidCards.length === 1 ? opts.push(addResourceToSelf) : opts.push(addResource);\n    opts.push(gainStandardResource);\n\n    return new OrOptions(...opts);\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Factorum",
  "tags" : [ "power", "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 37,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Factorum.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IActionCard} from '../ICard';\nimport {Resource} from '../../../common/Resource';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {TITLES} from '../../inputs/titles';\n\nexport class Factorum extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.FACTORUM,\n      tags: [Tag.POWER, Tag.BUILDING],\n      startingMegaCredits: 37,\n\n      behavior: {\n        production: {steel: 2},\n      },\n\n      metadata: {\n        cardNumber: 'R22',\n        description: 'You start with 37 Mâ‚¬. Increase your steel production 2 step.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(37).nbsp.production((pb) => pb.steel(2));\n          b.corpBox('action', (ce) => {\n            ce.vSpace(Size.LARGE);\n            ce.action('Increase your energy production 1 step IF YOU HAVE NO ENERGY RESOURCES, or spend 3Mâ‚¬ to draw a building card.', (eb) => {\n              eb.empty().arrow().production((pb) => pb.energy(1)).asterix();\n              eb.or().megacredits(3).startAction.cards(1, {secondaryTag: Tag.BUILDING});\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.energy === 0 || player.canAfford(3);\n  }\n\n  public action(player: IPlayer) {\n    const increaseEnergy = new SelectOption(\n      'Increase your energy production 1 step',\n      'Increase production')\n      .andThen(() => {\n        player.production.add(Resource.ENERGY, 1, {log: true});\n        return undefined;\n      });\n\n    const drawBuildingCard = new SelectOption('Spend 3 Mâ‚¬ to draw a building card', 'Draw card')\n      .andThen(() => {\n        player.game.defer(new SelectPaymentDeferred(player, 3, {title: TITLES.payForCardAction(this.name)}))\n          .andThen(() => player.drawCard(1, {tag: Tag.BUILDING}));\n        return undefined;\n      });\n\n    if (player.energy > 0) return drawBuildingCard;\n    if (!player.canAfford(3)) return increaseEnergy;\n\n    return new OrOptions(increaseEnergy, drawBuildingCard);\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Pharmacy Union",
  "tags" : [ "microbe", "microbe" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Disease",
  "startingMegaCredits" : 48,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/PharmacyUnion.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {ICorporationCard} from '../corporation/ICorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {ICard} from '../ICard';\nimport {Priority} from '../../deferredActions/Priority';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Resource} from '../../../common/Resource';\nimport {all, digit} from '../Options';\nimport {SerializedCard} from '../../SerializedCard';\n\nexport class PharmacyUnion extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.PHARMACY_UNION,\n      startingMegaCredits: 48, // 54 minus 8 for the 2 diseases\n      resourceType: CardResource.DISEASE,\n\n      behavior: {\n        drawCard: {count: 1, tag: Tag.SCIENCE},\n        addResources: 2,\n      },\n\n      metadata: {\n        cardNumber: 'R39',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(56).cards(1, {secondaryTag: Tag.SCIENCE});\n          // blank space after MC is on purpose\n          b.text('(You start with 56 Mâ‚¬ . Draw a Science card.)', Size.TINY, false, false);\n          b.corpBox('effect', (ce) => {\n            ce.vSpace(Size.LARGE);\n            ce.effect(undefined, (eb) => {\n              eb.tag(Tag.MICROBE, {all}).startEffect.resource(CardResource.DISEASE).megacredits(-4);\n            });\n            ce.vSpace();\n            ce.effect('When ANY microbe tag is played, add a disease here and lose 4 Mâ‚¬ or as much as possible. When you play a science tag, remove a disease here and gain 1 TR OR if there are no diseases here, you MAY put this card face down in your EVENTS PILE to gain 3 TR.', (eb) => {\n              eb.tag(Tag.SCIENCE).startEffect.minus().resource(CardResource.DISEASE);\n              eb.tr(1, {size: Size.SMALL}).slash().tr(3, {size: Size.SMALL, digit});\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public isDisabled = false;\n\n  public override get tags() {\n    if (this.isDisabled) {\n      return [];\n    }\n    return [Tag.MICROBE, Tag.MICROBE];\n  }\n\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard) {\n    this.onCardPlayed(player, card);\n  }\n\n  private addDisease(player: IPlayer, count: number) {\n    const megaCreditsLost = Math.min(player.megaCredits, count * 4);\n    player.addResourceTo(this, count);\n    player.stock.deduct(Resource.MEGACREDITS, megaCreditsLost);\n    player.game.log('${0} added a disease to ${1} and lost ${2} Mâ‚¬', (b) => b.player(player).card(this).number(megaCreditsLost));\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    const game = player.game;\n\n    const hasScienceTag = player.tags.cardHasTag(card, Tag.SCIENCE);\n    const hasMicrobesTag = card.tags.includes(Tag.MICROBE);\n    const isPharmacyUnion = player.isCorporation(CardName.PHARMACY_UNION);\n\n    // Edge case, let player pick order of resolution (see https://github.com/bafolts/terraforming-mars/issues/1286)\n    if (isPharmacyUnion && hasScienceTag && hasMicrobesTag && this.resourceCount === 0) {\n      // TODO (Lynesth): Modify this when https://github.com/bafolts/terraforming-mars/issues/1670 is fixed\n      if (player.canAfford({cost: 0, tr: {tr: 3}})) {\n        player.defer(() => {\n          const orOptions = new OrOptions(\n            new SelectOption('Turn it face down to gain 3 TR and lose up to 4 Mâ‚¬').andThen(() => {\n              this.isDisabled = true;\n              player.increaseTerraformRating(3);\n              const megaCreditsLost = Math.min(player.megaCredits, 4);\n              player.stock.deduct(Resource.MEGACREDITS, megaCreditsLost);\n              game.log('${0} turned ${1} face down to gain 3 TR and lost ${2} Mâ‚¬', (b) => b.player(player).card(this).number(megaCreditsLost));\n              return undefined;\n            }),\n            new SelectOption('Add a disease to it and lose up to 4 Mâ‚¬, then remove a disease to gain 1 TR').andThen(() => {\n              const megaCreditsLost = Math.min(player.megaCredits, 4);\n              player.increaseTerraformRating();\n              player.stock.deduct(Resource.MEGACREDITS, megaCreditsLost);\n              game.log('${0} added a disease to ${1} and lost ${2} Mâ‚¬', (b) => b.player(player).card(this).number(megaCreditsLost));\n              game.log('${0} removed a disease from ${1} to gain 1 TR', (b) => b.player(player).card(this));\n              return undefined;\n            }),\n          );\n          orOptions.title = 'Choose the order of tag resolution for Pharmacy Union';\n          return orOptions;\n        }, Priority.PHARMACY_UNION);\n        return undefined;\n      }\n    }\n\n    if (isPharmacyUnion && hasScienceTag) {\n      const scienceTags = player.tags.cardTagCount(card, Tag.SCIENCE);\n      this.onScienceTagAdded(player, scienceTags);\n    }\n\n\n    if (hasMicrobesTag) {\n      player.defer(() => {\n        const microbeTagCount = card.tags.filter((cardTag) => cardTag === Tag.MICROBE).length;\n        const player = game.getCardPlayerOrThrow(this.name);\n        this.addDisease(player, microbeTagCount);\n        return undefined;\n      }, Priority.PHARMACY_UNION);\n    }\n  }\n\n  public onColonyAddedToLeavitt(player: IPlayer) {\n    this.onScienceTagAdded(player, 1);\n  }\n  public onScienceTagAdded(player: IPlayer, count: number) {\n    const game = player.game;\n    for (let i = 0; i < count; i++) {\n      player.defer(() => {\n        if (this.isDisabled) return undefined;\n\n        if (this.resourceCount > 0) {\n          if (player.canAfford({cost: 0, tr: {tr: 1}}) === false) {\n            // TODO (Lynesth): Remove this when #1670 is fixed\n            game.log('${0} cannot remove a disease from ${1} to gain 1 TR because of unaffordable Reds policy cost', (b) => b.player(player).card(this));\n          } else {\n            player.removeResourceFrom(this, 1);\n            player.increaseTerraformRating();\n            game.log('${0} removed a disease from ${1} to gain 1 TR', (b) => b.player(player).card(this));\n          }\n          return undefined;\n        }\n\n        if (player.canAfford({cost: 0, tr: {tr: 3}}) === false) {\n          // TODO (Lynesth): Remove this when #1670 is fixed\n          game.log('${0} cannot turn ${1} face down to gain 3 TR because of unaffordable Reds policy cost', (b) => b.player(player).card(this));\n          return undefined;\n        }\n\n        return new OrOptions(\n          new SelectOption('Turn this card face down and gain 3 TR', 'Gain TR').andThen(() => {\n            this.isDisabled = true;\n            player.increaseTerraformRating(3);\n            game.log('${0} turned ${1} face down to gain 3 TR', (b) => b.player(player).card(this));\n            return undefined;\n          }),\n          new SelectOption('Do nothing', 'Do nothing'),\n        );\n      }, Priority.SUPERPOWER); // Make it a priority\n    }\n  }\n\n  public serialize(serialized: SerializedCard) {\n    serialized.isDisabled = this.isDisabled;\n  }\n\n  public deserialize(serialized: SerializedCard) {\n    this.isDisabled = Boolean(serialized.isDisabled);\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Philares",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 44,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Philares.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Space} from '../../boards/Space';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Priority} from '../../deferredActions/Priority';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {BoardType} from '../../boards/BoardType';\nimport {all} from '../Options';\nimport {SelectResources} from '../../inputs/SelectResources';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class Philares extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.PHILARES,\n      tags: [Tag.BUILDING],\n      startingMegaCredits: 44,\n\n      firstAction: {\n        text: 'Place a greenery tile and raise the oxygen 1 step',\n        greenery: {},\n      },\n\n      metadata: {\n        cardNumber: 'R25',\n        hasExternalHelp: true,\n        description: 'You start with 44 Mâ‚¬. As your first action, place a greenery tile and raise the oxygen 1 step.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(44).nbsp.greenery();\n          b.corpBox('effect', (ce) => {\n            ce.effect('Each new adjacency between your tile and an opponent\\'s tile gives you a standard resource of your choice [regardless of who just placed a tile].', (eb) => {\n              eb.emptyTile('normal', {size: Size.SMALL, all}).nbsp;\n              eb.emptyTile('normal', {size: Size.SMALL}).startEffect.wild(1);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space, boardType: BoardType) {\n    // Nerfing on The Moon.\n    if (boardType !== BoardType.MARS) {\n      return;\n    }\n\n    if (space.player === undefined) {\n      return;\n    }\n    const adjacentSpaces = cardOwner.game.board.getAdjacentSpaces(space);\n    const adjacentSpacesWithPlayerTiles = adjacentSpaces.filter((space) => space.tile !== undefined && space.player !== undefined);\n\n    const eligibleTiles = (cardOwner.id === activePlayer.id) ?\n      adjacentSpacesWithPlayerTiles.filter((space) => space.player?.id !== cardOwner.id) :\n      adjacentSpacesWithPlayerTiles.filter((space) => space.player?.id === cardOwner.id);\n\n    const count = eligibleTiles.length;\n    if (count > 0) {\n      cardOwner.defer(() => {\n        cardOwner.game.log('${0} must select ${1} bonus resource(s) from ${2}\\' ability', (b) => b.player(cardOwner).number(count).card(this));\n        return new SelectResources(message('Gain ${0} standard resources', (b) => b.number(count)), count)\n          .andThen((units) => {\n            cardOwner.stock.addUnits(units, {log: true});\n            return undefined;\n          });\n      },\n      cardOwner.id !== activePlayer.id ? Priority.OPPONENT_TRIGGER : Priority.GAIN_RESOURCE_OR_PRODUCTION,\n      );\n    }\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Mons Insurance",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 48,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/MonsInsurance.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\nexport class MonsInsurance extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.MONS_INSURANCE,\n      startingMegaCredits: 48,\n\n      behavior: {\n        production: {megacredits: 4},\n      },\n\n      metadata: {\n        cardNumber: 'R46',\n        description: 'You start with 48 Mâ‚¬. Increase your Mâ‚¬ production 4 steps. ALL OPPONENTS DECREASE THEIR Mâ‚¬ production 3 STEPS. THIS DOES NOT TRIGGER THE EFFECT BELOW.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(48).production((pb) => {\n            pb.megacredits(4).nbsp.megacredits(-3, {all}).asterix();\n          });\n          b.corpBox('effect', (cb) => {\n            cb.vSpace(Size.SMALL);\n            cb.effect('When a player causes another player to decrease production or lose resources, pay 3Mâ‚¬ to the victim, or as much as possible.', (eb) => {\n              eb.production((pb) => pb.wild(1, {all})).or().minus().wild(1, {all});\n              eb.startEffect.text('pay', Size.SMALL, true).megacredits(3);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    for (const p of player.getOpponents()) {\n      p.production.add(Resource.MEGACREDITS, -3, {log: true});\n    }\n    player.game.monsInsuranceOwner = player.id;\n    return undefined;\n  }\n\n  // When `insured` is undefined, it's the neutral player.\n  public payDebt(player: IPlayer, claimant : IPlayer | undefined) {\n    if (player !== claimant) {\n      const retribution = Math.min(player.megaCredits, 3);\n      if (claimant) claimant.megaCredits += retribution;\n      player.stock.deduct(Resource.MEGACREDITS, retribution);\n      if (retribution > 0) {\n        if (claimant !== undefined) {\n          player.game.log('${0} received ${1} Mâ‚¬ from ${2} owner (${3})', (b) =>\n            b.player(claimant)\n              .number(retribution)\n              .cardName(CardName.MONS_INSURANCE)\n              .player(player));\n        } else {\n          player.game.log('Neutral player received ${0} Mâ‚¬ from ${1} owner (${2})', (b) =>\n            b.number(retribution)\n              .cardName(CardName.MONS_INSURANCE)\n              .player(player));\n        }\n      }\n    }\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Recyclon",
  "tags" : [ "microbe", "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Microbe",
  "startingMegaCredits" : 38,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Recyclon.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Resource} from '../../../common/Resource';\nimport {CardResource} from '../../../common/CardResource';\nimport {ICorporationCard} from '../corporation/ICorporationCard';\nimport {ICard} from '../ICard';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class Recyclon extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.RECYCLON,\n      tags: [Tag.MICROBE, Tag.BUILDING],\n      startingMegaCredits: 38,\n      resourceType: CardResource.MICROBE,\n\n      behavior: {\n        production: {steel: 1},\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: 'R26',\n        description: 'You start with 38 Mâ‚¬ and 1 steel production.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.megacredits(38).nbsp.production((pb) => pb.steel(1));\n          b.corpBox('effect', (ce) => {\n            ce.effect('When you play a building tag, including this, gain 1 microbe to this card, or remove 1 microbe here and raise your plant production 1 step.', (eb) => {\n              eb.tag(Tag.BUILDING).colon().resource(CardResource.MICROBE).or();\n              eb.resource(CardResource.MICROBE, {amount: 1, digit}).startEffect.production((pb) => pb.plants(1));\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard) {\n    if (!player.isCorporation(this.name)) {\n      return undefined;\n    }\n\n    if (card.tags.includes(Tag.BUILDING) === false || !player.isCorporation(this.name)) {\n      return undefined;\n    }\n    if (this.resourceCount < 1) {\n      player.addResourceTo(this);\n      return undefined;\n    }\n\n    const addResource = new SelectOption('Add a microbe resource to this card', 'Add microbe').andThen(() => {\n      player.addResourceTo(this);\n      return undefined;\n    });\n\n    const spendResource = new SelectOption('Remove 1 microbe on this card and increase plant production 1 step', 'Remove microbes').andThen(() => {\n      player.removeResourceFrom(this, 1);\n      player.production.add(Resource.PLANTS, 1);\n      return undefined;\n    });\n    return new OrOptions(spendResource, addResource);\n  }\n\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard) {\n    return this.onCardPlayed(player, card);\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Splice",
  "tags" : [ "microbe" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 46,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Splice.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {ICorporationCard} from '../corporation/ICorporationCard';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Resource} from '../../../common/Resource';\nimport {all} from '../Options';\nimport {message} from '../../logs/MessageBuilder';\nimport {ICard} from '../ICard';\nimport {GainResources} from '../../deferredActions/GainResources';\n\nexport class Splice extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.SPLICE,\n      tags: [Tag.MICROBE],\n      startingMegaCredits: 46, // 44 + 2 as card resolution when played\n\n      firstAction: {\n        text: 'Draw 3 cards with a microbe tag',\n        drawCard: {count: 3, tag: Tag.MICROBE},\n      },\n\n      metadata: {\n        cardNumber: 'R28',\n        description: 'Start with 42 Mâ‚¬. First action, draw cards until 3 microbe tags, discard the rest.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(42).nbsp.cards(3, {secondaryTag: Tag.MICROBE});\n          b.corpBox('effect', (ce) => {\n            ce.vSpace(Size.LARGE);\n            ce.effect(undefined, (eb) => {\n              eb.tag(Tag.MICROBE, {all}).startEffect;\n              eb.megacredits(2, {all}).or().resource(CardResource.MICROBE, {all}).asterix();\n            });\n            ce.vSpace();\n            ce.effect('when a microbe tag is played, incl. this, THAT PLAYER gains 2 Mâ‚¬, or adds a microbe to THAT card, and you gain 2 Mâ‚¬.', (eb) => {\n              eb.tag(Tag.MICROBE, {all}).startEffect;\n              eb.megacredits(2);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard) {\n    return this.onCardPlayed(player, card);\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard): undefined {\n    const game = player.game;\n    const microbeTags = player.tags.cardTagCount(card, Tag.MICROBE);\n    if (microbeTags === 0) {\n      return;\n    }\n\n    const gain = microbeTags * 2;\n\n    const gainResource = new SelectOption('Add a microbe resource to this card', 'Add microbe').andThen(() => {\n      player.addResourceTo(card);\n      return undefined;\n    });\n\n    const gainMC = new SelectOption(\n      message('Gain ${0} Mâ‚¬', (b) => b.number(gain)),\n      'Gain Mâ‚¬')\n      .andThen(() => {\n        game.defer(new GainResources(player, Resource.MEGACREDITS, {count: gain, log: true, from: this}));\n        return undefined;\n      });\n\n    // Splice owner gets 2Mâ‚¬ per microbe tag\n    const cardPlayer = game.getCardPlayerOrThrow(this.name);\n    game.defer(new GainResources(cardPlayer, Resource.MEGACREDITS, {count: gain, log: true, from: this}));\n\n    if (card.resourceType === CardResource.MICROBE) {\n      // Card player chooses between 2 Mâ‚¬ and a microbe on card, if possible\n      player.defer(new OrOptions(gainResource, gainMC));\n    } else {\n      gainMC.cb(undefined);\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Tycho Magnetics",
  "tags" : [ "power", "science" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 32,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/TychoMagnetics.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {Resource} from '../../../common/Resource';\nimport {IPlayer} from '../../IPlayer';\nimport {SelectAmount} from '../../inputs/SelectAmount';\n\nexport class TychoMagnetics extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.TYCHO_MAGNETICS,\n      tags: [Tag.POWER, Tag.SCIENCE],\n      startingMegaCredits: 32,\n      behavior: {\n        production: {energy: 2},\n      },\n\n      metadata: {\n        cardNumber: 'XC02', // Rename\n        description: 'You start with 33 Mâ‚¬. Increase your energy production 2 steps.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.production((pb) => pb.energy(2)).nbsp.megacredits(33);\n          b.corpBox('action', (cb) => {\n            cb.action('Spend any amount of energy to draw the that many cards. Keep 1 and discard the rest.', (ab) => {\n              ab.text('X').energy(1).startAction.text('X').cards(1).text('KEEP 1');\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  // TODO(kberg): this is a direct copy from hi-tech lab.\n  public canAct(player: IPlayer): boolean {\n    return player.energy > 0 && player.game.projectDeck.canDraw(1);\n  }\n\n  public action(player: IPlayer) {\n    const max = Math.min(player.energy, player.game.projectDeck.size());\n    return new SelectAmount('Select amount of energy to spend', 'OK', 1, max)\n      .andThen((amount) => {\n        player.stock.deduct(Resource.ENERGY, amount);\n        player.game.log('${0} spent ${1} energy', (b) => b.player(player).number(amount));\n        if (amount === 1) {\n          player.drawCard();\n          return undefined;\n        }\n        player.drawCardKeepSome(amount, {keepMax: 1});\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Kuiper Cooperative",
  "tags" : [ "space", "space" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Asteroid",
  "startingMegaCredits" : 43,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/KuiperCooperative.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {IActionCard} from '../ICard';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class KuiperCooperative extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.KUIPER_COOPERATIVE,\n      tags: [Tag.SPACE, Tag.SPACE],\n      startingMegaCredits: 43,\n      resourceType: CardResource.ASTEROID,\n\n      behavior: {\n        production: {titanium: 1},\n      },\n\n      metadata: {\n        cardNumber: 'XC01', // Rename\n        description: 'You start with 43 Mâ‚¬. Increase titanium production 1 step.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(43).production((pb) => pb.titanium(1)).br;\n          b.action('Add 1 asteroid here for every space tag you have.', (ab) => {\n            ab.empty().startAction.resource(CardResource.ASTEROID).slash().tag(Tag.SPACE);\n          }).br;\n          b.effect('When you use the AQUIFER or ASTEROID standard projects, you can spend asteroids on card as 1Mâ‚¬ each.', (eb) => {\n            eb.plate('Standard Project', {size: Size.SMALL}).asterix().startEffect.resource(CardResource.ASTEROID).equals().megacredits(1);\n          });\n        }),\n      },\n    });\n  }\n\n  public action(player: IPlayer) {\n    player.addResourceTo(this, {qty: player.tags.count(Tag.SPACE), log: true});\n    return undefined;\n  }\n\n  public canAct(): boolean {\n    return true;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "New Partner",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/NewPartner.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludesExpansion} from '../../preludes/PreludesExpansion';\n\nexport class NewPartner extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.NEW_PARTNER,\n\n      behavior: {\n        production: {megacredits: 1},\n      },\n\n      metadata: {\n        cardNumber: 'X42',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1)).prelude().asterix();\n        }),\n        description: 'Raise your Mâ‚¬ production 1 step. Immediately draw 2 prelude cards. Play 1 of them, and discard the other.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    const game = player.game;\n    if (!game.preludeDeck.canDraw(2)) {\n      this.warnings.add('deckTooSmall');\n    }\n    return true;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    const cards = game.preludeDeck.drawN(game, 2);\n    return PreludesExpansion.selectPreludeToPlay(player, cards);\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Merger",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Merger.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {Size} from '../../../common/cards/render/Size';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {LogHelper} from '../../LogHelper';\nimport {ICorporationCard} from '../corporation/ICorporationCard';\nimport {CARD_COST} from '../../../common/constants';\nimport {CorporationDeck} from '../Deck';\nimport {Countable} from '../../behavior/Countable';\nimport {PreludesExpansion} from '../../preludes/PreludesExpansion';\n\nexport class Merger extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.MERGER,\n\n      metadata: {\n        cardNumber: 'X41',\n        renderData: CardRenderer.builder((b) => {\n          b.corporation().asterix().nbsp.megacredits(-42, {size: Size.SMALL});\n          b.br.br;\n        }),\n        description: 'Draw 4 corporation cards. Play one of them and discard the other 3. Then pay 42 Mâ‚¬.',\n      },\n    });\n  }\n\n  public static readonly mergerCost = 42;\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    const dealtCorps = Merger.dealCorporations(player, game.corporationDeck);\n    const enabled = dealtCorps.map((corp) => {\n      return player.canAfford(Merger.mergerCost - this.spendableMegacredits(player, corp));\n    });\n    if (enabled.some((v) => v === true) === false) {\n      PreludesExpansion.fizzle(player, this);\n      dealtCorps.forEach((corp) => game.corporationDeck.discard(corp));\n      return undefined;\n    }\n    player.defer(() => {\n      return new SelectCard('Choose corporation card to play', 'Play', dealtCorps, {enabled: enabled})\n        .andThen(([card]) => {\n          player.playAdditionalCorporationCard(card);\n          dealtCorps.forEach((corp) => {\n            if (corp.name !== card.name) {\n              game.corporationDeck.discard(corp);\n            }\n          });\n          game.defer(new SelectPaymentDeferred(player, Merger.mergerCost, {title: 'Select how to pay for Merger'}));\n          return undefined;\n        });\n    });\n    return undefined;\n  }\n\n  private static dealCorporations(player: IPlayer, corporationDeck: CorporationDeck) {\n    const game = player.game;\n    const cards = corporationDeck.drawN(game, 4);\n    if (cards.length !== 4) {\n      // Error will only occur if the deck is empty. That won't happen, but here we'll just do our best.\n      game.log('Not enough corporations while resolving ${0}', (b) => b.cardName(CardName.MERGER));\n    }\n    LogHelper.logDrawnCards(player, cards, /* privateMessage= */true);\n    return cards;\n  }\n\n  public static setCardCost(player: IPlayer) {\n    return player.corporations\n      .map((card) => (card.cardCost ?? CARD_COST) - CARD_COST) // Convert every card cost to delta from zero. (e.g. -2, 0, +2)\n      .reduce((prev, curr) => prev + curr, CARD_COST); // Add them up, and add CARD_COST back.\n  }\n\n\n  // Returns the delta of spendable MC made avialable by a merged corporation.\n  // Much of this code is similar to Player.spendableMegaCredits, but that can't\n  // be used since corp is not yet part of player's tableau.\n  //\n  // Spendable Megacredits matter if:\n  //\n  // Player has Manutech and incoming cards add MC, heat, or titanium production\n  // TO DO: Player has LTF and incoming card raises titanium value (e.g. Phobolog)\n  // TO DO: Player has LTF and incoming card adds titanium\n  // No use cases coded yet, but player has UNMO and incoming card raises TR.\n  private spendableMegacredits(player: IPlayer, corp: ICorporationCard) {\n    // short-circuit. No need for all the work below if the card\n    // comes with enough MC.\n    if (corp.startingMegaCredits >= Merger.mergerCost) {\n      return corp.startingMegaCredits;\n    }\n    const behavior = corp.behavior;\n    const stock = behavior?.stock;\n    const production = behavior?.production;\n    let sum = corp.startingMegaCredits;\n\n    // Used to filter down anything of type Countable.\n    const asNumber = (x: Countable | undefined) => typeof(x) === 'number' ? x : 0;\n\n    let incomingTitanium = asNumber(stock?.titanium);\n    // const titaniumValue = player.getTitaniumValue() + (behavior?.titanumValue ?? 0);\n    const titaniumValue = player.getTitaniumValue();\n\n    if (player.isCorporation(CardName.MANUTECH)) {\n      sum += asNumber(production?.megacredits);\n      incomingTitanium += asNumber(production?.titanium);\n    }\n    if (corp.name === CardName.LUNA_TRADE_FEDERATION || player.canUseTitaniumAsMegacredits) {\n      sum += (player.titanium + incomingTitanium) * (titaniumValue - 1);\n    }\n\n    return sum;\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Corporate Archives",
  "tags" : [ "science" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 13,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/CorporateArchives.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class CorporateArchives extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.CORPORATE_ARCHIVES,\n      tags: [Tag.SCIENCE],\n\n      behavior: {\n        drawCard: {count: 7, keep: 2},\n        stock: {megacredits: 13},\n      },\n\n      metadata: {\n        cardNumber: 'X39',\n        description: 'Gain 13 Mâ‚¬.',\n        renderData: CardRenderer.builder((b) => {\n          b.text('Look at the top 7 cards from the deck. Take 2 of them into hand and discard the other 5.', Size.SMALL, true);\n          b.br;\n          b.megacredits(13);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Double Down",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "prelude" ],
  "sourceFile" : "src/server/cards/promo/DoubleDown.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {PreludesExpansion} from '../../preludes/PreludesExpansion';\nimport {IPreludeCard, isPreludeCard} from '../prelude/IPreludeCard';\n\nexport class DoubleDown extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.DOUBLE_DOWN,\n\n      metadata: {\n        cardNumber: 'X40',\n        description: '',\n        renderData: CardRenderer.builder((b) => {\n          b.text('Copy your other prelude\\'s direct effect.', Size.SMALL, true);\n        }),\n      },\n    });\n  }\n\n  private cloneablePreludes(player: IPlayer) {\n    const cards = player.playedCards.filter(isPreludeCard)\n      .filter((card) => card.name !== this.name)\n      .filter((card) => card.canPlay(player));\n    if (player.lastCardPlayed === CardName.NEW_PARTNER) {\n      // This is a super unfortunate hack. See player.playCard for details.\n      const newPartner = player.preludeCardsInHand.filter((card) => card.name === CardName.NEW_PARTNER)[0];\n      if (newPartner !== undefined) {\n        cards.push(newPartner as IPreludeCard);\n      }\n    }\n    return cards;\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return this.cloneablePreludes(player).length> 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const preludes = this.cloneablePreludes(player);\n    if (preludes.length === 0) {\n      PreludesExpansion.fizzle(player, this);\n      return undefined;\n    }\n    return PreludesExpansion.selectPreludeToPlay(player, preludes, undefined, 'action-only');\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Anti-desertification Techniques",
  "tags" : [ "microbe", "plant" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 3,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/promo/Anti-desertificationTechniques.ts",
  "sourceCode" : ""
}, {
  "module" : "promo",
  "name" : "Giant Solar Collector",
  "tags" : [ "power", "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/promo/GiantSolarCollector.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class GiantSolarCollector extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.GIANT_SOLAR_COLLECTOR,\n      tags: [Tag.POWER, Tag.SPACE],\n\n      behavior: {\n        production: {energy: 2},\n        global: {venus: 1},\n      },\n\n      metadata: {\n        cardNumber: 'X55',\n        description: 'Increase your energy production 2 steps. Raise Venus 1 step.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(2)).venus(1);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "promo",
  "name" : "Strategic Base Planning",
  "tags" : [ "city", "building", "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : -3,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/promo/StrategicBasePlanning.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {PathfindersExpansion} from '../../pathfinders/PathfindersExpansion';\n\nexport class StrategicBasePlanning extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.STRATEGIC_BASE_PLANNING,\n      tags: [Tag.CITY, Tag.BUILDING, Tag.SPACE],\n\n      startingMegacredits: -3,\n\n      behavior: {\n        colonies: {buildColony: {}},\n        city: {},\n      },\n\n      metadata: {\n        cardNumber: 'X65',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().megacredits(3).city().colonies();\n        }),\n        description: 'Pay 3Mâ‚¬. Place a city. Place a colony.',\n      },\n    });\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.stock.deduct(Resource.MEGACREDITS, 3);\n    PathfindersExpansion.addToSolBank(player);\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "venus",
  "name" : "Aerial Mappers",
  "tags" : [ "venus" ],
  "victoryPoints" : 1,
  "cost" : 11,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/AerialMappers.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Aerosport Tournament",
  "tags" : [ ],
  "victoryPoints" : 1,
  "cost" : 7,
  "type" : "event",
  "requirements" : [ {
    "floaters" : 5,
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/AerosportTournament.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Air-Scrapping Expedition",
  "tags" : [ "venus" ],
  "cost" : 13,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Air-ScrappingExpedition.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Atalanta Planitia Lab",
  "tags" : [ "venus", "science" ],
  "victoryPoints" : 2,
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/AtalantaPlanitiaLab.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Atmoscoop",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : 1,
  "cost" : 22,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Atmoscoop.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Comet for Venus",
  "tags" : [ "space" ],
  "cost" : 11,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/CometforVenus.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Corroder Suits",
  "tags" : [ "venus" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/CorroderSuits.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Dawn City",
  "tags" : [ "city", "space" ],
  "victoryPoints" : 3,
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/DawnCity.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Deuterium Export",
  "tags" : [ "space", "venus", "power" ],
  "cost" : 11,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/DeuteriumExport.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Dirigibles",
  "tags" : [ "venus" ],
  "cost" : 11,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Dirigibles.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Extractor Balloons",
  "tags" : [ "venus" ],
  "cost" : 14,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/ExtractorBalloons.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Extremophiles",
  "tags" : [ "venus", "microbe" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 3,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Extremophiles.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Floating Habs",
  "tags" : [ "venus" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 5,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/FloatingHabs.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Forced Precipitation",
  "tags" : [ "venus" ],
  "cost" : 8,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/ForcedPrecipitation.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Freyja Biodomes",
  "tags" : [ "plant", "venus" ],
  "victoryPoints" : 2,
  "cost" : 14,
  "type" : "automated",
  "requirements" : [ {
    "venus" : 10,
    "count" : 10
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/FreyjaBiodomes.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Giant Solar Shade",
  "tags" : [ "space", "venus" ],
  "cost" : 23,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/GiantSolarShade.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "GHG Import From Venus",
  "tags" : [ "space", "venus" ],
  "cost" : 18,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/GHGImportFromVenus.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Gyropolis",
  "tags" : [ "city", "building" ],
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Gyropolis.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Hydrogen to Venus",
  "tags" : [ "space" ],
  "cost" : 11,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/HydrogentoVenus.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Io Sulphur Research",
  "tags" : [ "science", "jovian" ],
  "victoryPoints" : 2,
  "cost" : 17,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/IoSulphurResearch.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Ishtar Mining",
  "tags" : [ "venus" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ {
    "venus" : 8,
    "count" : 8
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/IshtarMining.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Jet Stream Microscrappers",
  "tags" : [ "venus" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/JetStreamMicroscrappers.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Luna Metropolis",
  "tags" : [ "city", "space", "earth" ],
  "victoryPoints" : 2,
  "cost" : 21,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/LunaMetropolis.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Local Shading",
  "tags" : [ "venus" ],
  "cost" : 3,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/LocalShading.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Maxwell Base",
  "tags" : [ "city", "venus" ],
  "victoryPoints" : 3,
  "cost" : 18,
  "type" : "active",
  "requirements" : [ {
    "venus" : 12,
    "count" : 12
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/MaxwellBase.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Rotator Impacts",
  "tags" : [ "space" ],
  "cost" : 5,
  "type" : "active",
  "requirements" : [ {
    "venus" : 14,
    "max" : true,
    "count" : 14
  } ],
  "resourceType" : "Asteroid",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/RotatorImpacts.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Sister Planet Support",
  "tags" : [ "venus", "earth" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "venus"
  }, {
    "tag" : "earth"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/SisterPlanetSupport.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Solarnet",
  "tags" : [ ],
  "victoryPoints" : 1,
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "venus"
  }, {
    "tag" : "earth"
  }, {
    "tag" : "jovian"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Solarnet.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Spin-Inducing Asteroid",
  "tags" : [ "space" ],
  "cost" : 16,
  "type" : "event",
  "requirements" : [ {
    "venus" : 10,
    "max" : true,
    "count" : 10
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Spin-InducingAsteroid.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Sponsored Academies",
  "tags" : [ "earth", "science" ],
  "victoryPoints" : 1,
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/SponsoredAcademies.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Stratopolis",
  "tags" : [ "city", "venus" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 16,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Stratopolis.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Stratospheric Birds",
  "tags" : [ "venus", "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 12,
  "type" : "active",
  "requirements" : [ {
    "venus" : 12,
    "count" : 12
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/StratosphericBirds.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Sulphur-Eating Bacteria",
  "tags" : [ "venus", "microbe" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ {
    "venus" : 6,
    "count" : 6
  } ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Sulphur-EatingBacteria.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Sulphur Exports",
  "tags" : [ "venus", "space" ],
  "cost" : 21,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/SulphurExports.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Terraforming Contract",
  "tags" : [ "earth" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "tr" : 25,
    "count" : 25
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/TerraformingContract.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Thermophiles",
  "tags" : [ "venus", "microbe" ],
  "cost" : 9,
  "type" : "active",
  "requirements" : [ {
    "venus" : 2,
    "count" : 2
  } ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Thermophiles.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Venus Governor",
  "tags" : [ "venus", "venus" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "venus",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/VenusGovernor.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Venusian Animals",
  "tags" : [ "venus", "animal", "science" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 15,
  "type" : "active",
  "requirements" : [ {
    "venus" : 22,
    "count" : 22
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/VenusianAnimals.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Venusian Insects",
  "tags" : [ "venus", "microbe" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 5,
  "type" : "active",
  "requirements" : [ {
    "venus" : 12,
    "count" : 12
  } ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/VenusianInsects.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Venusian Plants",
  "tags" : [ "venus", "plant" ],
  "victoryPoints" : 1,
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ {
    "venus" : 16,
    "count" : 16
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/VenusianPlants.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Venus Magnetizer",
  "tags" : [ "venus" ],
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/VenusMagnetizer.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Venus Soils",
  "tags" : [ "venus", "plant" ],
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/VenusSoils.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Venus Waystation",
  "tags" : [ "venus", "space" ],
  "cardDiscount" : {
    "tag" : "venus",
    "amount" : 2
  },
  "victoryPoints" : 1,
  "cost" : 9,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/VenusWaystation.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Water to Venus",
  "tags" : [ "space" ],
  "cost" : 9,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/WatertoVenus.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Luxury Foods",
  "tags" : [ ],
  "victoryPoints" : 2,
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "venus"
  }, {
    "tag" : "earth"
  }, {
    "tag" : "jovian"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/LuxuryFoods.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Neutralizer Factory",
  "tags" : [ "venus" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "venus" : 10,
    "count" : 10
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/NeutralizerFactory.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Orbital Reflectors",
  "tags" : [ "venus", "space" ],
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/OrbitalReflectors.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Omnicourt",
  "tags" : [ "building" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "venus"
  }, {
    "tag" : "earth"
  }, {
    "tag" : "jovian"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Omnicourt.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Mining Quota",
  "tags" : [ "building" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "venus"
  }, {
    "tag" : "earth"
  }, {
    "tag" : "jovian"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/MiningQuota.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Aphrodite",
  "tags" : [ "plant", "venus" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 50,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/venus/Aphrodite.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Celestic",
  "tags" : [ "venus" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "startingMegaCredits" : 45,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/venus/Celestic.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Manutech",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 35,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Manutech.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Morning Star Inc.",
  "tags" : [ "venus" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 38,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/venus/MorningStarInc..ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Viron",
  "tags" : [ "microbe" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 51,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/Viron.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Air Scrapping",
  "tags" : [ ],
  "cost" : 15,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/AirScrapping.ts",
  "sourceCode" : ""
}, {
  "module" : "venus",
  "name" : "Air Scrapping (Var)",
  "tags" : [ ],
  "cost" : 15,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/venus/AirScrapping(Var).ts",
  "sourceCode" : ""
}, {
  "module" : "colonies",
  "name" : "Airliners",
  "tags" : [ ],
  "victoryPoints" : 1,
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ {
    "floaters" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/Airliners.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Airliners extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 11,\n      name: CardName.AIRLINERS,\n      type: CardType.AUTOMATED,\n      requirements: {floaters: 3},\n      victoryPoints: 1,\n\n      behavior: {\n        production: {megacredits: 2},\n        addResourcesToAnyCard: {count: 2, type: CardResource.FLOATER},\n      },\n\n      metadata: {\n        cardNumber: 'C01',\n        description: 'Requires that you have 3 floaters. Increase your Mâ‚¬ production 2 steps. Add 2 floaters to ANY card.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(2)).br;\n          b.resource(CardResource.FLOATER, 2).asterix();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Air Raid",
  "tags" : [ ],
  "cost" : 0,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/AirRaid.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {CardResource} from '../../../common/CardResource';\nimport {RemoveResourcesFromCard} from '../../deferredActions/RemoveResourcesFromCard';\nimport {StealResources} from '../../deferredActions/StealResources';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class AirRaid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 0,\n      name: CardName.AIR_RAID,\n      type: CardType.EVENT,\n\n      metadata: {\n        cardNumber: 'C02',\n        description: 'Requires that you lose 1 floater. Steal 5 Mâ‚¬ from any player.',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().resource(CardResource.FLOATER);\n          b.text('steal', Size.MEDIUM, true).megacredits(5, {all});\n        }),\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return player.getResourceCount(CardResource.FLOATER) > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new StealResources(player, Resource.MEGACREDITS, 5));\n    player.game.defer(new RemoveResourcesFromCard(player, CardResource.FLOATER, 1, {source: 'self', blockable: false}));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Atmo Collectors",
  "tags" : [ ],
  "cost" : 15,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/AtmoCollectors.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {Size} from '../../../common/cards/render/Size';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\nimport {ActionCard} from '../ActionCard';\n\nexport class AtmoCollectors extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      cost: 15,\n      name: CardName.ATMO_COLLECTORS,\n      type: CardType.ACTIVE,\n      resourceType: CardResource.FLOATER,\n\n      behavior: {\n        addResourcesToAnyCard: {type: CardResource.FLOATER, count: 2},\n      },\n\n      action: {\n        or: {\n          behaviors: [\n            {\n              title: 'Remove 1 floater to gain 2 titanium',\n              spend: {resourcesHere: 1},\n              stock: {titanium: 2},\n            },\n            {\n              title: 'Remove 1 floater to gain 3 energy',\n              spend: {resourcesHere: 1},\n              stock: {energy: 3},\n            },\n            {\n              title: 'Remove 1 floater to gain 4 heat',\n              spend: {resourcesHere: 1},\n              stock: {heat: 4},\n            },\n            {\n              title: 'Add 1 floater to this card',\n              addResources: 1,\n            },\n          ],\n          autoSelect: true,\n        },\n      },\n\n      metadata: {\n        description: 'Add 2 floaters to ANY card.',\n        cardNumber: 'C03',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add one floater here.', (eb) => {\n            eb.empty().startAction.resource(CardResource.FLOATER).or(Size.SMALL);\n          }).br;\n          b.action('Spend 1 floater here to gain 2 titanium, or 3 energy, or 4 heat.', (eb) => {\n            eb.resource(CardResource.FLOATER).startAction.titanium(2, {digit}).slash(Size.SMALL).energy(3, {digit}).slash(Size.SMALL).heat(4, {digit});\n          }).br;\n          b.resource(CardResource.FLOATER, 2).asterix();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Community Services",
  "tags" : [ ],
  "victoryPoints" : 1,
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/CommunityServices.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class CommunityServices extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 13,\n      name: CardName.COMMUNITY_SERVICES,\n      type: CardType.AUTOMATED,\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'C04',\n        description: 'Increase your Mâ‚¬ production 1 step per CARD WITH NO TAGS, including this.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.megacredits(1);\n          }).slash().noTags();\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.production.add(Resource.MEGACREDITS, player.tags.numberOfCardsWithNoTags() + 1, {log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Conscription",
  "tags" : [ "earth" ],
  "victoryPoints" : -1,
  "cost" : 5,
  "type" : "event",
  "requirements" : [ {
    "tag" : "earth",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/Conscription.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class Conscription extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      cost: 5,\n      tags: [Tag.EARTH],\n      name: CardName.CONSCRIPTION,\n      victoryPoints: -1,\n\n      requirements: {tag: Tag.EARTH, count: 2},\n      metadata: {\n        cardNumber: 'C05',\n        renderData: CardRenderer.builder((b) => {\n          b.text('next card', Size.SMALL, true).colon().megacredits(-16);\n        }),\n        description: 'Requires 2 Earth tags. The next card you play this generation costs 16 Mâ‚¬ less.',\n      },\n    });\n  }\n\n  public override getCardDiscount(player: IPlayer) {\n    if (player.lastCardPlayed === this.name) {\n      return 16;\n    }\n    return 0;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Corona Extractor",
  "tags" : [ "space", "power" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/CoronaExtractor.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {digit} from '../Options';\n\nexport class CoronaExtractor extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.CORONA_EXTRACTOR,\n      cost: 10,\n      tags: [Tag.SPACE, Tag.POWER],\n\n      behavior: {\n        production: {energy: 4},\n      },\n\n      requirements: {tag: Tag.SCIENCE, count: 4},\n      metadata: {\n        cardNumber: 'C06',\n        description: 'Requires 4 science tags. Increase your energy production 4 steps.',\n        renderData: CardRenderer.builder((b) => b.production((pb) => pb.energy(4, {digit}))),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Cryo-Sleep",
  "tags" : [ "science" ],
  "victoryPoints" : 1,
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/Cryo-Sleep.ts",
  "sourceCode" : ""
}, {
  "module" : "colonies",
  "name" : "Earth Elevator",
  "tags" : [ "space", "earth" ],
  "victoryPoints" : 4,
  "cost" : 43,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/EarthElevator.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class EarthElevator extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 43,\n      tags: [Tag.SPACE, Tag.EARTH],\n      name: CardName.EARTH_ELEVATOR,\n      type: CardType.AUTOMATED,\n      victoryPoints: 4,\n\n      behavior: {\n        production: {titanium: 3},\n      },\n\n      metadata: {\n        description: 'Increase your titanium production 3 steps.',\n        cardNumber: 'C08',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.titanium(3));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Ecology Research",
  "tags" : [ "science", "plant", "animal", "microbe" ],
  "victoryPoints" : 1,
  "cost" : 21,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/EcologyResearch.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class EcologyResearch extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 21,\n      tags: [Tag.SCIENCE, Tag.PLANT, Tag.ANIMAL, Tag.MICROBE],\n      name: CardName.ECOLOGY_RESEARCH,\n      type: CardType.AUTOMATED,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {plants: {colonies: {colonies: {}}}},\n      },\n\n      metadata: {\n        description: 'Increase your plant production 1 step for each colony you own. Add 1 animal to ANOTHER card and 2 microbes to ANOTHER card.',\n        cardNumber: 'C09',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1).slash().colonies(1, {size: Size.SMALL})).br;\n          b.resource(CardResource.ANIMAL).asterix().nbsp.nbsp.resource(CardResource.MICROBE, 2).asterix();\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const animalCards = player.getResourceCards(CardResource.ANIMAL);\n    if (animalCards.length) {\n      player.game.defer(new AddResourcesToCard(player, CardResource.ANIMAL, {count: 1}));\n    }\n\n    const microbeCards = player.getResourceCards(CardResource.MICROBE);\n    if (microbeCards.length) {\n      player.game.defer(new AddResourcesToCard(player, CardResource.MICROBE, {count: 2}));\n    }\n\n    return undefined;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Floater Leasing",
  "tags" : [ ],
  "cost" : 3,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/FloaterLeasing.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class FloaterLeasing extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 3,\n      name: CardName.FLOATER_LEASING,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        production: {megacredits: {floaters: {}, per: 2}},\n      },\n\n      metadata: {\n        cardNumber: 'C10',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1)).slash().resource(CardResource.FLOATER, {amount: 2, digit});\n        }),\n        description: 'Increase your Mâ‚¬ production 1 step PER 2 floaters you have.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Floater Prototypes",
  "tags" : [ "science" ],
  "cost" : 2,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/FloaterPrototypes.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class FloaterPrototypes extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 2,\n      tags: [Tag.SCIENCE],\n      name: CardName.FLOATER_PROTOTYPES,\n      type: CardType.EVENT,\n\n      behavior: {\n        addResourcesToAnyCard: {type: CardResource.FLOATER, count: 2},\n      },\n\n      metadata: {\n        cardNumber: 'C11',\n        renderData: CardRenderer.builder((b) => b.resource(CardResource.FLOATER, 2).asterix()),\n        description: 'Add two floaters to ANOTHER card.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Floater Technology",
  "tags" : [ "science" ],
  "cost" : 7,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/FloaterTechnology.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {ActionCard} from '../ActionCard';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class FloaterTechnology extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      cost: 7,\n      tags: [Tag.SCIENCE],\n      name: CardName.FLOATER_TECHNOLOGY,\n      type: CardType.ACTIVE,\n\n      action: {\n        addResourcesToAnyCard: {type: CardResource.FLOATER, count: 1 /* , mustHaveCard: true */},\n      },\n\n      metadata: {\n        cardNumber: 'C12',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 floater to ANOTHER card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.FLOATER).asterix();\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Galilean Waystation",
  "tags" : [ "space" ],
  "victoryPoints" : 1,
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/GalileanWaystation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class GalileanWaystation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 15,\n      tags: [Tag.SPACE],\n      name: CardName.GALILEAN_WAYSTATION,\n      type: CardType.AUTOMATED,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {megacredits: {tag: Tag.JOVIAN, all: true}},\n      },\n\n      metadata: {\n        description: 'Increase your Mâ‚¬ production 1 step for every Jovian tag in play.',\n        cardNumber: 'C13',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1).slash().tag(Tag.JOVIAN, {all}));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Heavy Taxation",
  "tags" : [ "earth" ],
  "victoryPoints" : -1,
  "cost" : 3,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "earth",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/HeavyTaxation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class HeavyTaxation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 3,\n      tags: [Tag.EARTH],\n      name: CardName.HEAVY_TAXATION,\n      type: CardType.AUTOMATED,\n      victoryPoints: -1,\n\n      behavior: {\n        production: {megacredits: 2},\n        stock: {megacredits: 4},\n      },\n\n      requirements: {tag: Tag.EARTH, count: 2},\n      metadata: {\n        cardNumber: 'C14',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(2)).nbsp.megacredits(4);\n        }),\n        description: 'Requires 2 Earth tags. Increase your Mâ‚¬ production 2 steps, and gain 4 Mâ‚¬.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Ice Moon Colony",
  "tags" : [ "space" ],
  "cost" : 23,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/IceMoonColony.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class IceMoonColony extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 23,\n      tags: [Tag.SPACE],\n      name: CardName.ICE_MOON_COLONY,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        colonies: {buildColony: {}},\n        ocean: {},\n      },\n\n      metadata: {\n        cardNumber: 'C15',\n        renderData: CardRenderer.builder((b) => b.colonies(1).oceans(1)),\n        description: 'Place 1 colony and 1 ocean tile.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return player.colonies.getPlayableColonies().length > 0;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Impactor Swarm",
  "tags" : [ "space" ],
  "cost" : 11,
  "type" : "event",
  "requirements" : [ {
    "tag" : "jovian",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/ImpactorSwarm.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all, digit} from '../Options';\n\nexport class ImpactorSwarm extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 11,\n      tags: [Tag.SPACE],\n      name: CardName.IMPACTOR_SWARM,\n      type: CardType.EVENT,\n\n      behavior: {\n        stock: {heat: 12},\n        removeAnyPlants: 2,\n      },\n\n      requirements: {tag: Tag.JOVIAN, count: 2},\n      metadata: {\n        cardNumber: 'C16',\n        renderData: CardRenderer.builder((b) => {\n          b.heat(12, {digit}).br;\n          b.minus().plants(2, {all});\n        }),\n        description: 'Requires 2 Jovian tags. Gain 12 heat. Remove up to 2 plants from any player.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Interplanetary Colony Ship",
  "tags" : [ "space", "earth" ],
  "cost" : 12,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/InterplanetaryColonyShip.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class InterplanetaryColonyShip extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 12,\n      tags: [Tag.SPACE, Tag.EARTH],\n      name: CardName.INTERPLANETARY_COLONY_SHIP,\n      type: CardType.EVENT,\n\n      behavior: {\n        colonies: {buildColony: {}},\n      },\n\n      metadata: {\n        cardNumber: 'C17',\n        renderData: CardRenderer.builder((b) => b.colonies(1)),\n        description: 'Place a colony.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Jovian Lanterns",
  "tags" : [ "jovian" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 20,
  "type" : "active",
  "requirements" : [ {
    "tag" : "jovian"
  } ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/JovianLanterns.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Payment} from '../../../common/inputs/Payment';\n\nexport class JovianLanterns extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 20,\n      tags: [Tag.JOVIAN],\n      name: CardName.JOVIAN_LANTERNS,\n      type: CardType.ACTIVE,\n\n      resourceType: CardResource.FLOATER,\n      victoryPoints: {resourcesHere: {}, per: 2},\n      requirements: {tag: Tag.JOVIAN},\n\n      behavior: {\n        tr: 2,\n        addResourcesToAnyCard: {type: CardResource.FLOATER, count: 2},\n      },\n\n      metadata: {\n        cardNumber: 'C18',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 titanium to add 2 floaters here.', (eb) => {\n            eb.titanium(1).startAction.resource(CardResource.FLOATER, 2);\n          }).br;\n          b.tr(2).resource(CardResource.FLOATER, 2).asterix().br;\n          b.vpText('1 VP per 2 floaters here.');\n        }),\n        description: {\n          text: 'Requires 1 Jovian tag. Increase your TR 2 steps. Add 2 floaters to ANY card.',\n          align: 'left',\n        },\n      },\n    });\n  }\n\n\n  public canAct(player: IPlayer): boolean {\n    return player.titanium > 0;\n  }\n\n  public action(player: IPlayer) {\n    player.pay(Payment.of({titanium: 1}));\n    player.addResourceTo(this, {qty: 2, log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Jupiter Floating Station",
  "tags" : [ "jovian" ],
  "victoryPoints" : 1,
  "cost" : 9,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 3
  } ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/JupiterFloatingStation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {Resource} from '../../../common/Resource';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class JupiterFloatingStation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 9,\n      tags: [Tag.JOVIAN],\n      name: CardName.JUPITER_FLOATING_STATION,\n      type: CardType.ACTIVE,\n      resourceType: CardResource.FLOATER,\n      requirements: {tag: Tag.SCIENCE, count: 3},\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'C19',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 floater to a JOVIAN CARD.', (eb) => {\n            eb.empty().startAction.resource(CardResource.FLOATER, {secondaryTag: Tag.JOVIAN});\n          }).br;\n          b.or().br;\n          b.action('Gain 1 Mâ‚¬ for every floater here [MAX 4].', (eb) => {\n            eb.empty().startAction;\n            eb.megacredits(1).slash().resource(CardResource.FLOATER).text('[max 4]', Size.SMALL);\n          });\n        }),\n        description: {\n          text: 'Requires 3 science tags.',\n          align: 'left',\n        },\n      },\n    });\n  }\n\n\n  public canAct(): boolean {\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    return new OrOptions(\n      new SelectOption('Add 1 floater to a Jovian card', 'Add floater').andThen(() => {\n        player.game.defer(new AddResourcesToCard(player, CardResource.FLOATER, {\n          restrictedTag: Tag.JOVIAN, title: 'Add 1 floater to a Jovian card',\n        }));\n        return undefined;\n      }),\n      new SelectOption('Gain 1 Mâ‚¬ per floater here (max 4)', 'Gain Mâ‚¬').andThen(() => {\n        player.stock.add(Resource.MEGACREDITS, Math.min(this.resourceCount, 4), {log: true});\n        return undefined;\n      }),\n    );\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Luna Governor",
  "tags" : [ "earth", "earth" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "earth",
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/LunaGovernor.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class LunaGovernor extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 4,\n      tags: [Tag.EARTH, Tag.EARTH],\n      name: CardName.LUNA_GOVERNOR,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        production: {megacredits: 2},\n      },\n\n      requirements: {tag: Tag.EARTH, count: 3},\n      metadata: {\n        cardNumber: 'C20',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(2));\n        }),\n        description: 'Requires 3 Earth tags. Increase your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Lunar Exports",
  "tags" : [ "earth", "space" ],
  "cost" : 19,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/LunarExports.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class LunarExports extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 19,\n      tags: [Tag.EARTH, Tag.SPACE],\n      name: CardName.LUNAR_EXPORTS,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        or: {\n          behaviors: [{\n            title: 'Increase your Mâ‚¬ production 5 steps',\n            production: {megacredits: 5},\n          },\n          {\n            title: 'Increase your plant production 2 steps',\n            production: {plants: 2},\n          }],\n        },\n      },\n\n      metadata: {\n        cardNumber: 'C21',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.plants(2).or(Size.SMALL).megacredits(5);\n          });\n        }),\n        description: 'Increase your plant production 2 steps, or your Mâ‚¬ production 5 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Lunar Mining",
  "tags" : [ "earth" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/LunarMining.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class LunarMining extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 11,\n      tags: [Tag.EARTH],\n      name: CardName.LUNAR_MINING,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        production: {titanium: {tag: Tag.EARTH, per: 2}},\n      },\n\n      metadata: {\n        cardNumber: 'C22',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.titanium(1).slash().tag(Tag.EARTH, 2);\n          });\n        }),\n        description: 'Increase your titanium production 1 step for every 2 Earth tags you have in play, including this.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Martian Zoo",
  "tags" : [ "animal", "building" ],
  "victoryPoints" : 1,
  "cost" : 12,
  "type" : "active",
  "requirements" : [ {
    "cities" : 2,
    "all" : true,
    "count" : 2
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/MartianZoo.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {all} from '../Options';\n\nexport class MartianZoo extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 12,\n      tags: [Tag.ANIMAL, Tag.BUILDING],\n      name: CardName.MARTIAN_ZOO,\n      type: CardType.ACTIVE,\n      resourceType: CardResource.ANIMAL,\n      requirements: {cities: 2, all},\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'C24',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play an Earth tag, place an animal here.', (eb) => {\n            eb.tag(Tag.EARTH).startEffect.resource(CardResource.ANIMAL);\n          }).br;\n          b.action('Gain 1Mâ‚¬ per animal here.', (eb) => {\n            eb.empty().startAction.megacredits(1).slash().resource(CardResource.ANIMAL);\n          });\n        }),\n        description: {\n          text: 'Requires 2 city tiles in play.',\n          align: 'left',\n        },\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    const count = player.tags.cardTagCount(card, Tag.EARTH);\n    if (count > 0) {\n      player.addResourceTo(this, count);\n    }\n  }\n\n  public canAct(): boolean {\n    return this.resourceCount > 0;\n  }\n\n  public action(player: IPlayer) {\n    player.stock.add(Resource.MEGACREDITS, this.resourceCount, {log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Market Manipulation",
  "tags" : [ "earth" ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/MarketManipulation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {IGame} from '../../IGame';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SelectColony} from '../../inputs/SelectColony';\nimport {LogHelper} from '../../LogHelper';\n\nexport class MarketManipulation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 1,\n      tags: [Tag.EARTH],\n      name: CardName.MARKET_MANIPULATION,\n      type: CardType.EVENT,\n\n      metadata: {\n        cardNumber: 'C23',\n        renderData: CardRenderer.builder((b) => {\n          b.text(\n            'Increase one colony tile track 1 step. Decrease another colony tile track 1 step.',\n            Size.SMALL,\n            true,\n          );\n        }),\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    const increasableColonies = this.getIncreasableColonies(player.game);\n    const decreasableColonies = this.getDecreasableColonies(player.game);\n\n    if (increasableColonies.length === 0) return false;\n    if (decreasableColonies.length === 0) return false;\n    if (\n      increasableColonies.length === 1 &&\n      decreasableColonies.length === 1 &&\n      increasableColonies[0] === decreasableColonies[0]\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private getIncreasableColonies(game: IGame) {\n    return game.colonies.filter(\n      (colony) => colony.trackPosition < 6 && colony.isActive,\n    );\n  }\n\n  private getDecreasableColonies(game: IGame) {\n    return game.colonies.filter(\n      (colony) =>\n        colony.trackPosition > colony.colonies.length && colony.isActive,\n    );\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    let increasableColonies = this.getIncreasableColonies(player.game);\n    const decreasableColonies = this.getDecreasableColonies(player.game);\n    // if there is only one decreaseable colony and it is an increaseable colony, don't allow increase of that colony.\n    if (decreasableColonies.length === 1 && increasableColonies.some((colony) => colony.name === decreasableColonies[0].name)) {\n      increasableColonies = increasableColonies.filter((colony) => colony.name !== decreasableColonies[0].name);\n    }\n    const increaseColonyTrack = new SelectColony(\n      'Select which colony tile track to increase',\n      'Increase',\n      increasableColonies)\n      .andThen(\n        (increasedColony) => {\n          increasedColony.increaseTrack();\n          LogHelper.logColonyTrackIncrease(player, increasedColony, 1);\n          const decreaseColonyTrack = new SelectColony(\n            'Select which colony tile track to decrease',\n            'Decrease',\n            decreasableColonies.filter((decreaseableColony) => decreaseableColony.name !== increasedColony.name))\n            .andThen((decreasedColony) => {\n              decreasedColony.decreaseTrack();\n              LogHelper.logColonyTrackDecrease(player, decreasedColony);\n              return undefined;\n            });\n          player.defer(decreaseColonyTrack);\n          return undefined;\n        },\n      );\n\n    player.defer(increaseColonyTrack);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Mining Colony",
  "tags" : [ "space" ],
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/MiningColony.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MiningColony extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 20,\n      tags: [Tag.SPACE],\n      name: CardName.MINING_COLONY,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        production: {titanium: 1},\n        colonies: {buildColony: {}},\n      },\n\n      metadata: {\n        cardNumber: 'C25',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.titanium(1)).colonies(1);\n        }),\n        description: 'Increase your titanium production 1 step. Place a colony.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Minority Refuge",
  "tags" : [ "space" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/MinorityRefuge.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {ColonyName} from '../../../common/colonies/ColonyName';\nimport {BuildColony} from '../../deferredActions/BuildColony';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class MinorityRefuge extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 5,\n      tags: [Tag.SPACE],\n      name: CardName.MINORITY_REFUGE,\n      type: CardType.AUTOMATED,\n\n      metadata: {\n        cardNumber: 'C26',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(-2)).colonies(1);\n        }),\n        description: 'Decrease your Mâ‚¬ production 2 steps. Place a colony.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    if (player.colonies.getPlayableColonies().length === 0) {\n      return false;\n    }\n\n    const megaCreditsProduction = player.production.megacredits;\n    if (megaCreditsProduction === -4 && player.isCorporation(CardName.POSEIDON)) {\n      return true;\n    } else if (megaCreditsProduction <= -4) {\n      const lunaIsAvailable = player.game.colonies.some((colony) =>\n        colony.name === ColonyName.LUNA &&\n        colony.isFull() === false &&\n        colony.colonies.includes(player.id) === false);\n\n      if (lunaIsAvailable === false) {\n        return false;\n      }\n      this.warnings.add('buildOnLuna');\n    }\n\n    return true;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const openColonies = player.production.megacredits <= -4 ?\n      player.game.colonies.filter((colony) => colony.name === ColonyName.LUNA) :\n      undefined;\n    player.game.defer(\n      new BuildColony(\n        player, {\n          title: 'Select colony for Minority Refuge',\n          colonies: openColonies,\n        }))\n      .andThen(() => player.production.add(Resource.MEGACREDITS, -2));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Molecular Printing",
  "tags" : [ "science" ],
  "victoryPoints" : 1,
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/MolecularPrinting.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\nexport class MolecularPrinting extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 11,\n      tags: [Tag.SCIENCE],\n      name: CardName.MOLECULAR_PRINTING,\n      type: CardType.AUTOMATED,\n      victoryPoints: 1,\n\n      behavior: {\n        stock: {megacredits: {cities: {}, colonies: {colonies: {}}, all}},\n      },\n\n      metadata: {\n        cardNumber: 'C27',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(1).slash().city({size: Size.SMALL, all}).br;\n          b.megacredits(1).slash().colonies(1, {size: Size.SMALL, all});\n        }),\n        description: 'Gain 1 Mâ‚¬ for each city tile in play. Gain 1 Mâ‚¬ for each colony in play.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Nitrogen from Titan",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : 1,
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/NitrogenfromTitan.ts",
  "sourceCode" : ""
}, {
  "module" : "colonies",
  "name" : "Pioneer Settlement",
  "tags" : [ "space" ],
  "victoryPoints" : 2,
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ {
    "colonies" : 1,
    "max" : true,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/PioneerSettlement.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {ColonyName} from '../../../common/colonies/ColonyName';\nimport {BuildColony} from '../../deferredActions/BuildColony';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {max} from '../Options';\n\nexport class PioneerSettlement extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 13,\n      tags: [Tag.SPACE],\n      name: CardName.PIONEER_SETTLEMENT,\n      type: CardType.AUTOMATED,\n      requirements: {colonies: 1, max},\n      victoryPoints: 2,\n\n      metadata: {\n        cardNumber: 'C29',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(-2));\n          b.nbsp.colonies(1);\n        }),\n        description: 'Requires that you have no more than 1 colony. Decrease your Mâ‚¬ production 2 steps. Place a colony.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    if (player.colonies.getPlayableColonies().length === 0) {\n      return false;\n    }\n\n    let lunaIsAvailable = false;\n    let coloniesCount = 0;\n    const hasOneColonyMax = player.game.colonies.every((colony) => {\n      if (colony.name === ColonyName.LUNA &&\n          colony.isFull() === false &&\n          colony.colonies.includes(player.id) === false) {\n        lunaIsAvailable = true;\n      }\n      coloniesCount += colony.colonies.filter((owner) => owner === player.id).length;\n      if (coloniesCount > 1) {\n        return false;\n      }\n      return true;\n    });\n\n    if (hasOneColonyMax === false) {\n      return false;\n    }\n\n    const megaCreditsProduction = player.production.megacredits;\n    if (megaCreditsProduction === -4 && player.isCorporation(CardName.POSEIDON)) {\n      return true;\n    } else if (megaCreditsProduction <= -4) {\n      if (lunaIsAvailable === false) {\n        return false;\n      }\n      this.warnings.add('buildOnLuna');\n    }\n\n    return true;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const openColonies = player.production.megacredits <= -4 ?\n      player.game.colonies.filter((colony) => colony.name === ColonyName.LUNA) :\n      undefined;\n    player.game.defer(new BuildColony(player, {title: 'Select colony for Pioneer Settlement', colonies: openColonies}));\n    player.production.add(Resource.MEGACREDITS, -2);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Productive Outpost",
  "tags" : [ ],
  "cost" : 0,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/ProductiveOutpost.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class ProductiveOutpost extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 0,\n      name: CardName.PRODUCTIVE_OUTPOST,\n      type: CardType.AUTOMATED,\n\n      metadata: {\n        cardNumber: 'C30',\n        renderData: CardRenderer.builder((b) => {\n          b.text('Gain all your colony bonuses.', Size.SMALL, true);\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.colonies.forEach((colony) => {\n      colony.colonies.filter((owner) => owner === player.id).forEach((owner) => {\n        // Not using GiveColonyBonus deferred action because it's only for the active player\n        player.defer(() => colony.giveColonyBonus(player.game.getPlayerById(owner)));\n      });\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Quantum Communications",
  "tags" : [ ],
  "victoryPoints" : 1,
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/QuantumCommunications.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\nexport class QuantumCommunications extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 8,\n      name: CardName.QUANTUM_COMMUNICATIONS,\n      type: CardType.AUTOMATED,\n      requirements: {tag: Tag.SCIENCE, count: 4},\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'C31',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.megacredits(1).slash().colonies(1, {size: Size.SMALL, all});\n          });\n        }),\n        description: 'Requires 4 science tags. Increase your Mâ‚¬ production 1 step for each colony in play.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    let coloniesCount = 0;\n    player.game.colonies.forEach((colony) => {\n      coloniesCount += colony.colonies.length;\n    });\n    player.production.add(Resource.MEGACREDITS, coloniesCount, {log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Red Spot Observatory",
  "tags" : [ "jovian", "science" ],
  "victoryPoints" : 2,
  "cost" : 17,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 3
  } ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/RedSpotObservatory.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class RedSpotObservatory extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 17,\n      tags: [Tag.JOVIAN, Tag.SCIENCE],\n      name: CardName.RED_SPOT_OBSERVATORY,\n      type: CardType.ACTIVE,\n      resourceType: CardResource.FLOATER,\n      victoryPoints: 2,\n\n      behavior: {\n        drawCard: 2,\n      },\n\n      requirements: {tag: Tag.SCIENCE, count: 3},\n      metadata: {\n        cardNumber: 'C32',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 floater to this card, or spend 1 floater here to draw a card.', (eb) => {\n            eb.empty().arrow().resource(CardResource.FLOATER).or();\n            eb.resource(CardResource.FLOATER).startAction.cards(1);\n          }).br;\n          b.cards(2);\n        }),\n        description: {\n          text: 'Requires 3 science tags. Draw 2 cards.',\n          align: 'left',\n        },\n      },\n    });\n  }\n\n\n  public canAct(): boolean {\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    if (this.resourceCount < 1) {\n      player.addResourceTo(this, 1);\n      return undefined;\n    }\n\n    const opts = [];\n\n    const addResource = new SelectOption('Add 1 floater on this card', 'Add floater').andThen(() => this.addResource(player));\n    const spendResource = new SelectOption('Remove 1 floater on this card to draw a card', 'Remove floater').andThen(() => this.spendResource(player));\n\n    opts.push(spendResource);\n    opts.push(addResource);\n\n    return new OrOptions(...opts);\n  }\n\n  private addResource(player: IPlayer) {\n    player.addResourceTo(this, 1);\n    return undefined;\n  }\n\n  private spendResource(player: IPlayer) {\n    this.resourceCount--;\n    player.drawCard();\n    return undefined;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Research Colony",
  "tags" : [ "space", "science" ],
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/ResearchColony.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class ResearchColony extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 20,\n      tags: [Tag.SPACE, Tag.SCIENCE],\n      name: CardName.RESEARCH_COLONY,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        drawCard: 2,\n        colonies: {buildColony: {allowDuplicates: true}},\n      },\n\n      metadata: {\n        cardNumber: 'C34',\n        renderData: CardRenderer.builder((b) => {\n          b.colonies(1).asterix().nbsp.cards(2);\n        }),\n        description: 'Place a colony. MAY BE PLACED WHERE YOU ALREADY HAVE A COLONY. Draw 2 cards.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Rim Freighters",
  "tags" : [ "space" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/RimFreighters.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class RimFreighters extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 4,\n      tags: [Tag.SPACE],\n      name: CardName.RIM_FREIGHTERS,\n      type: CardType.ACTIVE,\n\n      behavior: {\n        colonies: {tradeDiscount: 1},\n      },\n\n      metadata: {\n        cardNumber: 'C35',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you trade, you pay 1 less resource for it.', (eb) => {\n            eb.trade().startEffect.tradeDiscount(1);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Refugee Camps",
  "tags" : [ "earth" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Camp",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/RefugeeCamps.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\n\nexport class RefugeeCamps extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      cost: 10,\n      tags: [Tag.EARTH],\n      name: CardName.REFUGEE_CAMPS,\n      type: CardType.ACTIVE,\n      resourceType: CardResource.CAMP,\n      victoryPoints: {resourcesHere: {}},\n\n      action: {\n        production: {megacredits: -1},\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: 'C33',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Decrease your Mâ‚¬ production 1 step to add a camp resource to this card.', (eb) => {\n            eb.production((pb) => pb.megacredits(1));\n            eb.startAction.resource(CardResource.CAMP);\n          }).br;\n          b.vpText('1 VP for each camp resource on this card.');\n        }),\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "colonies",
  "name" : "Solar Probe",
  "tags" : [ "space", "science" ],
  "victoryPoints" : 1,
  "cost" : 9,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/SolarProbe.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {digit} from '../Options';\n\nexport class SolarProbe extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 9,\n      tags: [Tag.SPACE, Tag.SCIENCE],\n      name: CardName.SOLAR_PROBE,\n      type: CardType.EVENT,\n      victoryPoints: 1,\n\n      behavior: {\n        drawCard: {count: {tag: Tag.SCIENCE, per: 3}},\n      },\n\n      metadata: {\n        cardNumber: 'C37',\n        renderData: CardRenderer.builder((b) => {\n          b.cards(1).slash().tag(Tag.SCIENCE, {amount: 3, digit});\n        }),\n        description: 'Draw 1 card for every 3 science tags you have, including this.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Solar Reflectors",
  "tags" : [ "space" ],
  "cost" : 23,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/SolarReflectors.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {digit} from '../Options';\n\nexport class SolarReflectors extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 23,\n      tags: [Tag.SPACE],\n      name: CardName.SOLAR_REFLECTORS,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        production: {heat: 5},\n      },\n\n      metadata: {\n        cardNumber: 'C38',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.heat(5, {digit}));\n        }),\n        description: 'Increase your heat production 5 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Sky Docks",
  "tags" : [ "space", "earth" ],
  "cardDiscount" : {
    "amount" : 1
  },
  "victoryPoints" : 2,
  "cost" : 26,
  "type" : "active",
  "requirements" : [ {
    "tag" : "earth",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/SkyDocks.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class SkyDocks extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 26,\n      tags: [Tag.SPACE, Tag.EARTH],\n      name: CardName.SKY_DOCKS,\n      type: CardType.ACTIVE,\n      victoryPoints: 2,\n\n      behavior: {\n        colonies: {addTradeFleet: 1},\n      },\n\n      requirements: {tag: Tag.EARTH, count: 2},\n      cardDiscount: {amount: 1},\n      metadata: {\n        cardNumber: 'C36',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play a card, you pay 1 Mâ‚¬ less for it.', (eb) => {\n            eb.empty().startEffect.megacredits(-1);\n          }).br;\n          b.tradeFleet();\n        }),\n        description: 'Requires 2 Earth tags. Gain 1 Trade Fleet.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Space Port",
  "tags" : [ "city", "building" ],
  "cost" : 24,
  "type" : "automated",
  "requirements" : [ {
    "colonies" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/SpacePort.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class SpacePort extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 24,\n      tags: [Tag.CITY, Tag.BUILDING],\n      name: CardName.SPACE_PORT,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        production: {energy: -1, megacredits: 4},\n        colonies: {addTradeFleet: 1},\n        city: {},\n      },\n\n      requirements: {colonies: 1},\n      metadata: {\n        cardNumber: 'C39',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().megacredits(4);\n          }).nbsp.city().br;\n          b.tradeFleet();\n        }),\n        description: 'Requires 1 colony. Decrease your energy production 1 step and increase your Mâ‚¬ production 4 steps. Place a city tile. Gain 1 Trade Fleet.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Space Port Colony",
  "tags" : [ "space" ],
  "victoryPoints" : {
    "colonies" : {
      "colonies" : { }
    },
    "all" : true,
    "per" : 2
  },
  "cost" : 27,
  "type" : "automated",
  "requirements" : [ {
    "colonies" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/SpacePortColony.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all} from '../Options';\n\nexport class SpacePortColony extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 27,\n      tags: [Tag.SPACE],\n      name: CardName.SPACE_PORT_COLONY,\n      type: CardType.AUTOMATED,\n\n      requirements: {colonies: 1},\n      victoryPoints: {colonies: {colonies: {}}, all, per: 2},\n\n      behavior: {\n        colonies: {\n          buildColony: {allowDuplicates: true},\n          addTradeFleet: 1,\n        },\n      },\n\n      metadata: {\n        cardNumber: 'C40',\n        renderData: CardRenderer.builder((b) => {\n          b.colonies(1).asterix().nbsp.tradeFleet().br;\n          b.vpText('1VP per 2 colonies in play.');\n        }),\n        description: 'Requires a colony. Place a colony. MAY BE PLACED ON A COLONY TILE WHERE YOU ALREADY HAVE A COLONY. Gain 1 Trade Fleet.',\n      },\n    });\n  }\n\n  public override getVictoryPoints(player: IPlayer) {\n    let coloniesCount = 0;\n    player.game.colonies.forEach((colony) => {\n      coloniesCount += colony.colonies.length;\n    });\n    return Math.floor(coloniesCount / 2);\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Spin-off Department",
  "tags" : [ "building" ],
  "cost" : 12,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/Spin-offDepartment.ts",
  "sourceCode" : ""
}, {
  "module" : "colonies",
  "name" : "Sub-zero Salt Fish",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 5,
  "type" : "active",
  "requirements" : [ {
    "temperature" : -6,
    "count" : -6
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/Sub-zeroSaltFish.ts",
  "sourceCode" : ""
}, {
  "module" : "colonies",
  "name" : "Titan Air-scrapping",
  "tags" : [ "jovian" ],
  "victoryPoints" : 2,
  "cost" : 21,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/TitanAir-scrapping.ts",
  "sourceCode" : ""
}, {
  "module" : "colonies",
  "name" : "Titan Floating Launch-pad",
  "tags" : [ "jovian" ],
  "victoryPoints" : 1,
  "cost" : 18,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/TitanFloatingLaunch-pad.ts",
  "sourceCode" : ""
}, {
  "module" : "colonies",
  "name" : "Titan Shuttles",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : 1,
  "cost" : 23,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/TitanShuttles.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectAmount} from '../../inputs/SelectAmount';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class TitanShuttles extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 23,\n      tags: [Tag.JOVIAN, Tag.SPACE],\n      name: CardName.TITAN_SHUTTLES,\n      type: CardType.ACTIVE,\n      resourceType: CardResource.FLOATER,\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'C45',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 2 floaters to ANY JOVIAN CARD.', (eb) => {\n            eb.empty().startAction.resource(CardResource.FLOATER, {amount: 2, secondaryTag: Tag.JOVIAN});\n          }).br;\n          b.or().br;\n          b.action('Spend any number of floaters here to gain the same number of titanium.', (eb) => {\n            eb.text('x').resource(CardResource.FLOATER).startAction.text('x').titanium(1);\n          }).br;\n        }),\n      },\n    });\n  }\n\n\n  public canAct(): boolean {\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    if (this.resourceCount === 0) {\n      player.game.defer(new AddResourcesToCard(player, CardResource.FLOATER, {count: 2, restrictedTag: Tag.JOVIAN, title: 'Add 2 floaters to a Jovian card'}));\n      return undefined;\n    }\n\n    return new OrOptions(\n      new SelectOption('Add 2 floaters to a Jovian card', 'Add floaters').andThen(() => {\n        player.game.defer(new AddResourcesToCard(player, CardResource.FLOATER, {count: 2, restrictedTag: Tag.JOVIAN}));\n        return undefined;\n      }),\n      new SelectAmount(\n        'Remove X floaters on this card to gain X titanium', 'Remove floaters',\n        1, this.resourceCount, true,\n      ).andThen((amount) => {\n        player.removeResourceFrom(this, amount);\n        player.titanium += amount;\n        player.game.log('${0} removed ${1} floaters to gain ${2} titanium', (b) => b.player(player).number(amount).number(amount));\n        return undefined;\n      }),\n    );\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Trading Colony",
  "tags" : [ "space" ],
  "cost" : 18,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/TradingColony.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class TradingColony extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 18,\n      tags: [Tag.SPACE],\n      name: CardName.TRADING_COLONY,\n      type: CardType.ACTIVE,\n\n      behavior: {\n        colonies: {\n          buildColony: {},\n          tradeOffset: 1,\n        },\n      },\n\n      metadata: {\n        cardNumber: 'C47',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you trade, you may first increase that Colony Tile track 1 step.', (eb) => {\n            eb.trade().startEffect.text('+1', Size.LARGE);\n          }).br;\n          b.colonies(1);\n        }),\n        description: 'Place a colony.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Trade Envoys",
  "tags" : [ ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/TradeEnvoys.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class TradeEnvoys extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 6,\n      name: CardName.TRADE_ENVOYS,\n      type: CardType.ACTIVE,\n\n      behavior: {\n        colonies: {tradeOffset: 1},\n      },\n\n      metadata: {\n        cardNumber: 'C46',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you trade, you may first increase that Colony Tile track 1 step.', (eb) => {\n            eb.trade().startEffect.text('+1', Size.LARGE);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Urban Decomposers",
  "tags" : [ "microbe" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "colonies" : 1,
    "count" : 1
  }, {
    "cities" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/UrbanDecomposers.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class UrbanDecomposers extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 6,\n      tags: [Tag.MICROBE],\n      name: CardName.URBAN_DECOMPOSERS,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        production: {plants: 1},\n        addResourcesToAnyCard: {count: 2, type: CardResource.MICROBE},\n      },\n\n      requirements: [{colonies: 1}, {cities: 1}],\n      metadata: {\n        cardNumber: 'C48',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1)).resource(CardResource.MICROBE, 2).asterix();\n        }),\n        description: 'Requires that you have 1 city tile and 1 colony in play. Increase your plant production 1 step, and add 2 microbes to ANOTHER card.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    let coloniesCount = 0;\n    player.game.colonies.forEach((colony) => {\n      coloniesCount += colony.colonies.filter((owner) => owner === player.id).length;\n    });\n    return coloniesCount > 0 && player.game.board.getCities(player).length > 0;\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Warp Drive",
  "tags" : [ "science" ],
  "cardDiscount" : {
    "tag" : "space",
    "amount" : 4
  },
  "victoryPoints" : 2,
  "cost" : 14,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/WarpDrive.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class WarpDrive extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 14,\n      tags: [Tag.SCIENCE],\n      name: CardName.WARP_DRIVE,\n      type: CardType.ACTIVE,\n      victoryPoints: 2,\n\n      requirements: {tag: Tag.SCIENCE, count: 5},\n      cardDiscount: {tag: Tag.SPACE, amount: 4},\n      metadata: {\n        cardNumber: 'C49',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play a space card, you pay 4 Mâ‚¬ less for it.', (eb) => {\n            eb.tag(Tag.SPACE).startEffect.megacredits(-4);\n          });\n        }),\n        description: 'Requires 5 science tags.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Aridor",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 40,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/colonies/Aridor.ts",
  "sourceCode" : "import {ICorporationCard} from '../corporation/ICorporationCard';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Resource} from '../../../common/Resource';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ColoniesHandler} from '../../colonies/ColoniesHandler';\nimport {SerializedCard} from '../../SerializedCard';\nimport {ICard} from '../ICard';\n\nexport class Aridor extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.ARIDOR,\n      startingMegaCredits: 40,\n      initialActionText: 'Add a colony tile',\n\n      metadata: {\n        cardNumber: 'R20',\n        description: 'You start with 40 Mâ‚¬. As your first action, put an additional Colony Tile of your choice into play',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.megacredits(40).nbsp.colonyTile();\n          b.corpBox('effect', (ce) => {\n            ce.effect('When you get a new type of tag in play [event cards do not count], increase your Mâ‚¬ production 1 step.', (eb) => {\n              eb.diverseTag().startEffect.production((pb) => pb.megacredits(1));\n            });\n          });\n        }),\n      },\n    });\n  }\n  public allTags = new Set<Tag>();\n\n  private tagsForCard(card: ICard): Array<Tag> {\n    if (card.type === CardType.EVENT) {\n      return [];\n    }\n    return card.tags.filter((tag) => tag !== Tag.WILD);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    for (const card of player.tableau) {\n      for (const tag of this.tagsForCard(card)) {\n        this.allTags.add(tag);\n      }\n    }\n    return undefined;\n  }\n\n  public initialAction(player: IPlayer) {\n    ColoniesHandler.addColonyTile(\n      player,\n      {title: 'Aridor first action - Select colony tile to add'},\n    );\n    return undefined;\n  }\n\n  private processTags(player: IPlayer, tags: ReadonlyArray<Tag>) {\n    for (const tag of tags) {\n      const currentSize = this.allTags.size;\n      this.allTags.add(tag);\n      if (this.allTags.size > currentSize) {\n        player.game.log('${0} gained 1 Mâ‚¬ production from ${1} for ${2}', (b) => b.player(player).card(this).string(tag));\n        player.production.add(Resource.MEGACREDITS, 1, {log: true});\n      }\n    }\n  }\n\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard) {\n    return this.onCardPlayed(player, card);\n  }\n\n  public onColonyAddedToLeavitt(player: IPlayer) {\n    this.processTags(player, [Tag.SCIENCE]);\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard) {\n    if (!player.isCorporation(this.name)) {\n      return;\n    }\n    this.processTags(player, this.tagsForCard(card));\n  }\n\n  public serialize(serialized: SerializedCard) {\n    serialized.allTags = Array.from(this.allTags);\n  }\n\n  public deserialize(serialized: SerializedCard) {\n    this.allTags = new Set(serialized.allTags);\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Arklight",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Animal",
  "startingMegaCredits" : 48,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/Arklight.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Arklight extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.ARKLIGHT,\n      tags: [Tag.ANIMAL],\n      startingMegaCredits: 48,\n      resourceType: CardResource.ANIMAL,\n      victoryPoints: {resourcesHere: {}, per: 2},\n\n      behavior: {\n        production: {megacredits: 2},\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: 'R04',\n        description: 'You start with 48 Mâ‚¬. Increase your Mâ‚¬ production 2 steps. 1 VP per 2 animals on this card.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(48).nbsp.production((pb) => pb.megacredits(2));\n          b.corpBox('effect', (ce) => {\n            ce.effect('When you play an animal or plant tag, including this, add 1 animal to this card.', (eb) => {\n              eb.tag(Tag.ANIMAL).slash().tag(Tag.PLANT).startEffect.resource(CardResource.ANIMAL);\n            });\n            ce.vSpace(); // to offset the description to the top a bit so it can be readable\n          });\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard): void {\n    if (player.isCorporation(CardName.ARKLIGHT)) {\n      player.addResourceTo(this, {qty: card.tags.filter((cardTag) => cardTag === Tag.ANIMAL || cardTag === Tag.PLANT).length, log: true});\n    }\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Polyphemos",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 60,
  "cardCost" : 6,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/Polyphemos.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class Polyphemos extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.POLYPHEMOS,\n      startingMegaCredits: 60,\n      cardCost: 6,\n\n      behavior: {\n        production: {megacredits: 6},\n        stock: {titanium: 6},\n      },\n\n      metadata: {\n        cardNumber: 'R11',\n        description: 'You start with 60 Mâ‚¬. Increase your Mâ‚¬ production 6 steps. Gain 6 titanium.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.megacredits(60).nbsp.production((pb) => pb.megacredits(6)).nbsp.titanium(6, {digit});\n          b.corpBox('effect', (ce) => {\n            ce.effect('When you buy a card to hand, pay 6Mâ‚¬ instead of 3, including the starting hand.', (eb) => {\n              eb.cards(1).asterix().startEffect.megacredits(6);\n            });\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Poseidon",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 36,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/colonies/Poseidon.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\n\nexport class Poseidon extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.POSEIDON,\n      startingMegaCredits: 36,\n\n      firstAction: {\n        text: 'Place a colony',\n        // title: 'Poseidon first action - Select where to build colony\n        colonies: {buildColony: {}},\n      },\n      metadata: {\n        cardNumber: 'R02',\n        description: 'You start with 36 Mâ‚¬. As your first action, place a colony.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.megacredits(36).nbsp.colonies(1);\n          b.corpBox('effect', (ce) => {\n            ce.effect('When any colony is placed, including this, raise your Mâ‚¬ production 1 step.', (eb) => {\n              eb.colonies(1, {all}).startEffect.production((pb) => pb.megacredits(1));\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public onColonyAdded(_player: IPlayer, cardOwner: IPlayer) {\n    cardOwner.production.add(Resource.MEGACREDITS, 1, {log: true});\n  }\n}\n"
}, {
  "module" : "colonies",
  "name" : "Stormcraft Incorporated",
  "tags" : [ "jovian" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "startingMegaCredits" : 48,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/StormcraftIncorporated.ts",
  "sourceCode" : ""
}, {
  "module" : "colonies",
  "name" : "Colony",
  "tags" : [ ],
  "cost" : 17,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/colonies/Colony.ts",
  "sourceCode" : ""
}, {
  "module" : "prelude",
  "name" : "SF Memorial",
  "tags" : [ "building" ],
  "victoryPoints" : 1,
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/SFMemorial.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SFMemorial extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SF_MEMORIAL,\n      tags: [Tag.BUILDING],\n      cost: 7,\n      victoryPoints: 1,\n\n      behavior: {\n        drawCard: 1,\n      },\n\n      metadata: {\n        cardNumber: 'P41',\n        renderData: CardRenderer.builder((b) => b.cards(1)),\n        description: 'Draw 1 card.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "House Printing",
  "tags" : [ "building" ],
  "victoryPoints" : 1,
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/HousePrinting.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class HousePrinting extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.HOUSE_PRINTING,\n      tags: [Tag.BUILDING],\n      cost: 10,\n\n      behavior: {\n        production: {steel: 1},\n      },\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'P36',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.steel(1));\n        }),\n        description: 'Increase your steel production 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Space Hotels",
  "tags" : [ "space", "earth" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "earth",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/SpaceHotels.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SpaceHotels extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SPACE_HOTELS,\n      tags: [Tag.SPACE, Tag.EARTH],\n      cost: 12,\n\n      behavior: {\n        production: {megacredits: 4},\n      },\n\n      requirements: {tag: Tag.EARTH, count: 2},\n      metadata: {\n        cardNumber: 'P42',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.megacredits(4);\n          });\n        }),\n        description: 'Requires 2 Earth tags. Increase Mâ‚¬ production 4 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Martian Survey",
  "tags" : [ "science" ],
  "victoryPoints" : 1,
  "cost" : 9,
  "type" : "event",
  "requirements" : [ {
    "oxygen" : 4,
    "max" : true,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/MartianSurvey.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {max} from '../Options';\n\nexport class MartianSurvey extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.MARTIAN_SURVEY,\n      tags: [Tag.SCIENCE],\n      cost: 9,\n      victoryPoints: 1,\n\n      behavior: {\n        drawCard: 2,\n      },\n\n      requirements: {oxygen: 4, max},\n      metadata: {\n        cardNumber: 'P38',\n        renderData: CardRenderer.builder((b) => {\n          b.cards(2);\n        }),\n        description: 'Oxygen must be 4% or lower. Draw two cards.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Research Coordination",
  "tags" : [ "wild" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/ResearchCoordination.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\n\nexport class ResearchCoordination extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.RESEARCH_COORDINATION,\n      tags: [Tag.WILD],\n      cost: 4,\n\n      metadata: {\n        cardNumber: 'P40',\n        description: 'After being played, when you perform an action, the wild tag counts as any tag of your choice.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Lava Tube Settlement",
  "tags" : [ "building", "city" ],
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/LavaTubeSettlement.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {PlaceCityTile} from '../../deferredActions/PlaceCityTile';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Space} from '../../boards/Space';\n\nexport class LavaTubeSettlement extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.LAVA_TUBE_SETTLEMENT,\n      tags: [Tag.BUILDING, Tag.CITY],\n      cost: 15,\n\n      behavior: {\n        production: {energy: -1, megacredits: 2},\n      },\n\n      metadata: {\n        cardNumber: 'P37',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().megacredits(2);\n          }).br;\n          b.city().asterix();\n        }),\n        description: 'Decrease your energy production 1 step and increase your Mâ‚¬ production 2 steps. Place a city tile on a VOLCANIC AREA regardless of adjacent cities.',\n      },\n    });\n  }\n\n  private getSpacesForCity(player: IPlayer): ReadonlyArray<Space> {\n    // https://boardgamegeek.com/thread/1953628/article/29627211#29627211\n    const spaceType = player.game.board.volcanicSpaceIds.length === 0 ? 'city' : 'volcanic';\n    return player.game.board.getAvailableSpacesForType(player, spaceType);\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return this.getSpacesForCity(player).length > 0 && player.production.energy >= 1;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(\n      new PlaceCityTile(\n        player,\n        {\n          spaces: this.getSpacesForCity(player),\n          title: 'Select either Tharsis Tholus, Ascraeus Mons, Pavonis Mons or Arsia Mons',\n        }));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Psychrophiles",
  "tags" : [ "microbe" ],
  "cost" : 2,
  "type" : "active",
  "requirements" : [ {
    "temperature" : -20,
    "max" : true,
    "count" : -20
  } ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/Psychrophiles.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {max} from '../Options';\n\nexport class Psychrophiles extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.PSYCHROPHILES,\n      tags: [Tag.MICROBE],\n      cost: 2,\n      resourceType: CardResource.MICROBE,\n\n      action: {\n        addResources: 1,\n      },\n\n      requirements: {temperature: -20, max},\n      metadata: {\n        cardNumber: 'P39',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 microbe to this card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.MICROBE);\n          }).br;\n          b.effect('When paying for a plant card, microbes here may be used as 2 Mâ‚¬ each.', (eb) => {\n            eb.tag(Tag.PLANT).startEffect.resource(CardResource.MICROBE).equals().megacredits(2);\n          });\n        }),\n        description: 'Temperature must be -20 C or lower.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Cheung Shing MARS",
  "tags" : [ "building" ],
  "cardDiscount" : {
    "tag" : "building",
    "amount" : 2
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 40,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/CheungShingMARS.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class CheungShingMARS extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.CHEUNG_SHING_MARS,\n      tags: [Tag.BUILDING],\n      startingMegaCredits: 40,\n\n      behavior: {\n        production: {megacredits: 3},\n      },\n\n      cardDiscount: {tag: Tag.BUILDING, amount: 2},\n      metadata: {\n        cardNumber: 'R16',\n        description: 'You start with 3 Mâ‚¬ production and 40 Mâ‚¬.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.production((pb) => pb.megacredits(3)).nbsp.megacredits(40);\n          b.corpBox('effect', (ce) => {\n            ce.effect('When you play a building tag, you pay 2 Mâ‚¬ less for it.', (eb) => {\n              eb.tag(Tag.BUILDING).startEffect.megacredits(-2);\n            });\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Point Luna",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 35,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/PointLuna.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {ICorporationCard} from '../corporation/ICorporationCard';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {ICard} from '../ICard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class PointLuna extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.POINT_LUNA,\n      tags: [Tag.SPACE],\n      startingMegaCredits: 35,\n\n      behavior: {\n        production: {titanium: 1},\n        drawCard: 1,\n      },\n\n      metadata: {\n        cardNumber: 'R10',\n        description: 'You start with 1 titanium production and 35 Mâ‚¬.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.production((pb) => pb.titanium(1)).nbsp.megacredits(35);\n          b.corpBox('effect', (ce) => {\n            ce.effect('When you play an Earth tag, draw a card.', (eb) => {\n              eb.tag(Tag.EARTH).startEffect.cards(1);\n            });\n          });\n        }),\n      },\n    });\n  }\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard) {\n    return this.onCardPlayed(player, card);\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard) {\n    if (player.isCorporation(this.name)) {\n      const tagCount = player.tags.cardTagCount(card, Tag.EARTH);\n      if (tagCount > 0) {\n        player.drawCard(tagCount);\n      }\n    }\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Robinson Industries",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 50,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/RobinsonIndustries.ts",
  "sourceCode" : "import {IActionCard} from '../ICard';\nimport {IPlayer} from '../../IPlayer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {ALL_RESOURCES} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {TITLES} from '../../inputs/titles';\n\nexport class RobinsonIndustries extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.ROBINSON_INDUSTRIES,\n      startingMegaCredits: 50,\n\n      metadata: {\n        cardNumber: 'R27',\n        description: 'You start with 50 Mâ‚¬.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br.br;\n          b.megacredits(50);\n          b.corpBox('action', (ce) => {\n            ce.action('Spend 2 Mâ‚¬ to increase (one of) your LOWEST production 1 step.', (eb) => {\n              eb.megacredits(2).startAction.production((pb) => pb.wild(1).asterix());\n            });\n          });\n        }),\n      },\n    });\n  }\n  public canAct(player: IPlayer): boolean {\n    return player.canAfford(2);\n  }\n\n  public action(player: IPlayer) {\n    let minimum = player.production.megacredits;\n    let lowest: Array<SelectOption> = [];\n\n    ALL_RESOURCES.forEach((resource) => {\n      const option = new SelectOption('Increase ' + resource + ' production 1 step').andThen(() => {\n        player.game.defer(new SelectPaymentDeferred(player, 2, {title: TITLES.payForCardAction(this.name)}))\n          // Add production after payment, to prevent Manutech from being in the way.\n          .andThen(() => player.production.add(resource, 1, {log: true}));\n        return undefined;\n      });\n\n      if (player.production[resource] < minimum) {\n        lowest = [];\n        minimum = player.production[resource];\n      }\n      if (player.production[resource] === minimum) lowest.push(option);\n    });\n\n    const result = new OrOptions();\n    result.options = lowest;\n    return result;\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Valley Trust",
  "tags" : [ "earth" ],
  "cardDiscount" : {
    "tag" : "science",
    "amount" : 2
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 37,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/ValleyTrust.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludesExpansion} from '../../preludes/PreludesExpansion';\n\nexport class ValleyTrust extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.VALLEY_TRUST,\n      tags: [Tag.EARTH],\n      startingMegaCredits: 37,\n      initialActionText: 'Draw 3 Prelude cards, and play one of them',\n\n      cardDiscount: {tag: Tag.SCIENCE, amount: 2},\n      metadata: {\n        cardNumber: 'R34',\n        description: 'You start with 37 Mâ‚¬. As your first action, draw 3 Prelude cards, and play one of them. Discard the other two.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.megacredits(37).nbsp.prelude().asterix();\n          b.corpBox('effect', (ce) => {\n            ce.effect('When you play a science tag, you pay 2Mâ‚¬ less for it.', (eb) => {\n              eb.tag(Tag.SCIENCE).startEffect.megacredits(-2);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public override getCardDiscount(player: IPlayer, card: IProjectCard) {\n    // TODO(chosta) -> improve once the discounts property is given a go\n    return player.tags.cardTagCount(card, Tag.SCIENCE) * 2;\n  }\n\n  // TODO(kberg): find a way to feed warnings for initialAction.\n  public initialAction(player: IPlayer) {\n    const game = player.game;\n    const cards = game.preludeDeck.drawN(game, 3);\n    return PreludesExpansion.selectPreludeToPlay(player, cards, 'discard');\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Vitor",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 47,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/Vitor.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {IAward} from '../../awards/IAward';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class Vitor extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.VITOR,\n      tags: [Tag.EARTH],\n      startingMegaCredits: 47, // It's 45 + 2 when this corp is played\n      initialActionText: 'Fund an award for free',\n\n      metadata: {\n        cardNumber: 'R35',\n        description: 'You start with 45 Mâ‚¬. As your first action, fund an award for free.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.megacredits(45).nbsp.award();\n          b.corpBox('effect', (ce) => {\n            ce.effect('When you play a card with a NON-NEGATIVE VP icon, including this, gain 2 Mâ‚¬.', (eb) => {\n              eb.vpIcon().asterix().startEffect.megacredits(2);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  private selectAwardToFund(player: IPlayer, award: IAward): SelectOption {\n    return new SelectOption(message('Fund ${0} award', (b) => b.award(award))).andThen(() => {\n      player.game.fundAward(player, award);\n      return undefined;\n    });\n  }\n\n  public initialAction(player: IPlayer) {\n    const game = player.game;\n\n    // Awards are disabled for 1 player games\n    if (game.isSoloMode()) return;\n\n    const freeAward = new OrOptions();\n    freeAward.title = 'Select award to fund';\n    freeAward.buttonLabel = 'Confirm';\n\n    // If Vitor isn't going first and someone else funds awards, filter them out.\n    const availableAwards = game.awards.filter((award) => !game.fundedAwards.map((fa) => fa.award).includes(award));\n    freeAward.options = availableAwards.map((award) => this.selectAwardToFund(player, award));\n\n    return freeAward;\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    if (!player.isCorporation(this.name)) {\n      return;\n    }\n    const victoryPoints = card.metadata.victoryPoints;\n    if (victoryPoints === undefined) return;\n    if (typeof(victoryPoints) === 'number') {\n      if (victoryPoints <= 0) return;\n    } else {\n      // victoryPoints type is CardRenderDynamicVictoryPoints\n      if (victoryPoints.points <= 0) return;\n    }\n\n    player.stock.add(Resource.MEGACREDITS, 2, {log: true, from: this});\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Allied Bank",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 3,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/AlliedBank.ts",
  "sourceCode" : ""
}, {
  "module" : "prelude",
  "name" : "Biosphere Support",
  "tags" : [ "plant" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/BiosphereSupport.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class BiosphereSupport extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.BIOSPHERE_SUPPORT,\n      tags: [Tag.PLANT],\n\n      behavior: {\n        production: {plants: 2, megacredits: -1},\n      },\n\n      metadata: {\n        cardNumber: 'P05',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().megacredits(1).br;\n            pb.plants(2);\n          });\n        }),\n        description: 'Increase your plant production 2 steps. Decrease your Mâ‚¬ production 1 step.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude",
  "name" : "Aquifer Turbines",
  "tags" : [ "power" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : -3,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/AquiferTurbines.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class AquiferTurbines extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.AQUIFER_TURBINES,\n      tags: [Tag.POWER],\n\n      behavior: {\n        production: {energy: 2},\n        ocean: {},\n      },\n\n      startingMegacredits: -3,\n\n      metadata: {\n        cardNumber: 'P02',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(1).production((pb) => pb.energy(2)).br;\n          b.megacredits(-3);\n        }),\n        description: 'Place an ocean tile. Increase your energy production 2 steps. Pay 3 Mâ‚¬.',\n      },\n    });\n  }\n  public override bespokeCanPlay(player: IPlayer) {\n    return player.canAfford(3);\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new SelectPaymentDeferred(player, 3));\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "prelude",
  "name" : "Mohole Excavation",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/MoholeExcavation.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MoholeExcavation extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.MOHOLE_EXCAVATION,\n      tags: [Tag.BUILDING],\n\n      behavior: {\n        production: {steel: 1, heat: 2},\n        stock: {heat: 2},\n      },\n\n      metadata: {\n        cardNumber: 'P23',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.steel(1).br;\n            pb.heat(2);\n          }).heat(2);\n        }),\n        description: 'Increase your steel production 1 step and heat production 2 steps. Gain 2 heat.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Early Settlement",
  "tags" : [ "building", "city" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/EarlySettlement.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class EarlySettlement extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.EARLY_SETTLEMENT,\n      tags: [Tag.BUILDING, Tag.CITY],\n\n      behavior: {\n        production: {plants: 1},\n        city: {},\n      },\n\n      metadata: {\n        cardNumber: 'P09',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1)).city();\n        }),\n        description: 'Increase your plant production 1 step. Place a city tile.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Biofuels",
  "tags" : [ "microbe" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/Biofuels.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Biofuels extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.BIOFUELS,\n      tags: [Tag.MICROBE],\n\n      behavior: {\n        production: {energy: 1, plants: 1},\n        stock: {plants: 2},\n      },\n\n      metadata: {\n        cardNumber: 'P03',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1).plants(1)).br;\n          b.plants(2);\n        }),\n        description: 'Increase your energy and plant production 1 step. Gain 2 plants.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude",
  "name" : "Power Generation",
  "tags" : [ "power" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/PowerGeneration.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class PowerGeneration extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.POWER_GENERATION,\n      tags: [Tag.POWER],\n\n      behavior: {\n        production: {energy: 3},\n      },\n\n      metadata: {\n        cardNumber: 'P27',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(3));\n        }),\n        description: 'Increase your energy production 3 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Self-Sufficient Settlement",
  "tags" : [ "building", "city" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/Self-SufficientSettlement.ts",
  "sourceCode" : ""
}, {
  "module" : "prelude",
  "name" : "Mining Operations",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/MiningOperations.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MiningOperations extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.MINING_OPERATIONS,\n      tags: [Tag.BUILDING],\n\n      behavior: {\n        production: {steel: 2},\n        stock: {steel: 4},\n      },\n\n      metadata: {\n        cardNumber: 'P21',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.steel(2)).br;\n          b.steel(4);\n        }),\n        description: 'Increase your steel production 2 steps. Gain 4 steel.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "UNMI Contractor",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/UNMIContractor.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class UNMIContractor extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.UNMI_CONTRACTOR,\n      tags: [Tag.EARTH],\n\n      behavior: {\n        drawCard: 1,\n        tr: 3,\n      },\n\n      metadata: {\n        cardNumber: 'P34',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(3).br;\n          b.cards(1);\n        }),\n        description: 'Increase your TR 3 steps. Draw a card.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Dome Farming",
  "tags" : [ "plant", "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/DomeFarming.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class DomeFarming extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.DOME_FARMING,\n      tags: [Tag.PLANT, Tag.BUILDING],\n\n      behavior: {\n        production: {megacredits: 2, plants: 1},\n      },\n\n      metadata: {\n        cardNumber: 'P07',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(2).plants(1));\n        }),\n        description: 'Increase your Mâ‚¬ production 2 steps and plant production 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Business Empire",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : -6,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/BusinessEmpire.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class BusinessEmpire extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.BUSINESS_EMPIRE,\n      tags: [Tag.EARTH],\n\n      behavior: {\n        production: {megacredits: 6},\n      },\n      startingMegacredits: -6,\n\n      metadata: {\n        cardNumber: 'P06',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(6)).br;\n          b.megacredits(-6);\n        }),\n        description: 'Increase your Mâ‚¬ production 6 steps. Pay 6 Mâ‚¬.',\n      },\n    });\n  }\n  public override bespokeCanPlay(player: IPlayer) {\n    if (player.isCorporation(CardName.MANUTECH)) return true;\n    return player.canAfford(6);\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new SelectPaymentDeferred(player, 6));\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "prelude",
  "name" : "Donation",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 21,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/Donation.ts",
  "sourceCode" : "import {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Donation extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.DONATION,\n\n      behavior: {\n        stock: {megacredits: 21},\n      },\n\n      metadata: {\n        cardNumber: 'P08',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(21);\n        }),\n        description: 'Gain 21 Mâ‚¬.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude",
  "name" : "Nitrogen Shipment",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 5,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/NitrogenShipment.ts",
  "sourceCode" : "import {PreludeCard} from './PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class NitrogenShipment extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.NITROGEN_SHIPMENT,\n\n      behavior: {\n        production: {plants: 1},\n        tr: 1,\n        stock: {megacredits: 5},\n      },\n\n      metadata: {\n        cardNumber: 'P24',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1)).tr(1).br;\n          b.megacredits(5);\n        }),\n        description: 'Increase your plant production 1 step. Increase your TR 1 step. Gain 5 Mâ‚¬.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Smelting Plant",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/SmeltingPlant.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SmeltingPlant extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.SMELTING_PLANT,\n      tags: [Tag.BUILDING],\n\n      behavior: {\n        stock: {steel: 5},\n        global: {oxygen: 2},\n      },\n\n      metadata: {\n        cardNumber: 'P30',\n        renderData: CardRenderer.builder((b) => {\n          b.oxygen(2).br;\n          b.steel(5);\n        }),\n        description: 'Raise oxygen 2 steps. Gain 5 steel.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Supplier",
  "tags" : [ "power" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/Supplier.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Supplier extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.SUPPLIER,\n      tags: [Tag.POWER],\n\n      behavior: {\n        production: {energy: 2},\n        stock: {steel: 4},\n      },\n\n      metadata: {\n        cardNumber: 'P32',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(2)).br;\n          b.steel(4);\n        }),\n        description: 'Increase your energy production 2 steps. Gain 4 steel.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Supply Drop",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/SupplyDrop.ts",
  "sourceCode" : "import {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class SupplyDrop extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.SUPPLY_DROP,\n\n      behavior: {\n        stock: {titanium: 3, steel: 8, plants: 3},\n      },\n\n      metadata: {\n        cardNumber: 'P33',\n        renderData: CardRenderer.builder((b) => {\n          b.titanium(3, {digit}).steel(8, {digit}).plants(3, {digit});\n        }),\n        description: 'Gain 3 titanium, 8 steel and 3 plants.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Great Aquifer",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/GreatAquifer.ts",
  "sourceCode" : "import {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class GreatAquifer extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.GREAT_AQUIFER,\n\n      behavior: {\n        ocean: {count: 2},\n      },\n\n      metadata: {\n        cardNumber: 'P14',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(2);\n        }),\n        description: 'Place 2 ocean tiles.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude",
  "name" : "Biolab",
  "tags" : [ "science" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/Biolab.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Biolab extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.BIOLAB,\n      tags: [Tag.SCIENCE],\n\n      behavior: {\n        production: {plants: 1},\n        drawCard: 3,\n      },\n\n      metadata: {\n        cardNumber: 'P04',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1)).br;\n          b.cards(3);\n        }),\n        description: 'Increase your plant production 1 step. Draw 3 cards.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude",
  "name" : "Martian Industries",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 6,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/MartianIndustries.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MartianIndustries extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.MARTIAN_INDUSTRIES,\n      tags: [Tag.BUILDING],\n\n      behavior: {\n        production: {energy: 1, steel: 1},\n        stock: {megacredits: 6},\n      },\n\n      metadata: {\n        cardNumber: 'P18',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1).steel(1)).br;\n          b.megacredits(6);\n        }),\n        description: 'Increase your energy and steel production 1 step. Gain 6 Mâ‚¬.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Io Research Outpost",
  "tags" : [ "jovian", "science" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/IoResearchOutpost.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class IoResearchOutpost extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.IO_RESEARCH_OUTPOST,\n      tags: [Tag.JOVIAN, Tag.SCIENCE],\n\n      behavior: {\n        production: {titanium: 1},\n        drawCard: 1,\n      },\n\n      metadata: {\n        cardNumber: 'P16',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.titanium(1)).br;\n          b.cards(1);\n        }),\n        description: 'Increase your titanium production 1 step. Draw a card.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Polar Industries",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/PolarIndustries.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class PolarIndustries extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.POLAR_INDUSTRIES,\n      tags: [Tag.BUILDING],\n\n      behavior: {\n        production: {heat: 2},\n        ocean: {},\n      },\n\n      metadata: {\n        cardNumber: 'P26',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.heat(2)).br;\n          b.oceans(1);\n        }),\n        description: 'Increase your heat production 2 steps. Place an ocean tile.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Society Support",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/SocietySupport.ts",
  "sourceCode" : "import {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SocietySupport extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.SOCIETY_SUPPORT,\n\n      behavior: {\n        production: {plants: 1, energy: 1, heat: 1, megacredits: -1},\n      },\n\n      metadata: {\n        cardNumber: 'P31',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.megacredits(-1).plants(1).br;\n            pb.energy(1).heat(1);\n          });\n        }),\n        description: 'Increase your plant, energy and heat production 1 step. Decrease Mâ‚¬ production 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Galilean Mining",
  "tags" : [ "jovian" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : -5,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/GalileanMining.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardRenderer} from '../../cards/render/CardRenderer';\n\nexport class GalileanMining extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.GALILEAN_MINING,\n      tags: [Tag.JOVIAN],\n\n      behavior: {\n        production: {titanium: 2},\n      },\n      startingMegacredits: -5,\n\n      metadata: {\n        cardNumber: 'P13',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.titanium(2);\n          }).br;\n          b.megacredits(-5);\n        }),\n        description: 'Increase your titanium production 2 steps. Pay 5 Mâ‚¬.',\n      },\n    });\n  }\n  public override bespokeCanPlay(player: IPlayer) {\n    return player.canAfford(5);\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new SelectPaymentDeferred(player, 5));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Huge Asteroid",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : -5,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/HugeAsteroid.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class HugeAsteroid extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.HUGE_ASTEROID,\n\n      startingMegacredits: -5,\n\n      behavior: {\n        global: {temperature: 3},\n      },\n\n      metadata: {\n        cardNumber: 'P15',\n        renderData: CardRenderer.builder((b) => {\n          b.temperature(3).br;\n          b.megacredits(-5);\n        }),\n        description: 'Increase temperature 3 steps. Pay 5 Mâ‚¬.',\n      },\n    });\n  }\n  public override bespokeCanPlay(player: IPlayer) {\n    return player.canAfford(5);\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new SelectPaymentDeferred(player, 5));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Metals Company",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/MetalsCompany.ts",
  "sourceCode" : "import {PreludeCard} from './PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MetalsCompany extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.METALS_COMPANY,\n\n      behavior: {\n        production: {megacredits: 1, steel: 1, titanium: 1},\n      },\n\n      metadata: {\n        cardNumber: 'P20',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1).steel(1).titanium(1));\n        }),\n        description: 'Increase your Mâ‚¬, steel and titanium production 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Loan",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 30,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/Loan.ts",
  "sourceCode" : "import {PreludeCard} from './PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Loan extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LOAN,\n\n      behavior: {\n        production: {megacredits: -2},\n        stock: {megacredits: 30},\n      },\n\n      metadata: {\n        cardNumber: 'P17',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.minus().megacredits(2)).br;\n          b.megacredits(30);\n        }),\n        description: 'Gain 30 Mâ‚¬. Decrease your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude",
  "name" : "Mohole",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/Mohole.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Mohole extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.MOHOLE,\n      tags: [Tag.BUILDING],\n\n      behavior: {\n        production: {heat: 3},\n        stock: {heat: 3},\n      },\n\n      metadata: {\n        cardNumber: 'P22',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.heat(3)).br;\n          b.heat(3);\n        }),\n        description: 'Increase your heat production 3 steps. Gain 3 heat.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Metal-Rich Asteroid",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/Metal-RichAsteroid.ts",
  "sourceCode" : ""
}, {
  "module" : "prelude",
  "name" : "Orbital Construction Yard",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/OrbitalConstructionYard.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class OrbitalConstructionYard extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.ORBITAL_CONSTRUCTION_YARD,\n      tags: [Tag.SPACE],\n\n      behavior: {\n        production: {titanium: 1},\n        stock: {titanium: 4},\n      },\n\n      metadata: {\n        cardNumber: 'P25',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.titanium(1)).br;\n          b.titanium(4);\n        }),\n        description: 'Increase your titanium production 1 step. Gain 4 titanium.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Acquired Space Agency",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/AcquiredSpaceAgency.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class AcquiredSpaceAgency extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.ACQUIRED_SPACE_AGENCY,\n\n      behavior: {\n        stock: {titanium: 6},\n        drawCard: {count: 2, tag: Tag.SPACE},\n      },\n\n      metadata: {\n        cardNumber: 'P35',\n        renderData: CardRenderer.builder((b) => {\n          b.titanium(6, {digit}).br.br; // double break intentional\n          b.cards(2, {secondaryTag: Tag.SPACE});\n        }),\n        description: 'Gain 6 titanium. Reveal cards until you reveal two cards with Space Tags. Take them into your hand, discard the rest.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude",
  "name" : "Research Network",
  "tags" : [ "wild" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/ResearchNetwork.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class ResearchNetwork extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.RESEARCH_NETWORK,\n      tags: [Tag.WILD],\n\n      behavior: {\n        production: {megacredits: 1},\n        drawCard: 3,\n      },\n\n      metadata: {\n        cardNumber: 'P28',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1)).br;\n          b.cards(3);\n        }),\n        description: 'Increase your Mâ‚¬ production 1 step. Draw 3 cards. After being played, when you perform an action, the wild tag counts as any tag of your choice.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Eccentric Sponsor",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/EccentricSponsor.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {PreludeCard} from './PreludeCard';\nimport {PlayProjectCard} from '../../deferredActions/PlayProjectCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {PreludesExpansion} from '../../preludes/PreludesExpansion';\n\nexport class EccentricSponsor extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.ECCENTRIC_SPONSOR,\n\n      metadata: {\n        cardNumber: 'P11',\n        renderData: CardRenderer.builder((b) => {\n          b.text('Play a card from hand, reducing its cost by 25 Mâ‚¬', Size.SMALL, true);\n        }),\n      },\n    });\n  }\n\n  // TODO(kberg): Make it possible to identify that the prelude will fizzle during canPlay, which\n  // will present a warning to the player.\n\n  public override getCardDiscount(player: IPlayer) {\n    if (player.lastCardPlayed === this.name) {\n      return 25;\n    }\n    return 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlayProjectCard(player))\n      .andThen((card) => {\n        if (card === undefined) {\n          PreludesExpansion.fizzle(player, this);\n          // If this card fizzles, don't apply the discount to the next card.\n          player.lastCardPlayed = undefined;\n        }\n      });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Ecology Experts",
  "tags" : [ "plant", "microbe" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/EcologyExperts.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from './PreludeCard';\nimport {PlayProjectCard} from '../../deferredActions/PlayProjectCard';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class EcologyExperts extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.ECOLOGY_EXPERTS,\n      tags: [Tag.PLANT, Tag.MICROBE],\n\n      behavior: {\n        production: {plants: 1},\n      },\n\n      metadata: {\n        cardNumber: 'P10',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1)).br.br;\n          b.projectRequirements();\n        }),\n        description: 'Increase your plant production 1 step. PLAY A CARD FROM HAND, IGNORING GLOBAL REQUIREMENTS.',\n      },\n    });\n  }\n  public override getGlobalParameterRequirementBonus(player: IPlayer): number {\n    if (player.lastCardPlayed === this.name) {\n      // Magic number high enough to always ignore requirements.\n      return 50;\n    }\n    return 0;\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlayProjectCard(player));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude",
  "name" : "Experimental Forest",
  "tags" : [ "plant" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude/ExperimentalForest.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from './PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class ExperimentalForest extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.EXPERIMENTAL_FOREST,\n      tags: [Tag.PLANT],\n\n      behavior: {\n        drawCard: {count: 2, tag: Tag.PLANT},\n        greenery: {},\n      },\n\n      metadata: {\n        cardNumber: 'P12',\n        renderData: CardRenderer.builder((b) => {\n          b.greenery().cards(2, {secondaryTag: Tag.PLANT});\n        }),\n        description: 'Place 1 greenery tile and raise oxygen 1 step. Reveal cards until you reveal two cards with plant tags on them. Take them into your hand and discard the rest.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude2",
  "name" : "Ishtar Expedition",
  "tags" : [ "venus" ],
  "cost" : 9,
  "type" : "event",
  "requirements" : [ {
    "venus" : 10,
    "count" : 10
  } ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/IshtarExpedition.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\n\nexport class IshtarExpedition extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.ISHTAR_EXPEDITION,\n      cost: 9,\n      tags: [Tag.VENUS],\n      type: CardType.EVENT,\n\n      requirements: {venus: 10},\n\n      behavior: {\n        stock: {\n          titanium: 3,\n        },\n        drawCard: {count: 2, tag: Tag.VENUS},\n      },\n\n      metadata: {\n        cardNumber: 'P76',\n        renderData: CardRenderer.builder((b) => {\n          b.titanium(3).cards(2, {secondaryTag: Tag.VENUS});\n        }),\n        description: 'Requires Venus 10%. Gain 3 titanium and draw 2 Venus cards.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Summit Logistics",
  "tags" : [ "building", "space" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ {
    "party" : "Scientists"
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/SummitLogistics.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {CardType} from '../../../common/cards/CardType';\n\nexport class SummitLogistics extends Card {\n  constructor() {\n    super({\n      name: CardName.SUMMIT_LOGISTICS,\n      type: CardType.AUTOMATED,\n      tags: [Tag.BUILDING, Tag.SPACE],\n      cost: 10,\n\n      requirements: {party: PartyName.SCIENTISTS},\n\n      behavior: {\n        stock: {\n          megacredits: {\n            tag: [Tag.JOVIAN, Tag.EARTH, Tag.VENUS, Tag.MARS],\n            colonies: {colonies: {}},\n          },\n        },\n        drawCard: 2,\n      },\n\n      metadata: {\n        cardNumber: 'P85',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(1).slash().tag(Tag.JOVIAN).tag(Tag.EARTH).tag(Tag.VENUS).colonies(1);\n          b.br;\n          b.cards(2).br;\n          b.plainText('(Requires that Scientists are ruling or that you have 2 delegates there. ' +\n            'Gain 1 Mâ‚¬ per planet tag and colony you have. Draw 2 cards.)');\n          b.br;\n          b.plainText('(FAN EXPANSION NOTE: This includes Mars but not The Moon.)');\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Ceres Tech Market",
  "tags" : [ "science", "space" ],
  "victoryPoints" : 1,
  "cost" : 12,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/prelude2/CeresTechMarket.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {digit} from '../Options';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IActionCard} from '../ICard';\nimport {PlayerInput} from '../../PlayerInput';\nimport {SelectCard} from '../../inputs/SelectCard';\n\nexport class CeresTechMarket extends Card implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.CERES_TECH_MARKET,\n      type: CardType.ACTIVE,\n      tags: [Tag.SCIENCE, Tag.SPACE],\n      cost: 12,\n      victoryPoints: 1,\n\n      behavior: {\n        stock: {\n          megacredits: {\n            colonies: {colonies: {}},\n            each: 2,\n          },\n        },\n      },\n\n      metadata: {\n        cardNumber: 'P68',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Discard any number of cards from your hand to gain 2 Mâ‚¬ for each discarded card.', (ab) =>\n            ab.text('-X').cards(1).startAction.text('2x').megacredits(1, {digit})).br;\n          b.megacredits(2).slash().colonies().br;\n          b.plainText('(Gain 2 Mâ‚¬ per colony you own.)').br;\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.cardsInHand.length > 0;\n  }\n\n  // Pretty much a duplicate of SellPatents. Also similar to Ender.\n  // Should make card discarding a behavior.\n  public action(player: IPlayer): PlayerInput | undefined {\n    return new SelectCard(\n      'Discard cards for 2 Mâ‚¬ each',\n      'Discard',\n      player.cardsInHand,\n      {max: player.cardsInHand.length, played: false})\n      .andThen((cards) => {\n        cards.forEach((card) => player.discardCardFromHand(card));\n        const megacredits = cards.length * 2;\n        player.megaCredits += megacredits;\n        player.game.log('${0} gained ${1} Mâ‚¬ by discarding ${2} cards', (b) => b.player(player).number(megacredits).number(cards.length));\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Red Appeasement",
  "tags" : [ ],
  "cost" : 0,
  "type" : "event",
  "requirements" : [ {
    "party" : "Reds"
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/RedAppeasement.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {PartyName} from '../../../common/turmoil/PartyName';\n\nexport class RedAppeasement extends Card {\n  constructor() {\n    super({\n      name: CardName.RED_APPEASEMENT,\n      type: CardType.EVENT,\n      cost: 0,\n      requirements: {party: PartyName.REDS},\n\n      behavior: {\n        production: {megacredits: 2},\n      },\n\n      metadata: {\n        cardNumber: 'P80',\n        renderData: CardRenderer.builder((b) => {\n          b.plainText('Requires that Reds are ruling or that you have 2 delegates there, ' +\n          'AND THAT NO OTHER PLAYER HAS PASSED.').br;\n          b.production((pb) => pb.megacredits(2)).text('PASS').asterix().br;\n          b.plainText('Increase Mâ‚¬ production 2 steps. This counts as passing. You get no other turns this generation.');\n        }),\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return player.game.getPassedPlayers().length === 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.pass();\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "L1 Trade Terminal",
  "tags" : [ "space" ],
  "victoryPoints" : 2,
  "cost" : 25,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/prelude2/L1TradeTerminal.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {PlayerInput} from '../../PlayerInput';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {ICard} from '../ICard';\n\nexport class L1TradeTerminal extends Card {\n  constructor() {\n    super({\n      name: CardName.L1_TRADE_TERMINAL,\n      type: CardType.ACTIVE,\n      tags: [Tag.SPACE],\n      cost: 25,\n      victoryPoints: 2,\n\n      behavior: {\n        colonies: {\n          tradeOffset: 2, // TODO(kberg): mandatory\n        },\n      },\n\n      metadata: {\n        cardNumber: 'P78',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you trade, first increase that colony tile track 2 steps.', (eb) =>\n            eb.trade().startEffect.text('+2')).br;\n          b.text('3').diverseTag().asterix().br;\n          b.plainText('(Add a resource to 3 different cards that already have resources.)').br;\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer): PlayerInput | undefined {\n    function addResources(cards: ReadonlyArray<ICard>): void {\n      for (const card of cards) {\n        player.addResourceTo(card, {qty: 1, log: true});\n      }\n    }\n\n    const cards = player.getCardsWithResources();\n    if (cards.length === 3) {\n      addResources(cards);\n      return undefined;\n    }\n\n    return new SelectCard('Select up to 3 cards to gain 1 resource each', 'Add Resources', cards, {min: 0, max: 3})\n      .andThen((cards) => {\n        addResources(cards);\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Cloud Tourism",
  "tags" : [ "jovian", "venus" ],
  "victoryPoints" : {
    "resourcesHere" : 1,
    "per" : 3
  },
  "cost" : 11,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/CloudTourism.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {ActionCard} from '../ActionCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {Resource} from '../../../common/Resource';\n\nexport class CloudTourism extends ActionCard {\n  constructor() {\n    super({\n      name: CardName.CLOUD_TOURISM,\n      type: CardType.ACTIVE,\n      tags: [Tag.JOVIAN, Tag.VENUS],\n      cost: 11,\n      victoryPoints: {resourcesHere: 1, per: 3},\n      resourceType: CardResource.FLOATER,\n\n      action: {\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: 'P69',\n        description: 'Increase your Mâ‚¬ production 1 step for each pair of Earth and Venus tags you own. 1 VP for every 3rd floater on this card.',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 floater to this card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.FLOATER);\n          }).br;\n          b.production((pb) => {\n            pb.megacredits(1).slash().tag(Tag.EARTH).tag(Tag.VENUS);\n          });\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    // This does its own calculation because player.tags isn't robust enough at the moment\n    const counts = {\n      earth: player.tags.count(Tag.EARTH, 'raw'),\n      // The +1 is \"including this\"\n      venus: player.tags.count(Tag.VENUS, 'raw') + 1,\n    };\n    if (player.cardIsInEffect(CardName.EARTH_EMBASSY)) {\n      counts.earth += player.tags.count(Tag.MOON, 'raw');\n    }\n    let wildTags = player.tags.count(Tag.WILD, 'raw');\n    while (wildTags > 0) {\n      if (counts.earth < counts.venus) {\n        counts.earth++;\n      } else {\n        counts.venus++;\n      }\n      wildTags--;\n    }\n    const production = Math.min(counts.earth, counts.venus);\n    player.production.add(Resource.MEGACREDITS, production, {log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "GHG Shipment",
  "tags" : [ "space" ],
  "cost" : 3,
  "type" : "event",
  "requirements" : [ {
    "party" : "Kelvinists"
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/GHGShipment.ts",
  "sourceCode" : ""
}, {
  "module" : "prelude2",
  "name" : "Sponsoring Nation",
  "tags" : [ "earth" ],
  "cost" : 21,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "earth",
    "count" : 4
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/SponsoringNation.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Card} from '../Card';\n\nexport class SponsoringNation extends Card {\n  constructor() {\n    super({\n      name: CardName.SPONSORING_NATION,\n      type: CardType.AUTOMATED,\n      tags: [Tag.EARTH],\n      cost: 21,\n\n      behavior: {\n        tr: 3,\n        turmoil: {sendDelegates: {count: 2}},\n      },\n\n      requirements: {tag: Tag.EARTH, count: 4},\n\n      metadata: {\n        cardNumber: 'P83',\n        description: 'Requires 4 Earth tags. Gain 3 TR. Place 2 delegates.',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(3).br.delegates(2);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Colonial Representation",
  "tags" : [ ],
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ "colonies", "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/ColonialRepresentation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class ColonialRepresentation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.COLONIAL_REPRESENTATION,\n      cost: 10,\n\n      behavior: {\n        turmoil: {influenceBonus: 1},\n        stock: {\n          megacredits: {\n            colonies: {colonies: {}},\n            each: 3,\n          },\n        },\n      },\n\n      metadata: {\n        cardNumber: 'P71',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('You have +1 influence.', (eb) => {\n            eb.startEffect.influence();\n          }).br;\n          b.megacredits(3).slash().colonies();\n        }),\n        description: 'Gain 3 Mâ‚¬ per colony you have.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Envoys From Venus",
  "tags" : [ "venus" ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ {
    "tag" : "venus",
    "count" : 3
  } ],
  "compatibility" : [ "turmoil", "venus" ],
  "sourceFile" : "src/server/cards/prelude2/EnvoysFromVenus.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class EnvoysFromVenus extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.ENVOYS_FROM_VENUS,\n      cost: 1,\n      tags: [Tag.VENUS],\n      requirements: {tag: Tag.VENUS, count: 3},\n\n      behavior: {\n        turmoil: {sendDelegates: {count: 2}},\n      },\n\n      metadata: {\n        cardNumber: 'P72',\n        renderData: CardRenderer.builder((b) => b.delegates(2).asterix),\n        description: 'Requires 3 Venus tags. Place 2 delegates in 1 party.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude2",
  "name" : "Colonial Envoys",
  "tags" : [ ],
  "cost" : 4,
  "type" : "event",
  "requirements" : [ {
    "party" : "Unity"
  } ],
  "compatibility" : [ "colonies", "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/ColonialEnvoys.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PartyName} from '../../../common/turmoil/PartyName';\n\nexport class ColonialEnvoys extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 4,\n      name: CardName.COLONIAL_ENVOYS,\n      type: CardType.EVENT,\n      requirements: {party: PartyName.UNITY},\n\n      behavior: {\n        turmoil: {sendDelegates: {count: {colonies: {}}, manyParties: true}},\n      },\n\n      metadata: {\n        cardNumber: 'P70',\n        description: 'Requires that Unity is ruling or that you have 2 delegates there. Place 1 delegate for each colony you have. YOU MAY PLACE THEM IN SEPERATE PARTIES.',\n        renderData: CardRenderer.builder((b) => {\n          b.delegates(1).asterix().slash().colonies(1).br;\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Special Permit",
  "tags" : [ "plant" ],
  "cost" : 5,
  "type" : "event",
  "requirements" : [ {
    "party" : "Greens"
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/SpecialPermit.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {StealResources} from '../../deferredActions/StealResources';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all, digit} from '../Options';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class SpecialPermit extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 5,\n      name: CardName.SPECIAL_PERMIT,\n      type: CardType.EVENT,\n      tags: [Tag.PLANT],\n      requirements: {party: PartyName.GREENS},\n\n      metadata: {\n        cardNumber: 'P82',\n        description: 'Requires that Greens are ruling or that you have 2 delegates there. Steal 4 plants from any player.',\n        renderData: CardRenderer.builder((b) => {\n          b.text('steal', Size.MEDIUM, true).plants(4, {all, digit});\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new StealResources(player, Resource.PLANTS, 4));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Floating Refinery",
  "tags" : [ "venus" ],
  "cost" : 7,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/FloatingRefinery.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IActionCard} from '../ICard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {Resource} from '../../../common/Resource';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\n\n\nexport class FloatingRefinery extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.FLOATING_REFINERY,\n      cost: 7,\n      tags: [Tag.VENUS],\n      resourceType: CardResource.FLOATER,\n\n      behavior: {\n        addResources: {tag: Tag.VENUS},\n      },\n\n      metadata: {\n        cardNumber: 'P73',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 floater here.', (ab) => {\n            ab.empty().startAction.resource(CardResource.FLOATER);\n          }).br;\n          b.or().br;\n          b.action('Remove 2 floaters from ANY CARD to gain 1 titanium and 2 Mâ‚¬.', (eb) => {\n            eb.minus().resource(CardResource.FLOATER, 2).startAction.titanium(1).megacredits(2);\n          }).br.resource(CardResource.FLOATER, 1).slash().tag(Tag.VENUS);\n        }),\n        description: 'Add 1 floater here for each Venus tag you have.',\n      },\n    });\n  }\n\n  public canAct() {\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    const floater2Cards = player.tableau.filter((card) => card.resourceType === CardResource.FLOATER && card.resourceCount >= 2);\n    const addFloater = new SelectOption('Add 1 floater to this card',\n      'Add floater',\n    ).andThen(() => {\n      player.addResourceTo(this, {log: true});\n      return undefined;\n    });\n\n    const remove2floaters = new SelectOption(\n      'Remove 2 floaters from ANY CARD to gain 1 titanium and 2 Mâ‚¬',\n      'Remove floaters',\n    ).andThen(() => {\n      return new SelectCard('Remove 2 floaters from ANY CARD to gain 1 titanium and 2 Mâ‚¬',\n        'Choose a card to spend 2 floaters from, to gain 1 titanium and 2 Mâ‚¬.',\n        floater2Cards,\n      ).andThen(\n        ([card]) => {\n          player.removeResourceFrom(card, 2);\n          player.stock.add(Resource.MEGACREDITS, 2, {log: true});\n          player.stock.add(Resource.TITANIUM, 1, {log: true});\n          return undefined;\n        });\n    });\n\n    if (floater2Cards.length > 0) {\n      return new OrOptions(remove2floaters, addFloater);\n    } else {\n      player.addResourceTo(this, {log: true});\n      return undefined;\n    }\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Frontier Town",
  "tags" : [ "city", "building" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ {
    "party" : "Mars First"
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/FrontierTown.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {PlaceCityTile} from '../../deferredActions/PlaceCityTile';\nimport {Tag} from '../../../common/cards/Tag';\nimport {PartyName} from '../../../common/turmoil/PartyName';\n\nexport class FrontierTown extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.FRONTIER_TOWN,\n      type: CardType.AUTOMATED,\n      cost: 11,\n      tags: [Tag.CITY, Tag.BUILDING],\n\n      requirements: {party: PartyName.MARS},\n\n      behavior: {production: {energy: -1}},\n\n      metadata: {\n        cardNumber: 'P74',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.minus().energy(1)).city().asterix();\n        }),\n        description: 'Requires that Mars First is ruling or that you have 2 delegates there. ' +\n        'Decrease your energy production one step. Place a city tile. ' +\n        'GAIN THE PRINTED PLACEMENT BONUS 2 ADDITIONAL TIMES.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlaceCityTile(player)).andThen((space) => {\n      if (space) {\n        player.game.grantSpaceBonuses(player, space);\n        player.game.grantSpaceBonuses(player, space);\n      }\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Jovian Envoys",
  "tags" : [ ],
  "cost" : 2,
  "type" : "event",
  "requirements" : [ {
    "tag" : "jovian",
    "count" : 2
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/JovianEnvoys.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class JovianEnvoys extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.JOVIAN_ENVOYS,\n      cost: 2,\n      requirements: {tag: Tag.JOVIAN, count: 2},\n\n      behavior: {\n        turmoil: {sendDelegates: {count: 2}},\n      },\n\n      metadata: {\n        cardNumber: 'P77',\n        renderData: CardRenderer.builder((b) => b.delegates(2).asterix),\n        description: 'Requires 2 Jovian tags. Place 2 delegates in 1 party.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Microgravity Nutrition",
  "tags" : [ "microbe", "plant" ],
  "victoryPoints" : 1,
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/prelude2/MicrogravityNutrition.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Resource} from '../../../common/Resource';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MicrogravityNutrition extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 11,\n      tags: [Tag.MICROBE, Tag.PLANT],\n      name: CardName.MICROGRAVITY_NUTRITION,\n      type: CardType.AUTOMATED,\n      victoryPoints: 1,\n\n      metadata: {\n        description: 'Increase your Mâ‚¬ production 1 step for each colony you have.',\n        cardNumber: 'P79',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1).slash().colonies(1, {size: Size.SMALL})).br;\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const coloniesCount = player.getColoniesCount();\n    player.production.add(Resource.MEGACREDITS, coloniesCount, {log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Soil Studies",
  "tags" : [ "microbe", "plant" ],
  "cost" : 13,
  "type" : "event",
  "requirements" : [ {
    "temperature" : -4,
    "max" : true,
    "count" : -4
  } ],
  "compatibility" : [ "venus", "colonies" ],
  "sourceFile" : "src/server/cards/prelude2/SoilStudies.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {max} from '../Options';\n\nexport class SoilStudies extends Card {\n  constructor() {\n    super({\n      name: CardName.SOIL_STUDIES,\n      type: CardType.EVENT,\n      tags: [Tag.MICROBE, Tag.PLANT],\n      cost: 13,\n\n      requirements: {temperature: -4, max},\n\n      behavior: {\n        stock: {\n          plants: {\n            tag: [Tag.VENUS, Tag.PLANT],\n            colonies: {colonies: {}},\n          },\n        },\n      },\n\n      metadata: {\n        cardNumber: 'P81',\n        renderData: CardRenderer.builder((b) => {\n          b.plants(1).slash().tag(Tag.VENUS).tag(Tag.PLANT).colonies(1).br;\n        }),\n        description: 'Requires that temperature is -4 C or lower. Gain 1 plant per Venus tag, plant tag, and colony you have.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Stratospheric Expedition",
  "tags" : [ "venus", "space" ],
  "victoryPoints" : 1,
  "cost" : 12,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/StratosphericExpedition.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class StratosphericExpedition extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.STRATOSPHERIC_EXPEDITION,\n      cost: 12,\n      tags: [Tag.VENUS, Tag.SPACE],\n      type: CardType.EVENT,\n      victoryPoints: 1,\n\n      behavior: {\n        addResourcesToAnyCard: {count: 2, type: CardResource.FLOATER},\n        drawCard: {count: 2, tag: Tag.VENUS},\n      },\n      metadata: {\n        cardNumber: 'P84',\n        renderData: CardRenderer.builder((b) => {\n          b.resource(CardResource.FLOATER, 2).asterix().cards(2, {secondaryTag: Tag.VENUS});\n        }),\n        description: 'Add two floaters to ANY CARD. Draw 2 Venus cards.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Unexpected Application",
  "tags" : [ "venus" ],
  "cost" : 4,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/UnexpectedApplication.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class UnexpectedApplication extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.UNEXPECTED_APPLICATION,\n      type: CardType.EVENT,\n      tags: [Tag.VENUS],\n      cost: 4,\n\n      behavior: {\n        spend: {cards: 1},\n        global: {venus: 1},\n      },\n\n      metadata: {\n        cardNumber: 'P86',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().cards(1).venus(1);\n        }),\n        description: 'Discard 1 card to terraform Venus 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Venus Allies",
  "tags" : [ "venus", "space" ],
  "victoryPoints" : 2,
  "cost" : 30,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ "venus", "colonies" ],
  "sourceFile" : "src/server/cards/prelude2/VenusAllies.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class VenusAllies extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.VENUS_ALLIES,\n      tags: [Tag.VENUS, Tag.SPACE],\n      cost: 30,\n      victoryPoints: 2,\n\n      behavior: {\n        global: {venus: 2},\n        stock: {\n          megacredits: {\n            colonies: {colonies: {}},\n            each: 4,\n          },\n        },\n      },\n\n      metadata: {\n        cardNumber: 'P87',\n        renderData: CardRenderer.builder((b) => {\n          b.venus(2).megacredits(4).slash().colonies();\n        }),\n        description: 'Raise Venus 2 steps. Gain 4 Mâ‚¬ per colony you have.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Venus Orbital Survey",
  "tags" : [ "venus", "space" ],
  "victoryPoints" : 2,
  "cost" : 27,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/VenusOrbitalSurvey.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IActionCard} from '../ICard';\nimport {DrawCards} from '../../deferredActions/DrawCards';\nimport {IProjectCard} from '../IProjectCard';\nimport {LogType, keep} from '../../deferredActions/ChooseCards';\nimport {ChooseCards} from '../../deferredActions/ChooseCards';\nimport {Size} from '../../../common/cards/render/Size';\nimport {oneWayDifference} from '../../../common/utils/utils';\n\nexport class VenusOrbitalSurvey extends Card implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.VENUS_ORBITAL_SURVEY,\n      type: CardType.ACTIVE,\n      tags: [Tag.VENUS, Tag.SPACE],\n      cost: 27,\n      victoryPoints: 2,\n\n      metadata: {\n        cardNumber: 'P88',\n        renderData: CardRenderer.builder((b) => {\n          b.action(undefined, (ab) =>\n            ab.empty().startAction.empty()).br.text('Action: Reveal the top 2 cards, take any venus cards to hand for free. Any other card you either buy or discard', Size.SMALL, true);\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.game.projectDeck.canDraw(2);\n  }\n\n  public action(player: IPlayer) {\n    const isVenus = (card: IProjectCard) => player.tags.cardHasTag(card, Tag.VENUS);\n\n    player.game.defer(new DrawCards(player, 2).andThen((cards) => {\n      const message = '${0} revealed ${1} and ${2}';\n      player.game.log(message, (b) => {\n        b.player(player)\n          .card(cards[0], {tags: true})\n          .card(cards[1], {tags: true});\n      });\n\n      const venus = cards.filter(isVenus);\n      if (venus.length > 0) {\n        keep(player, venus, [], LogType.DREW_VERBOSE);\n      }\n\n      // The cards bought are private here\n      const rest = oneWayDifference(cards, venus);\n      if (rest.length > 0) {\n        player.game.defer(new ChooseCards(player, rest, {\n          paying: true,\n        }));\n      }\n    }));\n\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Venus Shuttles",
  "tags" : [ "venus" ],
  "cost" : 9,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/VenusShuttles.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IActionCard} from '../ICard';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardResource} from '../../../common/CardResource';\nimport * as constants from '../../../common/constants';\n\nexport class VenusShuttles extends Card implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.VENUS_SHUTTLES,\n      type: CardType.ACTIVE,\n      tags: [Tag.VENUS],\n      cost: 9,\n\n      behavior: {\n        addResourcesToAnyCard: {\n          count: 2,\n          tag: Tag.VENUS,\n          type: CardResource.FLOATER,\n          autoSelect: true,\n        },\n      },\n\n      metadata: {\n        cardNumber: 'P89',\n        description: 'Add 2 floaters to ANY VENUS CARD.',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 12 Mâ‚¬ to raise Venus 1 step. This cost is REDUCED BY 1 FOR EACH VENUS TAG you have.', (eb) =>\n            eb.megacredits(12).text('(').megacredits(-1).slash().tag(Tag.VENUS).text(')').startAction.venus(1)).br;\n          b.resource(CardResource.FLOATER, {amount: 2, secondaryTag: Tag.VENUS});\n        }),\n      },\n    });\n  }\n\n  private actionCost(player: IPlayer) {\n    return Math.max(12 - player.tags.count(Tag.VENUS), 0);\n  }\n\n  public canAct(player: IPlayer) {\n    if (player.game.getVenusScaleLevel() >= constants.MAX_VENUS_SCALE) {\n      this.warnings.add('maxvenus');\n    }\n    return player.canAfford({cost: this.actionCost(player), tr: {venus: 1}});\n  }\n\n  public action(player: IPlayer) {\n    player.game.defer(\n      new SelectPaymentDeferred(player, this.actionCost(player)))\n      .andThen(() => player.game.increaseVenusScaleLevel(player, 1));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Venus Trade Hub",
  "tags" : [ "venus", "space" ],
  "victoryPoints" : 1,
  "cost" : 12,
  "type" : "active",
  "requirements" : [ {
    "tag" : "venus",
    "count" : 2
  } ],
  "compatibility" : [ "colonies", "venus" ],
  "sourceFile" : "src/server/cards/prelude2/VenusTradeHub.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\n\nexport class VenusTradeHub extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.VENUS_TRADE_HUB,\n      cost: 12,\n      tags: [Tag.VENUS, Tag.SPACE],\n      type: CardType.ACTIVE,\n      victoryPoints: 1,\n      requirements: [{tag: Tag.VENUS, count: 2}],\n\n      metadata: {\n        cardNumber: 'P90',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you trade, gain 3 Mâ‚¬.', (eb) => eb.trade().startEffect.megacredits(3));\n        }),\n        description: 'Requires 2 Venus tags.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "WG Project",
  "tags" : [ "earth" ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ {
    "chairman" : true
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/WGProject.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludesExpansion} from '../../preludes/PreludesExpansion';\nimport {IPlayer} from '../../IPlayer';\n\n\nexport class WGProject extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 9,\n      tags: [Tag.EARTH],\n      name: CardName.WG_PROJECT,\n      type: CardType.AUTOMATED,\n\n      requirements: {chairman: true},\n\n      metadata: {\n        description: 'Requires that you are Chairman. DRAW 3 PRELUDE CARDS AND PLAY 1 OF THEM, Discard the other 2.',\n        cardNumber: 'P91',\n        renderData: CardRenderer.builder((b) => b.prelude().asterix()),\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return player.game.preludeDeck.canDraw(3);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    const cards = game.preludeDeck.drawNOrThrow(game, 3);\n    return PreludesExpansion.selectPreludeToPlay(player, cards, 'discard');\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Nirgal Enterprises",
  "tags" : [ "power", "plant", "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 30,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/NirgalEnterprises.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class NirgalEnterprises extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.NIRGAL_ENTERPRISES,\n      tags: [Tag.POWER, Tag.PLANT, Tag.BUILDING],\n      startingMegaCredits: 30,\n\n      behavior: {\n        production: {energy: 1, plants: 1, steel: 1, heat: 1},\n      },\n\n      metadata: {\n        cardNumber: 'PC01', // Renumber\n        renderData: CardRenderer.builder((b) => {\n          b.br.br.br.br;\n          b.megacredits(30).production((pb) => pb.energy(1).plants(1).steel(1).heat(1)).br;\n          b.effect('AWARDS and MILESTONES ALWAYS COST 0 Mâ‚¬ FOR YOU.', (eb) => {\n            // TODO(kberg): replace with award().slash.milestone() when award and milestone can be stacked.\n            eb.plate('Awards and Milestones').startEffect.megacredits(1, {text: '0'});\n          });\n        }),\n        description: 'You start with 30 Mâ‚¬. Increase your energy, plant, steel and heat production 1 step each.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Palladin Shipping",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 36,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/PalladinShipping.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {digit} from '../Options';\nimport {IPlayer} from '../../IPlayer';\nimport {IProjectCard} from '../IProjectCard';\nimport {Resource} from '../../../common/Resource';\nimport {IActionCard} from '../ICard';\nimport {Behavior} from '../../behavior/Behavior';\nimport {getBehaviorExecutor} from '../../behavior/BehaviorExecutor';\n\nexport class PalladinShipping extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.PALLADIN_SHIPPING,\n      tags: [Tag.SPACE],\n      startingMegaCredits: 36,\n\n      behavior: {\n        stock: {titanium: 5},\n      },\n\n      metadata: {\n        cardNumber: 'PC02', // Renumber\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(36).titanium(5, {digit}).br;\n          b.effect('When you play a space event, gain 1 titanium.', (eb) => {\n            eb.tag(Tag.SPACE).tag(Tag.EVENT).startEffect.titanium(1);\n          });\n          b.br;\n          b.action('Spend 2 titanium to raise the temperature 1 step.', (ab) => {\n            ab.titanium(2).startAction.temperature(1);\n          });\n        }),\n        description: 'You start with 36 Mâ‚¬. Gain 5 titanium.',\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    if (player.isCorporation(this.name)) {\n      if (card.type === CardType.EVENT && card.tags.includes(Tag.SPACE)) {\n        player.stock.add(Resource.TITANIUM, 1, {log: true});\n      }\n    }\n  }\n\n  public canAct(player: IPlayer) {\n    return getBehaviorExecutor().canExecute(PalladinShipping.actionBehavior, player, this);\n  }\n\n  private static actionBehavior: Behavior = {\n    spend: {titanium: 2},\n    global: {temperature: 1},\n  };\n\n  public action(player: IPlayer) {\n    getBehaviorExecutor().execute(PalladinShipping.actionBehavior, player, this);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Sagitta Frontier Services",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 29,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/SagittaFrontierServices.ts",
  "sourceCode" : "import {ICorporationCard} from '../corporation/ICorporationCard';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {ICard} from '../ICard';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\nimport {GainResources} from '../../deferredActions/GainResources';\nimport {Resource} from '../../../common/Resource';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class SagittaFrontierServices extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.SAGITTA_FRONTIER_SERVICES,\n      startingMegaCredits: 29,\n\n      behavior: {\n        production: {energy: 1, megacredits: 2},\n      },\n\n      metadata: {\n        cardNumber: 'PC03', // Renumber\n        hasExternalHelp: true,\n        renderData: CardRenderer.builder((b) => {\n          // TODO(kberg): provide reasonable secondary tag. It's not rendered on CardRenderItemComponent.\n          b.megacredits(29).production((pb) => pb.energy(1).megacredits(2)).cards(1, {secondaryTag: AltSecondaryTag.NO_TAGS}).br;\n          b.effect('When you play a card with no tags, including this, gain 4 Mâ‚¬.', (eb) => eb.noTags().startEffect.megacredits(4)).br;\n          b.effect('When you play a card with EXACTLY 1 TAG, you gain 1 Mâ‚¬.', (eb) => eb.emptyTag().asterix().startEffect.megacredits(1)).br;\n        }),\n        description: 'You start with 29 Mâ‚¬. Increase energy production 1 step and Mâ‚¬ production 2 steps. Draw a card that has no tag.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    // Gain the 4 MC for playing itself.\n    player.stock.megacredits += 4;\n    player.game.log('${0} gained 4 Mâ‚¬ for playing a card with no tags.', (b) => b.player(player));\n\n    player.drawCard(1, {include: (c) => c.tags.length === 0 && c.type !== CardType.EVENT});\n    return undefined;\n  }\n\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard, cardOwner: IPlayer) {\n    if (player === cardOwner) {\n      this.onCardPlayed(cardOwner, card);\n    }\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard) {\n    if (player.isCorporation(this.name)) {\n      const count = card.tags.filter((tag) => tag !== Tag.WILD).length + (card.type === CardType.EVENT ? 1 : 0);\n      if (count === 0) {\n        player.game.defer(new GainResources(player, Resource.MEGACREDITS, {count: 4}))\n          .andThen(() => {\n            player.game.log('${0} gained 4 Mâ‚¬ for playing ${1}, which has no tags.', (b) => b.player(player).card(card));\n          });\n      }\n      if (count === 1) {\n        player.game.defer(new GainResources(player, Resource.MEGACREDITS, {count: 1}))\n          .andThen(() => {\n            player.game.log('${0} gained 1 Mâ‚¬ for playing ${1}, which has exactly 1 tag.', (b) => b.player(player).card(card));\n          });\n      }\n    }\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "EcoTec",
  "tags" : [ "microbe", "plant" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 45,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/EcoTec.ts",
  "sourceCode" : ""
}, {
  "module" : "prelude2",
  "name" : "Spire",
  "tags" : [ "city", "earth" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Science",
  "startingMegaCredits" : 50,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/Spire.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {ICard} from '../ICard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {digit} from '../Options';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {ICorporationCard} from '../corporation/ICorporationCard';\n\nexport class Spire extends CorporationCard implements ICorporationCard {\n  constructor() {\n    super({\n      name: CardName.SPIRE,\n      tags: [Tag.CITY, Tag.EARTH],\n      startingMegaCredits: 50,\n      initialActionText: 'Draw 4 cards, then discard 3 cards.',\n      resourceType: CardResource.SCIENCE,\n\n      metadata: {\n        cardNumber: 'PC05', // Renumber\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(50).plus().cards(4, {digit}).minus().cards(3, {digit}).br,\n          b.plainText('You start with 50 Mâ‚¬. As your first action, draw 4 cards, ' +\n              'then discard 3 cards from your hand.').br;\n\n          b.effect('When you play a card with at least 2 tags. including this, add 1 science resource here.',\n            (eb) => eb.emptyTag(2).asterix().startEffect.resource(CardResource.SCIENCE)).br;\n          b.effect('When you pay for a standard project, science resources here may be used as 2 Mâ‚¬ each.',\n            (eb) => eb.plate('Standard Project').startEffect.resource(CardResource.SCIENCE).equals().megacredits(2)).br;\n        }),\n      },\n    });\n  }\n\n  public initialAction(player: IPlayer) {\n    player.drawCard(4);\n    return new SelectCard('Select 3 cards to discard', 'Discard', player.cardsInHand, {min: 3, max: 3})\n      .andThen((cards) => {\n        for (const card of cards) {\n          player.discardCardFromHand(card);\n        }\n        return undefined;\n      });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    // Including this.\n    this.onCardPlayed(player, this);\n    return undefined;\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard) {\n    if (player.isCorporation(this.name)) {\n      const count = card.tags.length + (card.type === CardType.EVENT ? 1 : 0);\n      if (count >= 2) {\n        player.addResourceTo(this, {qty: 1, log: true});\n      }\n    }\n  }\n\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard) {\n    this.onCardPlayed(player, card);\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Applied Science",
  "tags" : [ "wild" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "resourceType" : "Science",
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/AppliedScience.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {IActionCard} from '../ICard';\nimport {digit} from '../Options';\nimport {ActivePreludeCard} from './ActivePreludeCard';\n\nexport class AppliedScience extends ActivePreludeCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.APPLIED_SCIENCE,\n      tags: [Tag.WILD],\n      resourceType: CardResource.SCIENCE,\n\n      behavior: {\n        addResources: 6,\n      },\n\n      action: {\n        or: {\n          behaviors: [\n            {\n              spend: {resourcesHere: 1},\n              standardResource: 1,\n              title: 'Spend 1 science resource here to gain 1 standard resource',\n            },\n            {\n              spend: {resourcesHere: 1},\n              addResourcesToAnyCard: {\n                count: 1,\n                min: 1,\n                mustHaveCard: true,\n                robotCards: true,\n              },\n              title: 'Spend 1 science resource here to gain 1 resource on ANY CARD WITH A RESOURCE.',\n            },\n          ],\n          autoSelect: true,\n        },\n      },\n\n      metadata: {\n        cardNumber: 'P43',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Remove 1 resource here to either add 1 resource to ANY CARD WITH A RESOURCE or gain 1 standard resource.', (ab) => {\n            ab.resource(CardResource.SCIENCE).startAction.wild(1).asterix();\n          }).br;\n          b.resource(CardResource.SCIENCE, {amount: 6, digit}).br;\n        }),\n        description: 'Add 6 science resources here.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Atmospheric Enhancers",
  "tags" : [ "venus" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/AtmosphericEnhancers.ts",
  "sourceCode" : "import {CanAffordOptions, IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {TRSource} from '../../../common/cards/TRSource';\nimport {digit} from '../Options';\nimport {floaterCards} from '../venusNext/floaterCards';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class AtmosphericEnhancers extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.ATMOSPHERIC_ENHANCERS,\n      tags: [Tag.VENUS],\n\n      behavior: {\n        or: {\n          behaviors: [\n            {global: {temperature: 2}, title: 'Raise the temperature 2 steps'},\n            {global: {oxygen: 2}, title: 'Raise the oxygen level 2 steps'},\n            {global: {venus: 2}, title: 'Raise the Venus scale level 2 steps'},\n          ],\n        },\n      },\n\n      metadata: {\n        cardNumber: 'P44',\n        renderData: CardRenderer.builder((b) => {\n          b.temperature(2, {digit}).slash().oxygen(2, {digit}).br.slash().venus(2, {digit}).br;\n          b.cards(2, {secondaryTag: AltSecondaryTag.FLOATER});\n        }),\n        description: 'Raise temperature 2 steps, or raise oxygen 2 steps, or raise Venus 2 steps. Draw 2 cards with floater icons.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer, canAffordOptions: CanAffordOptions) {\n    function adjusted(trSource: TRSource) {\n      return {...canAffordOptions, tr: trSource};\n    }\n    return (\n      player.canAfford(adjusted({oxygen: 2})) ||\n      player.canAfford(adjusted({temperature: 2})) ||\n      player.canAfford(adjusted({venus: 2}))\n    );\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.drawCard(2, {\n      include: (card) => floaterCards.has(card.name) || card.resourceType === CardResource.FLOATER,\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Board of Directors",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "resourceType" : "Director",
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/BoardofDirectors.ts",
  "sourceCode" : ""
}, {
  "module" : "prelude2",
  "name" : "Colony Trade Hub",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/prelude2/ColonyTradeHub.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {all} from '../Options';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\n\nexport class ColonyTradeHub extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.COLONY_TRADE_HUB,\n      tags: [Tag.SPACE],\n\n      behavior: {\n        production: {energy: 1},\n        stock: {titanium: 2},\n      },\n\n      metadata: {\n        cardNumber: 'P46',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1)).titanium(2).br;\n          b.effect('When any colony is placed, gain 2 Mâ‚¬.', (eb) => eb.colonies(1, {all}).startEffect.megacredits(2));\n        }),\n        description: 'Increase your energy production 1 step. Gain 2 titanium',\n      },\n    });\n  }\n\n  onColonyAdded(_player: IPlayer, cardOwner: IPlayer) {\n    cardOwner.stock.add(Resource.MEGACREDITS, 2, {log: true});\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Corridors of Power",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 4,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/CorridorsofPower.ts",
  "sourceCode" : ""
}, {
  "module" : "prelude2",
  "name" : "Early Colonization",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/prelude2/EarlyColonization.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\nimport {IPlayer} from '../../IPlayer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class EarlyColonization extends PreludeCard {\n  constructor() {\n    super({\n      tags: [Tag.SPACE],\n      name: CardName.EARLY_COLONIZATION,\n\n      behavior: {\n        colonies: {buildColony: {}},\n        stock: {energy: 3},\n      },\n\n      metadata: {\n        cardNumber: 'P48',\n        description: 'Place a colony. Gain 3 energy.',\n        renderData: CardRenderer.builder((b) => {\n          b.colonyTile({all}).text('+2').br;\n          b.text('INCREASE ALL COLONY TRACKS 2 STEPS', Size.SMALL, true).br;\n          b.colonies(1).energy(3);\n        }),\n      },\n    });\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.game.colonies.forEach((colony) => {\n      colony.increaseTrack(2);\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Floating Trade Hub",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "startingMegaCredits" : 0,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/FloatingTradeHub.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {IActionCard} from '../ICard';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {IPlayer} from '../../IPlayer';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {AndOptions} from '../../inputs/AndOptions';\nimport {SelectAmount} from '../../inputs/SelectAmount';\nimport {SelectResource} from '../../inputs/SelectResource';\nimport {Units} from '../../../common/Units';\n\nexport class FloatingTradeHub extends PreludeCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.FLOATING_TRADE_HUB,\n      tags: [Tag.SPACE],\n      resourceType: CardResource.FLOATER,\n\n      metadata: {\n        cardNumber: 'P49',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 2 floaters to ANY card.', (ab) => ab.startAction.resource(CardResource.FLOATER, 2).asterix()).br;\n          b.action('Remove any number of floaters here to gain that many of one standard resource.', (ab) => {\n            ab.text('X').resource(CardResource.FLOATER).startAction.text('X').wild(1);\n          }).br;\n        }),\n      },\n    });\n  }\n\n  public canAct(): boolean {\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    const add2Floaters = new SelectCard('Select card to gain 2 floaters', undefined, player.getResourceCards(CardResource.FLOATER)).andThen(([card]) => {\n      player.addResourceTo(card, {qty: 2, log: true});\n      return undefined;\n    });\n    const selectResource = new SelectResource('Select resource to gain');\n    const selectAmount = new SelectAmount('Select amount of floaters to remove', undefined, 1, this.resourceCount, true);\n    const removeFloaters = new AndOptions(selectAmount, selectResource);\n    removeFloaters.title = 'Convert floaters to standard resources';\n    removeFloaters.andThen(() => {\n      // TODO(kberg): Add a better log message.\n      player.removeResourceFrom(this, selectAmount.selected, {log: true});\n      player.stock.add(Units.ResourceMap[selectResource.selected], selectAmount.selected, {log: true, from: this});\n      return undefined;\n    });\n    if (this.resourceCount === 0) {\n      return add2Floaters;\n    }\n    return new OrOptions(add2Floaters, removeFloaters);\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Focused Organization",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/FocusedOrganization.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {IPlayer} from '../../IPlayer';\nimport {IActionCard} from '../ICard';\nimport {Units} from '../../../common/Units';\nimport {sum} from '../../../common/utils/utils';\nimport {AndOptions} from '../../inputs/AndOptions';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {SelectResource} from '../../inputs/SelectResource';\nimport {PathfindersExpansion} from '../../pathfinders/PathfindersExpansion';\n\nexport class FocusedOrganization extends PreludeCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.FOCUSED_ORGANIZATION,\n\n      behavior: {\n        drawCard: 1,\n        standardResource: 1,\n      },\n\n      metadata: {\n        cardNumber: 'P50',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Discard 1 card and spend 1 standard resource to draw 1 card and gain 1 standard resource.', (ab) => {\n            ab.cards(1).wild(1).startAction.cards(1).wild(1);\n          }).br;\n          b.cards(1).wild(1).br;\n          b.plainText('Draw 1 card and gain 1 standard resource.');\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.cardsInHand.length > 0 && sum(Units.values(player.stock)) > 0;\n  }\n\n  public action(player: IPlayer) {\n    const discardableStandardResources = Units.keys.filter((type) => player.stock[type] > 0);\n    return new AndOptions(\n      new SelectResource('Select resource to discard', discardableStandardResources)\n        .andThen((type) => {\n          player.stock.deduct(Units.ResourceMap[type], 1, {log: true});\n          if (type === 'megacredits' || type === 'steel' || type === 'titanium') {\n            PathfindersExpansion.addToSolBank(player);\n          }\n          return undefined;\n        }),\n      new SelectCard('Select card to discard', 'select', player.cardsInHand)\n        .andThen(([card]) => {\n          player.discardCardFromHand(card);\n          return undefined;\n        })).andThen(() => {\n      player.drawCard();\n      return new SelectResource('Select resource to gain')\n        .andThen((type) => {\n          player.stock.add(Units.ResourceMap[type], 1, {log: true});\n          return undefined;\n        });\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude2",
  "name" : "High Circles",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/HighCircles.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {ICard} from '../ICard';\nimport {IPlayer} from '../../IPlayer';\n\nexport class HighCircles extends PreludeCard implements ICard {\n  public isDisabled: boolean = false;\n\n  constructor() {\n    super({\n      name: CardName.HIGH_CIRCLES,\n      tags: [Tag.EARTH],\n\n      behavior: {\n        tr: 1,\n        turmoil: {influenceBonus: 1, sendDelegates: {count: 2}},\n      },\n\n      metadata: {\n        cardNumber: 'P51',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(1).cards(1).asterix().delegates(2).br;\n          b.plainText('Raise your TR 1 step and draw 1 card with PARTY REQUIREMENT. Place 2 delegates in one party.').br;\n\n          b.effect('You have +1 influence.',\n            (eb) => eb.startEffect.plus().influence({amount: 1}));\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.drawCard(1, {include: ((card) => card.requirements?.some((req) => req.party !== undefined))});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Industrial Complex",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : -18,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/IndustrialComplex.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {Units} from '../../../common/Units';\n\nexport class IndustrialComplex extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.INDUSTRIAL_COMPLEX,\n      tags: [Tag.BUILDING],\n\n      startingMegacredits: -18,\n\n      metadata: {\n        cardNumber: 'P52',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(-18).production((pb) => pb.one(1)).asterix();\n        }),\n        description: 'Lose 18 Mâ‚¬. INCREASE ALL YOUR PRODUCTIONS THAT ARE LOWER THAN 1, TO 1.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    let megaCredits = -this.startingMegaCredits;\n    if (player.isCorporation(CardName.MANUTECH)) {\n      if (player.production.megacredits === 0) {\n        megaCredits--;\n      }\n      if (player.canUseHeatAsMegaCredits) {\n        if (player.production.heat === 0) {\n          megaCredits--;\n        }\n      }\n      if (player.canUseTitaniumAsMegacredits) {\n        if (player.production.titanium === 0) {\n          megaCredits -= player.getTitaniumValue() - 1;\n        }\n      }\n    }\n\n    return player.canAfford(megaCredits);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const production = {...Units.EMPTY};\n    for (const key of Units.keys) {\n      if (player.production[key] <= 0) {\n        const diff = 1 - player.production[key];\n        production[key] = Math.max(diff, 1);\n      }\n    }\n    player.production.adjust(production, {log: true});\n\n    player.game.defer(new SelectPaymentDeferred(player, 18));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Main Belt Asteroids",
  "tags" : [ "space" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "resourceType" : "Asteroid",
  "startingMegaCredits" : -5,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/MainBeltAsteroids.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {IActionCard, ICard} from '../ICard';\nimport {IPlayer} from '../../IPlayer';\nimport {ActivePreludeCard} from './ActivePreludeCard';\nimport {Resource} from '../../../common/Resource';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\n\nexport class MainBeltAsteroids extends ActivePreludeCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.MAIN_BELT_ASTEROIDS,\n      tags: [Tag.SPACE],\n      resourceType: CardResource.ASTEROID,\n      victoryPoints: {resourcesHere: {}, per: 2},\n\n      startingMegacredits: -5,\n\n      action: {\n        addResourcesToAnyCard: {type: CardResource.ASTEROID, count: 1},\n      },\n\n      metadata: {\n        cardNumber: 'P53',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Gain 1 asteroid to ANY CARD.', (ab) => {\n            ab.empty().startAction.resource(CardResource.ASTEROID).asterix();\n          }).nbsp.effect('When gaining an asteroid HERE, gain 1 titanium.', (ab) => {\n            ab.resource(CardResource.ASTEROID).startEffect.titanium(1);\n          }).br.megacredits(-5);\n        }),\n        description: 'Lose 5 Mâ‚¬. 1 VP per 2 asteroids here.',\n      },\n    });\n  }\n\n  public onResourceAdded(player: IPlayer, card: ICard, count: number) {\n    if (card === this) {\n      player.stock.add(Resource.TITANIUM, count, {log: true, from: this});\n    }\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return player.canAfford(5);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new SelectPaymentDeferred(player, 5));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Nobel Prize",
  "tags" : [ "wild" ],
  "victoryPoints" : 2,
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 5,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/NobelPrize.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\nimport {IPlayer} from '../../IPlayer';\n\nexport class NobelPrize extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.NOBEL_PRIZE,\n      tags: [Tag.WILD],\n      victoryPoints: 2,\n\n      behavior: {\n        stock: {megacredits: 5},\n      },\n\n      metadata: {\n        cardNumber: 'P54',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(5).cards(2, {secondaryTag: AltSecondaryTag.REQ});\n        }),\n        description: 'Gain 5 Mâ‚¬. Draw 2 cards with requirements.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.drawCard(2, {include: ((card) =>card.requirements.length > 0)});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Old Mining Colony",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/prelude2/OldMiningColony.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {IPlayer} from '../../IPlayer';\nimport {DiscardCards} from '../../deferredActions/DiscardCards';\nimport {Priority} from '../../deferredActions/Priority';\n\nexport class OldMiningColony extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.OLD_MINING_COLONY,\n      tags: [Tag.SPACE],\n\n      behavior: {\n        production: {titanium: 1},\n        colonies: {buildColony: {}},\n      },\n\n      metadata: {\n        cardNumber: 'P55',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.titanium(1)).colonies(1).minus().cards(1);\n        }),\n        description: 'Increase your titanium production 1 step. Place 1 colony. Discard 1 card.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return player.cardsInHand.length > 0;\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new DiscardCards(player, 1), Priority.DISCARD_CARDS);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Planetary Alliance",
  "tags" : [ "earth", "jovian", "venus" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/PlanetaryAlliance.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class PlanetaryAlliance extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.PLANETARY_ALLIANCE,\n      tags: [Tag.EARTH, Tag.JOVIAN, Tag.VENUS],\n\n      behavior: {\n        tr: 2,\n      },\n\n      metadata: {\n        cardNumber: 'P56',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(2).cards(1, {secondaryTag: Tag.JOVIAN}).cards(1, {secondaryTag: Tag.VENUS});\n        }),\n        description: 'Raise your TR 2 steps. Draw 1 Jovian card and 1 Venus card.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.drawCard(1, {tag: Tag.JOVIAN});\n    player.drawCard(1, {tag: Tag.VENUS});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Preservation Program",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/PreservationProgram.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {cancelled, digit} from '../Options';\nimport {Size} from '../../../common/cards/render/Size';\nimport {IPlayer} from '../../IPlayer';\n\nexport class PreservationProgram extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.PRESERVATION_PROGRAM,\n\n      behavior: {\n        tr: 5,\n      },\n\n      metadata: {\n        cardNumber: 'P57',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('SKIP THE FIRST TR YOU GAIN IN EACH GENERATION\\'S ACTION PHASE.', (eb) => {\n            eb.empty().startEffect.tr(1, {size: Size.SMALL, cancelled});\n          }).br;\n          b.tr(5, {digit});\n        }),\n        description: 'Raise your TR 5 steps.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.preservationProgram = true;\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Project Eden",
  "tags" : [ "city", "plant" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/ProjectEden.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../../server/IPlayer';\nimport {PlaceOceanTile} from '../../deferredActions/PlaceOceanTile';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {PlaceGreeneryTile} from '../../deferredActions/PlaceGreeneryTile';\nimport {PlaceCityTile} from '../../deferredActions/PlaceCityTile';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {DiscardCards} from '../../deferredActions/DiscardCards';\n\nexport class ProjectEden extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.PROJECT_EDEN,\n      tags: [Tag.CITY, Tag.PLANT],\n\n      metadata: {\n        cardNumber: 'P58',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(1).city().greenery().text('-3').cards(1);\n        }),\n        description: 'Place 1 ocean tile, 1 city tile, and 1 greenery tile. Discard 3 cards.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return player.cardsInHand.length >= 3 && player.canAfford({cost: 0, tr: {oceans: 1, oxygen: 1}});\n  }\n\n  private selected: Array<'ocean' | 'city' | 'greenery' | 'discard'> = [];\n  private selectNextAction(player: IPlayer): void {\n    const options: Array<SelectOption> = [];\n\n    if (!this.selected.includes('ocean')) {\n      options.push(\n        new SelectOption('Place an ocean').andThen(() => {\n          this.selected.push('ocean');\n          player.game\n            .defer(new PlaceOceanTile(player))\n            .andThen(() => this.selectNextAction(player));\n          return undefined;\n        }),\n      );\n    }\n    if (!this.selected.includes('city')) {\n      options.push(\n        new SelectOption('Place a city').andThen(() => {\n          this.selected.push('city');\n          player.game\n            .defer(new PlaceCityTile(player))\n            .andThen(() => this.selectNextAction(player));\n          return undefined;\n        }),\n      );\n    }\n    if (!this.selected.includes('greenery')) {\n      options.push(\n        new SelectOption('Place a greenery').andThen(() => {\n          this.selected.push('greenery');\n          player.game\n            .defer(new PlaceGreeneryTile(player))\n            .andThen(() => this.selectNextAction(player));\n          return undefined;\n        }),\n      );\n    }\n    if (!this.selected.includes('discard')) {\n      options.push(\n        new SelectOption('Discard 3 cards').andThen(() => {\n          this.selected.push('discard');\n          player.game\n            .defer(new DiscardCards(player, 3, 3, 'Select 3 cards to discard'))\n            .andThen(() => this.selectNextAction(player));\n          return undefined;\n        }),\n      );\n    }\n\n    if (options.length > 0) {\n      player.defer(new OrOptions(...options));\n    }\n  }\n\n  public override play(player: IPlayer) {\n    this.selectNextAction(player);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Recession",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 10,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/Recession.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {all} from '../Options';\n\n\nexport class Recession extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.RECESSION,\n\n      behavior: {\n        stock: {megacredits: 10},\n      },\n\n      metadata: {\n        cardNumber: 'P59',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(-5, {all}).asterix().production((pb) => pb.megacredits(-1, {all})).asterix().megacredits(10);\n        }),\n        description: 'EACH OPPONENT loses 5 Mâ‚¬ and decreases their Mâ‚¬ production 1 step. You gain 10 Mâ‚¬.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    for (const target of player.getOpponents()) {\n      if (target.production.megacredits === -5) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    for (const target of player.getOpponents()) {\n      target.maybeBlockAttack(player, (proceed) => {\n        if (proceed) {\n          target.production.add(Resource.MEGACREDITS, -1, {log: true, from: player});\n          target.stock.deduct(Resource.MEGACREDITS, Math.min(target.megaCredits, 5), {log: true, from: player});\n        }\n        return undefined;\n      });\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Rise To Power",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/prelude2/RiseToPower.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\n\n\nexport class RiseToPower extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.RISE_TO_POWER,\n\n      behavior: {\n        production: {megacredits: 3},\n        turmoil: {sendDelegates: {count: 3, manyParties: true}},\n      },\n\n      metadata: {\n        cardNumber: 'P60',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(3)).delegates(3).asterix().br;\n        }),\n        description: 'Increase your Mâ‚¬ production 3 steps and place 3 delegates. YOU MAY PLACE THEM IN SEPARATE PARTIES.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Soil Bacteria",
  "tags" : [ "microbe" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/SoilBacteria.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class SoilBacteria extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.SOIL_BACTERIA,\n      tags: [Tag.MICROBE],\n\n      behavior: {\n        stock: {plants: 3},\n        drawCard: {count: 2, tag: Tag.MICROBE},\n      },\n\n      metadata: {\n        description: 'Draw 2 microbe cards and gain 3 plants.',\n        cardNumber: 'P61',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When playing a plant tag or a microbe tag, including this, gain 1 plant.', (eb) => {\n            eb.tag(Tag.PLANT).slash().tag(Tag.MICROBE).startEffect.plants(1);\n          });\n          b.br;\n          b.cards(2, {secondaryTag: Tag.MICROBE}).plants(3);\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard): void {\n    const amount = player.tags.cardTagCount(card, [Tag.PLANT, Tag.MICROBE]);\n    if (amount > 0) {\n      player.defer(() => player.stock.add(Resource.PLANTS, amount, {log: true}));\n    }\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Space Lanes",
  "tags" : [ "space" ],
  "cardDiscount" : [ {
    "tag" : "jovian",
    "amount" : 2
  }, {
    "tag" : "earth",
    "amount" : 2
  }, {
    "tag" : "venus",
    "amount" : 2
  } ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/SpaceLanes.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\n\nexport class SpaceLanes extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.SPACE_LANES,\n      tags: [Tag.SPACE],\n\n      cardDiscount: [\n        {tag: Tag.JOVIAN, amount: 2},\n        {tag: Tag.EARTH, amount: 2},\n        {tag: Tag.VENUS, amount: 2},\n      ],\n\n      behavior: {\n        stock: {titanium: 3},\n      },\n\n      metadata: {\n        cardNumber: 'P62',\n        description: 'Gain 3 titanium.',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play a Jovian, Earth, or Venus tag, you pay 2 Mâ‚¬ less for it.', (eb) => {\n            eb.tag(Tag.JOVIAN).tag(Tag.EARTH).tag(Tag.VENUS).startEffect.megacredits(-2);\n          });\n          b.br;\n          b.titanium(3);\n        }),\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude2",
  "name" : "Suitable Infrastructure",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/SuitableInfrastructure.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {sum} from '../../../common/utils/utils';\n\nexport class SuitableInfrastructure extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.SUITABLE_INFRASTRUCTURE,\n      tags: [Tag.BUILDING],\n\n      behavior: {\n        stock: {steel: 5},\n      },\n\n      metadata: {\n        cardNumber: 'P63',\n        description: 'Gain 5 steel.',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Once per action you take, gain 2 Mâ‚¬ if you increase any productions.', (eb) => {\n            eb.production((pb) => pb.wild(1)).asterix().startEffect.megacredits(2);\n          });\n          b.br;\n          b.steel(5);\n        }),\n      },\n    });\n  }\n\n  // Behavior is similar in Demetron labs\n  // This doesn't need to be serialized. It ensures this is only evaluated once per action.\n  // When the server restarts, the player has to take an action anyway.\n  private lastActionId = -1;\n  public onProductionGain(player: IPlayer, _resource: Resource, amount: number) {\n    if (player.game.activePlayer !== player.id || amount === 0) {\n      return;\n    }\n    const actionId = sum(player.game.getPlayers().map((p) => p.actionsTakenThisGame));\n    if (this.lastActionId !== actionId) {\n      player.stock.add(Resource.MEGACREDITS, 2);\n      this.lastActionId = actionId;\n    }\n  }\n}\n\n"
}, {
  "module" : "prelude2",
  "name" : "Terraforming Deal",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/TerraformingDeal.ts",
  "sourceCode" : "\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {Phase} from '../../../common/Phase';\nimport {Resource} from '../../../common/Resource';\nimport {PreludeCard} from '../prelude/PreludeCard';\n\nexport class TerraformingDeal extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.TERRAFORMING_DEAL,\n      tags: [Tag.EARTH],\n\n      metadata: {\n        cardNumber: 'P64',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Each step your TR is raised, you gain 2 Mâ‚¬.', (eb) => {\n            eb.tr(1).startEffect.megacredits(2);\n          });\n        }),\n      },\n    });\n  }\n\n  // TODO(kberg): Like UNMO, TerraformingDeal can generate MC for raising TR  that MC can offset reds costs?\n  public onIncreaseTerraformRating(player: IPlayer, cardOwner: IPlayer, steps: number) {\n    if (cardOwner === player) {\n      const phase = player.game.phase;\n      if (phase === Phase.ACTION || phase === Phase.PRELUDES) {\n        cardOwner.stock.add(Resource.MEGACREDITS, 2 * steps, {log: true});\n      }\n    }\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Venus Contract",
  "tags" : [ "venus" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/VenusContract.ts",
  "sourceCode" : "\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {GlobalParameter} from '../../../common/GlobalParameter';\n\nexport class VenusContract extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.VENUS_CONTRACT,\n      tags: [Tag.VENUS],\n\n      behavior: {\n        drawCard: {count: 1, tag: Tag.VENUS},\n        tr: 1,\n      },\n\n      metadata: {\n        cardNumber: 'P65',\n        description: 'Draw 1 Venus card. Raise your TR 1 step.',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Each step you raise Venus, gain 3 Mâ‚¬.', (eb) => {\n            eb.venus(1).startEffect.megacredits(3);\n          });\n          b.br;\n          b.cards(1, {secondaryTag: Tag.VENUS}).tr(1);\n        }),\n      },\n    });\n  }\n\n  public onGlobalParameterIncrease(player: IPlayer, parameter: GlobalParameter, steps: number) {\n    if (parameter === GlobalParameter.VENUS) {\n      player.stock.add(Resource.MEGACREDITS, 3 * steps, {log: true});\n    }\n  }\n}\n"
}, {
  "module" : "prelude2",
  "name" : "Venus L1 Shade",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/prelude2/VenusL1Shade.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class VenusL1Shade extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.VENUS_L1_SHADE,\n      tags: [Tag.SPACE],\n      behavior: {\n        global: {venus: 3},\n      },\n\n      metadata: {\n        cardNumber: 'P66',\n        renderData: CardRenderer.builder((b) => {\n          b.venus(3);\n        }),\n        description: 'Raise Venus 3 steps.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "prelude2",
  "name" : "World Government Advisor",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/prelude2/WorldGovernmentAdvisor.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IActionCard} from '../ICard';\nimport {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {Phase} from '../../../common/Phase';\nimport {Priority} from '../../deferredActions/Priority';\nimport {SimpleDeferredAction} from '../../deferredActions/DeferredAction';\n\nexport class WorldGovernmentAdvisor extends PreludeCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.WORLD_GOVERNMENT_ADVISOR,\n      tags: [Tag.EARTH],\n\n      behavior: {\n        tr: 2,\n        drawCard: 1,\n      },\n\n      metadata: {\n        cardNumber: 'P67',\n        renderData: CardRenderer.builder((b) => {\n          b.action('RAISE 1 GLOBAL PARAMETER WITHOUT GETTING ANY TR OR OTHER BONUSES.', (ab) => {\n            ab.empty().startAction.oceans(1).oxygen(1).temperature(1).venus(1).asterix();\n          }).br;\n          b.tr(2).cards(1);\n        }),\n        description: 'Raise your TR 2 steps. Draw 1 card.',\n      },\n    });\n  }\n\n  public canAct(player: IPlayer) {\n    const orOptions = player.game.worldGovernmentTerraformingInput(player);\n    if (orOptions.options.length === 0) {\n      this.warnings.add('marsIsTerraformed');\n    }\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    const game = player.game;\n\n    // This temporarily changes the game phase to Solar so the current player does not\n    // benefit from the global parameter change.\n    const phase = game.phase;\n    game.phase = Phase.SOLAR;\n    game.defer(new SimpleDeferredAction(player, () => {\n      game.phase = phase;\n      return undefined;\n    }), Priority.BACK_OF_THE_LINE);\n\n    const orOptions = game.worldGovernmentTerraformingInput(player);\n    return (orOptions.options.length === 0) ? undefined : orOptions;\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Aerial Lenses",
  "tags" : [ ],
  "victoryPoints" : -1,
  "cost" : 2,
  "type" : "automated",
  "requirements" : [ {
    "party" : "Kelvinists"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/AerialLenses.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class AerialLenses extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.AERIAL_LENSES,\n      cost: 2,\n      victoryPoints: -1,\n\n      behavior: {\n        production: {heat: 2},\n        removeAnyPlants: 2,\n      },\n\n      requirements: {party: PartyName.KELVINISTS},\n      metadata: {\n        description: 'Requires that Kelvinists are ruling or that you have 2 delegates there. Remove up to 2 plants from any player. Increase your heat production 2 steps.',\n        cardNumber: 'T01',\n        renderData: CardRenderer.builder((b) => b.minus().plants(-2, {all}).production((pb) => pb.heat(2))),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Banned Delegate",
  "tags" : [ ],
  "cost" : 0,
  "type" : "event",
  "requirements" : [ {
    "chairman" : true
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/BannedDelegate.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectDelegate} from '../../inputs/SelectDelegate';\nimport {IParty} from '../../turmoil/parties/IParty';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {NeutralPlayer, Turmoil} from '../../turmoil/Turmoil';\nimport {all} from '../Options';\nimport {MultiSet} from 'mnemonist';\n\nexport class BannedDelegate extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.BANNED_DELEGATE,\n      cost: 0,\n\n      requirements: {chairman: true},\n      metadata: {\n        cardNumber: 'T02',\n        description: 'Requires that you are Chairman. Remove any NON-LEADER delegate.',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().delegates(1, {all});\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer): OrOptions | SelectDelegate | undefined {\n    const turmoil = Turmoil.getTurmoil(player.game);\n    const orOptions: Array<SelectDelegate> = [];\n    // Take each party having more than just the party leader in the area\n    for (const party of turmoil.parties) {\n      if (party.delegates.size > 1) {\n        // Remove the party leader from available choices\n        const copy = MultiSet.from(party.delegates);\n        if (party.partyLeader !== undefined) {\n          copy.remove(party.partyLeader);\n        } else {\n          // This wouldn't happen normally.\n          throw new Error(`partyLeader not defined for ${player.game.id}`);\n        }\n        const players: Array<IPlayer | NeutralPlayer> = [];\n        for (const entry of copy.multiplicities()) {\n          if (entry[0] === 'NEUTRAL') {\n            players.push('NEUTRAL');\n          } else {\n            players.push(entry[0]);\n          }\n        }\n\n        if (players.length > 0) {\n          const selectDelegate = new SelectDelegate(players, 'Select player delegate to remove from ' + party.name + ' party')\n            .andThen((selectedPlayer) => {\n              turmoil.removeDelegateFromParty(selectedPlayer, party.name, player.game);\n              this.log(player, party, selectedPlayer);\n              return undefined;\n            });\n          selectDelegate.buttonLabel = 'Remove delegate';\n          orOptions.push(selectDelegate);\n        }\n      }\n    }\n    if (orOptions.length === 0) {\n      return undefined;\n    } else if (orOptions.length === 1) {\n      return orOptions[0];\n    } else {\n      const options = new OrOptions(...orOptions);\n      return options;\n    }\n  }\n\n  private log(player: IPlayer, party: IParty, selectedPlayer: IPlayer | NeutralPlayer) {\n    if (selectedPlayer === 'NEUTRAL') {\n      player.game.log('${0} removed neutral delegate from ${1}', (b) => b.player(player).party(party));\n    } else {\n      player.game.log('${0} removed ${1}\\'s delegate from ${2}', (b) => b.player(player).player(selectedPlayer).party(party));\n    }\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Cultural Metropolis",
  "tags" : [ "city", "building" ],
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ {
    "party" : "Unity"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/CulturalMetropolis.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {SendDelegateToArea} from '../../deferredActions/SendDelegateToArea';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Turmoil} from '../../turmoil/Turmoil';\n\nexport class CulturalMetropolis extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.CULTURAL_METROPOLIS,\n      tags: [Tag.CITY, Tag.BUILDING],\n      cost: 20,\n\n      behavior: {\n        production: {energy: -1, megacredits: 3},\n        city: {},\n      },\n\n      requirements: {party: PartyName.UNITY},\n      metadata: {\n        cardNumber: 'T03',\n        description: 'Requires that Unity is ruling or that you have 2 delegates there. Decrease your energy production 1 step and increase your Mâ‚¬ production 3 steps. Place a city tile. Place 2 delegates in 1 party.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().megacredits(3);\n          }).city().delegates(2);\n        }),\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    const turmoil = Turmoil.getTurmoil(player.game);\n    return turmoil.getAvailableDelegateCount(player) >= 2 && player.game.board.getAvailableSpacesForCity(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new SendDelegateToArea(player, 'Select where to send two delegates', {count: 2}));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Diaspora Movement",
  "tags" : [ "jovian" ],
  "victoryPoints" : 1,
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "party" : "Reds"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/DiasporaMovement.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\n\nexport class DiasporaMovement extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.DIASPORA_MOVEMENT,\n      tags: [Tag.JOVIAN],\n      cost: 7,\n      requirements: {party: PartyName.REDS},\n      victoryPoints: 1,\n\n      behavior: {\n        stock: {megacredits: {tag: Tag.JOVIAN, all: true}},\n      },\n\n      metadata: {\n        cardNumber: 'TO4',\n        description: 'Requires that Reds are ruling or that you have 2 delegates there. Gain 1Mâ‚¬ for each Jovian tag in play, including this.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(1).slash().tag(Tag.JOVIAN, {all});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Event Analysts",
  "tags" : [ "science" ],
  "cost" : 5,
  "type" : "active",
  "requirements" : [ {
    "party" : "Scientists"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/EventAnalysts.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class EventAnalysts extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.EVENT_ANALYSTS,\n      tags: [Tag.SCIENCE],\n      cost: 5,\n\n      behavior: {\n        turmoil: {influenceBonus: 1},\n      },\n\n      requirements: {party: PartyName.SCIENTISTS},\n      metadata: {\n        description: 'Requires that Scientists are ruling or that you have 2 delegates there.',\n        cardNumber: 'T05',\n        renderData: CardRenderer.builder((b) => b.effect('You have +1 influence.', (be) => {\n          be.startEffect.influence();\n        })),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "GMO Contract",
  "tags" : [ "microbe", "science" ],
  "cost" : 3,
  "type" : "active",
  "requirements" : [ {
    "party" : "Greens"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/GMOContract.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class GMOContract extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.GMO_CONTRACT,\n      tags: [Tag.MICROBE, Tag.SCIENCE],\n      cost: 3,\n\n      requirements: {party: PartyName.GREENS},\n      metadata: {\n        description: 'Requires that Greens are ruling or that you have 2 delegates there.',\n        cardNumber: 'T06',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Each time you play a plant, animal or microbe tag, including this, gain 2 Mâ‚¬.', (be) => {\n            be.tag(Tag.ANIMAL).slash().tag(Tag.PLANT).slash().tag(Tag.MICROBE);\n            be.startEffect.megacredits(2);\n          });\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard): void {\n    const amount = player.tags.cardTagCount(card, [Tag.ANIMAL, Tag.PLANT, Tag.MICROBE]);\n    if (amount > 0) {\n      player.defer(() => player.stock.add(Resource.MEGACREDITS, amount * 2, {log: true}));\n    }\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Martian Media Center",
  "tags" : [ "building" ],
  "cost" : 7,
  "type" : "active",
  "requirements" : [ {
    "party" : "Mars First"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/MartianMediaCenter.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MartianMediaCenter extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MARTIAN_MEDIA_CENTER,\n      tags: [Tag.BUILDING],\n      cost: 7,\n\n      behavior: {\n        production: {megacredits: 2},\n      },\n\n      action: {\n        spend: {megacredits: 3},\n        turmoil: {sendDelegates: {count: 1}},\n      },\n\n      requirements: {party: PartyName.MARS},\n      metadata: {\n        cardNumber: 'T07',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Pay 3 Mâ‚¬ to add a delegate to any party.', (eb) => {\n            eb.megacredits(3).startAction.delegates(1);\n          }).br;\n          b.production((pb) => {\n            pb.megacredits(2);\n          });\n        }),\n        description: 'Requires that Mars First is ruling or that you have 2 delegates there. Increase your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Parliament Hall",
  "tags" : [ "building" ],
  "victoryPoints" : 1,
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "party" : "Mars First"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/ParliamentHall.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class ParliamentHall extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.PARLIAMENT_HALL,\n      tags: [Tag.BUILDING],\n      cost: 8,\n      requirements: {party: PartyName.MARS},\n      victoryPoints: 1,\n\n      behavior: {\n        production: {megacredits: {tag: Tag.BUILDING, per: 3}},\n      },\n\n      metadata: {\n        cardNumber: 'T08',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.megacredits(1).slash().tag(Tag.BUILDING, 3);\n          });\n        }),\n        description: 'Requires that Mars First are ruling or that you have 2 delegates there. Increase your Mâ‚¬ production 1 step for every 3 building tags you have, including this.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "PR Office",
  "tags" : [ "earth" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "party" : "Unity"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/PROffice.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class PROffice extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.PR_OFFICE,\n      tags: [Tag.EARTH],\n      cost: 7,\n\n      behavior: {\n        tr: 1,\n        stock: {megacredits: {tag: Tag.EARTH}},\n      },\n\n      requirements: {party: PartyName.UNITY},\n      metadata: {\n        cardNumber: 'T09',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(1).br;\n          b.megacredits(1).slash().tag(Tag.EARTH);\n        }),\n        description: 'Requires that Unity are ruling or that you have 2 delegates there. Gain 1 TR. Gain 1 Mâ‚¬ for each Earth tag you have, including this.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Political Alliance",
  "tags" : [ ],
  "cost" : 4,
  "type" : "event",
  "requirements" : [ {
    "partyLeader" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/PoliticalAlliance.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class PoliticalAlliance extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.POLITICAL_ALLIANCE,\n      cost: 4,\n\n      behavior: {\n        tr: 1,\n      },\n\n      requirements: {partyLeader: 2},\n      metadata: {\n        cardNumber: 'X09',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(1);\n        }),\n        description: 'Requires that you have 2 party leaders. Gain 1 TR.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Public Celebrations",
  "tags" : [ ],
  "victoryPoints" : 2,
  "cost" : 8,
  "type" : "event",
  "requirements" : [ {
    "chairman" : true
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/PublicCelebrations.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Card} from '../Card';\n\nexport class PublicCelebrations extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 8,\n      tags: [],\n      name: CardName.PUBLIC_CELEBRATIONS,\n      type: CardType.EVENT,\n\n      requirements: {chairman: true},\n      victoryPoints: 2,\n\n      metadata: {\n        description: 'Requires that you are Chairman.',\n        cardNumber: 'T10',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Recruitment",
  "tags" : [ ],
  "cost" : 2,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/Recruitment.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {SendDelegateToArea} from '../../deferredActions/SendDelegateToArea';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Turmoil} from '../../turmoil/Turmoil';\nimport {all} from '../Options';\n\nexport class Recruitment extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.RECRUITMENT,\n      cost: 2,\n      type: CardType.EVENT,\n\n      metadata: {\n        cardNumber: 'T11',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().delegates(1, {all}).asterix().nbsp.plus().delegates(1);\n        }),\n        description: 'Exchange one NEUTRAL NON-LEADER delegate with one of your own from the reserve.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    const turmoil = Turmoil.getTurmoil(player.game);\n    if (turmoil.hasDelegatesInReserve(player) === false) {\n      return false;\n    }\n\n    return turmoil.parties.some((party) => {\n      const neutralDelegates = party.delegates.count('NEUTRAL');\n      return neutralDelegates > 1 || (neutralDelegates === 1 && party.partyLeader !== 'NEUTRAL');\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new SendDelegateToArea(player, 'Select which Neutral delegate to remove', {replace: 'NEUTRAL'}));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Red Tourism Wave",
  "tags" : [ "earth" ],
  "cost" : 3,
  "type" : "event",
  "requirements" : [ {
    "party" : "Reds"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/RedTourismWave.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Card} from '../Card';\nimport {isHazardTileType} from '../../../common/AresTileType';\nimport {Space} from '../../../server/boards/Space';\nimport {SpaceType} from '../../../common/boards/SpaceType';\n\nexport class RedTourismWave extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 3,\n      tags: [Tag.EARTH],\n      name: CardName.RED_TOURISM_WAVE,\n      type: CardType.EVENT,\n\n      requirements: {party: PartyName.REDS},\n      metadata: {\n        cardNumber: 'T12',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(1).slash().emptyTile('normal', {size: Size.SMALL}).asterix();\n        }),\n        description: 'Requires that Reds are ruling or that you have 2 delegates there. Gain 1 Mâ‚¬ from each EMPTY AREA ADJACENT TO YOUR TILES',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const amount = RedTourismWave.getAdjacentEmptySpacesCount(player);\n    player.stock.add(Resource.MEGACREDITS, amount, {log: true});\n    return undefined;\n  }\n\n  private static hasRealTile(space: Space) {\n    return space.tile !== undefined && !isHazardTileType(space.tile.tileType);\n  }\n\n  // This is static because it's shared with Tourist.\n  public static getAdjacentEmptySpacesCount(player: IPlayer): number {\n    const board = player.game.board;\n    return board.spaces.filter((space) => {\n      if (space.spaceType === SpaceType.COLONY) {\n        return false;\n      }\n      if (this.hasRealTile(space)) {\n        return false;\n      }\n      return board.getAdjacentSpaces(space).some((adj) => {\n        return this.hasRealTile(adj) && adj.player === player;\n      });\n    }).length;\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Sponsored Mohole",
  "tags" : [ "building" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ {
    "party" : "Kelvinists"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/SponsoredMohole.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class SponsoredMohole extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 5,\n      tags: [Tag.BUILDING],\n      name: CardName.SPONSORED_MOHOLE,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        production: {heat: 2},\n      },\n\n      requirements: {party: PartyName.KELVINISTS},\n      metadata: {\n        cardNumber: 'T13',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.heat(2));\n        }),\n        description: 'Requires that Kelvinists are ruling or that you have 2 delegates there. Increase your heat production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Supported Research",
  "tags" : [ "science" ],
  "cost" : 3,
  "type" : "automated",
  "requirements" : [ {
    "party" : "Scientists"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/SupportedResearch.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class SupportedResearch extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 3,\n      tags: [Tag.SCIENCE],\n      name: CardName.SUPPORTED_RESEARCH,\n      type: CardType.AUTOMATED,\n\n      behavior: {\n        drawCard: 2,\n      },\n\n      requirements: {party: PartyName.SCIENTISTS},\n      metadata: {\n        cardNumber: 'T14',\n        renderData: CardRenderer.builder((b) => {\n          b.cards(2);\n        }),\n        description: 'Requires that Scientists are ruling or that you have 2 delegates there. Draw 2 cards.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Wildlife Dome",
  "tags" : [ "animal", "plant", "building" ],
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ {
    "party" : "Greens"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/WildlifeDome.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class WildlifeDome extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.WILDLIFE_DOME,\n      cost: 15,\n      tags: [Tag.ANIMAL, Tag.PLANT, Tag.BUILDING],\n      type: CardType.AUTOMATED,\n      requirements: {party: PartyName.GREENS},\n\n      behavior: {\n        greenery: {},\n      },\n\n      metadata: {\n        cardNumber: 'T15',\n        renderData: CardRenderer.builder((b) => {\n          b.greenery();\n        }),\n        description: 'Requires that Greens are ruling or that you have 2 delegates there. Place a greenery tile and raise oxygen 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Vote Of No Confidence",
  "tags" : [ ],
  "cost" : 5,
  "type" : "event",
  "requirements" : [ {
    "partyLeader" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/VoteOfNoConfidence.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Turmoil} from '../../turmoil/Turmoil';\nimport {all} from '../Options';\n\nexport class VoteOfNoConfidence extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.VOTE_OF_NO_CONFIDENCE,\n      type: CardType.EVENT,\n      cost: 5,\n      tr: {tr: 1},\n\n      // TODO(kberg): this renders a delegate with a tie and a black background. On the physical card, there is\n      // no black background.\n      requirements: {partyLeader: 1},\n      metadata: {\n        cardNumber: 'T16',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().chairman({all}).asterix();\n          b.nbsp.plus().partyLeaders().br;\n          b.tr(1);\n        }),\n        description: 'Requires that you have a Party Leader in any party and that the sitting Chairman is neutral. ' +\n          'Remove the NEUTRAL Chairman and move your own delegate (from the reserve) there instead. Gain 1 TR.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    const turmoil = Turmoil.getTurmoil(player.game);\n    if (!turmoil.hasDelegatesInReserve(player)) return false;\n\n    return turmoil.chairman === 'NEUTRAL';\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const turmoil = Turmoil.getTurmoil(player.game);\n    turmoil.delegateReserve.remove(player);\n    turmoil.setNewChairman(player, player.game, /* setAgenda */ false);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Lakefront Resorts",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 50,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/LakefrontResorts.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Priority} from '../../deferredActions/Priority';\nimport {GainProduction} from '../../deferredActions/GainProduction';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\nimport {Board} from '../../boards/Board';\n\nexport class LakefrontResorts extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.LAKEFRONT_RESORTS,\n      tags: [Tag.BUILDING],\n      startingMegaCredits: 50,\n\n      metadata: {\n        cardNumber: 'R38',\n        description: 'You start with 50 Mâ‚¬.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br.br;\n          b.megacredits(50);\n          b.corpBox('effect', (ce) => {\n            ce.vSpace(Size.MEDIUM);\n            ce.effect('When any ocean tile is placed, increase your Mâ‚¬ production 1 step. Your bonus for placing adjacent to oceans is 3Mâ‚¬ instead of 2 Mâ‚¬.', (eb) => {\n              eb.oceans(1, {size: Size.SMALL, all}).colon().production((pb) => pb.megacredits(1));\n              eb.emptyTile('normal', {size: Size.SMALL}).oceans(1, {size: Size.SMALL});\n              eb.startEffect.megacredits(3);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.oceanBonus = 3;\n    return undefined;\n  }\n\n  public override onDiscard(player: IPlayer) {\n    player.oceanBonus = 2;\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    if (Board.isUncoveredOceanSpace(space)) {\n      cardOwner.game.defer(\n        new GainProduction(cardOwner, Resource.MEGACREDITS),\n        cardOwner.id !== activePlayer.id ? Priority.OPPONENT_TRIGGER : undefined,\n      );\n    }\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Pristar",
  "tags" : [ ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Preservation",
  "startingMegaCredits" : 53,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/Pristar.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Resource} from '../../../common/Resource';\n\nexport class Pristar extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.PRISTAR,\n      startingMegaCredits: 53,\n      resourceType: CardResource.PRESERVATION,\n\n      victoryPoints: {resourcesHere: {}},\n\n      metadata: {\n        cardNumber: 'R07',\n        description: 'You start with 53 Mâ‚¬. 1 VP per preservation resource here.',\n\n        renderData: CardRenderer.builder((b) => {\n          b.br.br.br;\n          b.megacredits(53);\n          b.corpBox('effect', (ce) => {\n            ce.effect('During production phase, if you did not get TR so far this generation, add one preservation resource here and gain 6 Mâ‚¬.', (eb) => {\n              eb.tr(1, {size: Size.SMALL, cancelled: true}).startEffect.resource(CardResource.PRESERVATION).megacredits(6);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  // public override bespokePlay(player: IPlayer) {\n  //    player.decreaseTerraformRating(2);\n  //    return undefined;\n  //  }\n\n  public onProductionPhase(player: IPlayer) {\n    if (!(player.hasIncreasedTerraformRatingThisGeneration)) {\n      player.stock.add(Resource.MEGACREDITS, 6, {log: true, from: this});\n      player.addResourceTo(this, 1);\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Terralabs Research",
  "tags" : [ "science", "earth", "moon" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 20,
  "cardCost" : 1,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/TerralabsResearch.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class TerralabsResearch extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.TERRALABS_RESEARCH,\n      tags: [Tag.SCIENCE, Tag.EARTH, Tag.MOON],\n      startingMegaCredits: 20,\n      cardCost: 1,\n\n      metadata: {\n        cardNumber: 'R14',\n        description: 'You start with 20 Mâ‚¬. Lower your TR 0 steps xD.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.megacredits(14).nbsp.minus().tr(0);\n          b.corpBox('effect', (ce) => {\n            ce.effect('Buying cards to hand costs 1 Mâ‚¬.', (eb) => {\n              eb.cards(1).startEffect.megacredits(1);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.decreaseTerraformRating(0);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Utopia Invest",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 40,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/turmoil/UtopiaInvest.ts",
  "sourceCode" : "import {IActionCard} from '../ICard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class UtopiaInvest extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.UTOPIA_INVEST,\n      tags: [Tag.BUILDING],\n      startingMegaCredits: 40,\n\n      behavior: {\n        production: {steel: 2, titanium: 1},\n      },\n\n      metadata: {\n        cardNumber: 'R33',\n        description: 'You start with 40 Mâ‚¬. Increase your steel prod * 2 and titanium prod 1 step.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.megacredits(40).nbsp.production((pb) => pb.steel(2).titanium(1));\n          b.corpBox('action', (ce) => {\n            ce.action('Decrease any production to gain 4 resources of that kind.', (eb) => {\n              eb.production((eb) => eb.wild(1)).startAction.wild(4, {digit});\n            });\n          });\n        }),\n      },\n    });\n  }\n  public canAct(player: IPlayer): boolean {\n    return player.production.megacredits +\n                player.production.steel +\n                player.production.titanium +\n                player.production.plants +\n                player.production.energy +\n                player.production.heat > -5;\n  }\n  private log(player: IPlayer, type: string) {\n    player.game.log('${0} decreased ${1} production 1 step to gain 4 ${2}', (b) => b.player(player).string(type).string(type));\n  }\n  public action(player: IPlayer) {\n    const result = new OrOptions();\n    result.title = 'Select production to decrease one step and gain 4 resources';\n\n    const options = [];\n\n    const reduceMegacredits = new SelectOption('Decrease Mâ‚¬ production', 'Decrease production').andThen(() => {\n      player.production.add(Resource.MEGACREDITS, -1);\n      player.megaCredits += 4;\n      this.log(player, 'megacredit');\n      return undefined;\n    });\n\n    const reduceSteel = new SelectOption('Decrease steel production', 'Decrease production').andThen(() => {\n      player.production.add(Resource.STEEL, -1);\n      player.steel += 4;\n      this.log(player, 'steel');\n      return undefined;\n    });\n\n    const reduceTitanium = new SelectOption('Decrease titanium production', 'Decrease production').andThen(() => {\n      player.production.add(Resource.TITANIUM, -1);\n      player.titanium += 4;\n      this.log(player, 'titanium');\n      return undefined;\n    });\n\n    const reducePlants = new SelectOption('Decrease plants production', 'Decrease production').andThen(() => {\n      player.production.add(Resource.PLANTS, -1);\n      player.plants += 4;\n      this.log(player, 'plant');\n      return undefined;\n    });\n\n    const reduceEnergy = new SelectOption('Decrease energy production', 'Decrease production').andThen(() => {\n      player.production.add(Resource.ENERGY, -1);\n      player.energy += 4;\n      this.log(player, 'energy');\n      return undefined;\n    });\n\n    const reduceHeat = new SelectOption('Decrease heat production', 'Decrease production').andThen(() => {\n      player.production.add(Resource.HEAT, -1);\n      player.heat += 4;\n      this.log(player, 'heat');\n      return undefined;\n    });\n\n    if (player.production.megacredits > -5) {\n      options.push(reduceMegacredits);\n    }\n    if (player.production.steel > 0) {\n      options.push(reduceSteel);\n    }\n    if (player.production.titanium > 0) {\n      options.push(reduceTitanium);\n    }\n    if (player.production.plants > 0) {\n      options.push(reducePlants);\n    }\n    if (player.production.energy > 0) {\n      options.push(reduceEnergy);\n    }\n    if (player.production.heat > 0) {\n      options.push(reduceHeat);\n    }\n\n    result.options = options;\n    return result;\n  }\n}\n"
}, {
  "module" : "turmoil",
  "name" : "Septem Tribus",
  "tags" : [ "wild" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 35,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/turmoil/SeptemTribus.ts",
  "sourceCode" : ""
}, {
  "module" : "community",
  "name" : "Jovian Research",
  "tags" : [ "jovian", "science" ],
  "victoryPoints" : {
    "tag" : "jovian",
    "per" : 2
  },
  "cost" : 23,
  "type" : "active",
  "requirements" : [ {
    "tag" : "jovian",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/community/JovianResearch.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\n\nexport class JovianResearch extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.JOVIAN_RESEARCH,\n      tags: [Tag.JOVIAN, Tag.SCIENCE],\n      cost: 23,\n\n      behavior: {\n      },\n      action: {\n        stock: {megacredits: {tag: Tag.JOVIAN}},\n      },\n\n      victoryPoints: {tag: Tag.JOVIAN, per: 2},\n\n\n      requirements: {tag: Tag.JOVIAN, count: 2},\n      metadata: {\n        description: {\n          text: 'Requires 2 Jovian tags to play.',\n          align: 'left',\n        },\n        cardNumber: '208',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Gain 1 Mâ‚¬ for each Jovian Tag you own.', (eb) => {\n            eb.startAction.megacredits(1).slash();\n            eb.tag(Tag.JOVIAN);\n          }).br;\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Martian Mystery",
  "tags" : [ "wild" ],
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "building"
  }, {
    "tag" : "microbe"
  }, {
    "tag" : "power"
  }, {
    "tag" : "science"
  }, {
    "tag" : "space"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/community/MartianMystery.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\n// import {digit} from '../Options';\n// import {Resource} from '../../../common/Resource';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class MartianMystery extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.MARTIAN_MYSTERY,\n      cost: 16,\n      tags: [Tag.WILD],\n      requirements: [{tag: Tag.BUILDING}, {tag: Tag.MICROBE}, {tag: Tag.POWER}, {tag: Tag.SCIENCE}, {tag: Tag.SPACE}],\n\n      metadata: {\n        // cardNumber: 'Pf53',\n        renderData: CardRenderer.builder((b) => {\n          b.resource(CardResource.DATA, 0).cards(1, {size: Size.SMALL}).asterix();\n          b.tag(Tag.WILD).colon().text('play ', Size.SMALL, true);\n          b.cards(1).br;\n          b.text(\n            'Do 10 Ave Marias for your boy RnJezuz. ' +\n            'Draw a RANDOM CARD and play it for FREEEE, it usually works, sometimes it might not... nobody knows for sure... this was implemented by a steam dev... Then draw another card.',\n            Size.SMALL, false, false);\n        }),\n        description: 'Requires ballz of steel or just being rich enough to waste money.',\n      },\n    });\n  }\n\n  private keep(player: IPlayer, card: IProjectCard) {\n    player.cardsInHand.push(card);\n    player.game.log('${0} kept ${1}', (b) => b.player(player).card(card));\n  }\n\n  private processCard(player: IPlayer, card: IProjectCard): boolean {\n    // const tags = card.tags;\n    // if (player.tags.cardHasTag(card, Tag.SCIENCE) || player.tags.cardHasTag(card, Tag.MICROBE)) {\n    player.playCard(card, undefined);\n    return true;\n    // } else if (tags.includes(Tag.SPACE)) {\n    //   player.production.add(Resource.ENERGY, 3, {log: true});\n    //   this.keep(player, card);\n    //   return true;\n    // } else {\n    //   this.keep(player, card);\n    //   return false;\n    // }\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return player.game.projectDeck.canDraw(2);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    // TODO(kberg): Make sure this action occurs after the card play, in case the played card has data.\n    game.defer(new AddResourcesToCard(player, CardResource.DATA, {count: 2}));\n    const cards = game.projectDeck.drawNOrThrow(game, 2);\n\n    player.game.log('${0} revealed ${1} and ${2}', (b) => b.player(player).card(cards[0], {tags: true}).card(cards[1], {tags: true}));\n    if (this.processCard(player, cards[0])) {\n      this.keep(player, cards[1]);\n    } else {\n      this.processCard(player, cards[1]);\n    }\n\n    return undefined;\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Agricola Inc",
  "tags" : [ "plant" ],
  "victoryPoints" : "special",
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 40,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/community/AgricolaInc.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {TagCount} from '../../../common/cards/TagCount';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {CardRenderDynamicVictoryPoints} from '../render/CardRenderDynamicVictoryPoints';\nimport {inplaceRemove} from '../../../common/utils/utils';\n\nexport class AgricolaInc extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.AGRICOLA_INC,\n      tags: [Tag.PLANT],\n      startingMegaCredits: 40,\n\n      victoryPoints: 'special',\n      behavior: {\n        production: {megacredits: 1, plants: 1, heat: 1},\n      },\n\n      metadata: {\n        cardNumber: 'R36',\n        description: 'You start with 1 plant production, 1 Mâ‚¬ production, 1 heat production and 40 Mâ‚¬.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.production((pb) => pb.megacredits(1).plants(1).heat(1)).nbsp.megacredits(40);\n          b.corpBox('effect', (ce) => {\n            ce.text('Effect: At game end, score -2 / 0 / 1 / 2 VP PER TAG TYPE for 0 / 1-2 / 3-4 / 5+ tags.', Size.SMALL, true);\n          });\n        }),\n        victoryPoints: CardRenderDynamicVictoryPoints.questionmark(),\n      },\n    });\n  }\n\n  public override getVictoryPoints(player: IPlayer): number {\n    const scorableTags = [...player.game.tags];\n    inplaceRemove(scorableTags, Tag.WILD);\n    inplaceRemove(scorableTags, Tag.EVENT);\n    inplaceRemove(scorableTags, Tag.CLONE);\n\n    const playerTags : TagCount[] = player.tags.countAllTags();\n    let points = 0;\n\n    scorableTags.forEach((tag) => {\n      const tagData = playerTags.find((data) => data.tag === tag);\n\n      if (tagData === undefined) {\n        points -= 2;\n      } else if (tagData.count === 3 || tagData.count === 4) {\n        points += 1;\n      } else if (tagData.count > 4) {\n        points += 2;\n      }\n    });\n\n    return points;\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Project Workshop",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 45,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/community/ProjectWorkshop.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {ICard} from '../ICard';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\nimport {digit} from '../Options';\nimport {PartyHooks} from '../../turmoil/parties/PartyHooks';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {REDS_RULING_POLICY_COST} from '../../../common/constants';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {TITLES} from '../../inputs/titles';\n\nexport class ProjectWorkshop extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.PROJECT_WORKSHOP,\n      tags: [Tag.EARTH],\n      startingMegaCredits: 45,\n\n      behavior: {\n        stock: {steel: 1, titanium: 1},\n      },\n\n      firstAction: {\n        text: 'Draw a blue card',\n        drawCard: {count: 1, type: CardType.ACTIVE},\n      },\n\n      metadata: {\n        cardNumber: 'R45',\n        description: 'You start with 45 Mâ‚¬, 1 steel and 1 titanium. As your first action, draw a blue card.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(45).steel(1).titanium(1).cards(1, {secondaryTag: AltSecondaryTag.BLUE});\n          b.corpBox('action', (cb) => {\n            cb.vSpace(Size.LARGE);\n            cb.action(undefined, (eb) => {\n              eb.text('flip', Size.SMALL, true).cards(1, {secondaryTag: AltSecondaryTag.BLUE});\n              eb.startAction.text('?', Size.MEDIUM, true).tr(1, {size: Size.SMALL});\n              eb.cards(2, {digit});\n            });\n            cb.vSpace(Size.SMALL);\n            cb.action('Flip and discard a played blue card to convert any VP on it into TR and draw 2 cards, or spend 3 Mâ‚¬ to draw a blue card.', (eb) => {\n              eb.or().megacredits(3).startAction.cards(1, {secondaryTag: AltSecondaryTag.BLUE});\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  private getEligibleCards(player: IPlayer) {\n    const cards = player.playedCards.filter((card) => card.type === CardType.ACTIVE);\n    if (!PartyHooks.shouldApplyPolicy(player, PartyName.REDS, 'rp01')) {\n      return cards;\n    }\n    return cards.filter((card) => {\n      const vp = card.getVictoryPoints(player);\n      if (vp <= 0) {\n        return true;\n      }\n      return player.canAfford(REDS_RULING_POLICY_COST * vp);\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.canAfford(3) || this.getEligibleCards(player).length > 0;\n  }\n\n  public action(player: IPlayer) {\n    const activeCards = this.getEligibleCards(player);\n\n    const flipBlueCard = new SelectOption(\n      'Flip and discard a played blue card',\n      'Select')\n      .andThen(() => {\n        if (activeCards.length === 1) {\n          this.convertCardPointsToTR(player, activeCards[0]);\n          player.discardPlayedCard(activeCards[0]);\n          player.drawCard(2);\n          return undefined;\n        }\n\n        return new SelectCard<IProjectCard>(\n          'Select active card to discard',\n          'Discard',\n          activeCards)\n          .andThen(\n            ([card]) => {\n              this.convertCardPointsToTR(player, card);\n              player.discardPlayedCard(card);\n              player.drawCard(2);\n              return undefined;\n            },\n          );\n      });\n\n    const drawBlueCard = new SelectOption('Spend 3 Mâ‚¬ to draw a blue card', 'Draw card').andThen(() => {\n      player.game.defer(new SelectPaymentDeferred(player, 3,\n        {title: TITLES.payForCardAction(this.name)}))\n        .andThen(() => player.drawCard(1, {cardType: CardType.ACTIVE}));\n      return undefined;\n    });\n\n    if (activeCards.length === 0) return drawBlueCard;\n    if (!player.canAfford(3)) return flipBlueCard;\n\n    return new OrOptions(drawBlueCard, flipBlueCard);\n  }\n\n  private convertCardPointsToTR(player: IPlayer, card: ICard) {\n    const steps = card.getVictoryPoints(player);\n    // TODO(kberg): this doesn't reduce VPs below 0. What to do?\n    if (steps > 0) {\n      player.increaseTerraformRating(steps, {log: true});\n    } else if (steps < 0) {\n      player.decreaseTerraformRating(-steps, {log: true});\n    }\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Incite",
  "tags" : [ "science" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 35,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/community/Incite.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class Incite extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.INCITE,\n      tags: [Tag.SCIENCE],\n      startingMegaCredits: 35,\n\n      behavior: {\n        turmoil: {influenceBonus: 1},\n      },\n      firstAction: {\n        text: 'Place 2 delegates in one party',\n        turmoil: {sendDelegates: {count: 2}},\n      },\n\n      metadata: {\n        cardNumber: 'R37',\n        description: 'You start with 35 Mâ‚¬. As your first action, place two delegates in one party.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.megacredits(35).nbsp.delegates(2);\n          b.corpBox('effect', (ce) => {\n            ce.vSpace(Size.LARGE);\n            ce.effect(undefined, (eb) => {\n              eb.empty().startEffect.influence();\n            });\n            ce.vSpace(Size.SMALL);\n            ce.effect('You have +1 influence. When you send a delegate using the lobbying action, you pay 2 Mâ‚¬ less for it.', (eb) => {\n              eb.delegates(1).startEffect.megacredits(-2);\n            });\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Playwrights",
  "tags" : [ "power" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 40,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/community/Playwrights.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {all} from '../Options';\nimport {SpecialDesignProxy} from './SpecialDesignProxy';\n\nexport class Playwrights extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.PLAYWRIGHTS,\n      tags: [Tag.POWER],\n      startingMegaCredits: 40,\n\n      behavior: {\n        production: {energy: 1},\n      },\n\n      metadata: {\n        cardNumber: 'R40',\n        description: 'You start with 40 Mâ‚¬ and 1 energy production.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.megacredits(40).production((pb) => pb.energy(1));\n          b.corpBox('action', (cb) => {\n            cb.action('Replay a played event from any player (INCLUDING events that place special tiles) by paying its cost ONLY in Mâ‚¬ (discounts and rebates apply), then REMOVE IT FROM PLAY.', (eb) => {\n              eb.megacredits(1, {text: '?'}).startAction;\n              eb.text('replay', Size.SMALL, true);\n              eb.nbsp.cards(1, {all, secondaryTag: Tag.EVENT});\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  // For Project Inspection\n  private checkLoops = 0;\n\n  public canAct(player: IPlayer): boolean {\n    const replayableEvents = this.getReplayableEvents(player);\n    return replayableEvents.length > 0;\n  }\n\n  public action(player: IPlayer): SelectCard<IProjectCard> | undefined {\n    const players = player.game.getPlayers();\n    const replayableEvents = this.getReplayableEvents(player);\n\n    return new SelectCard<IProjectCard>(\n      'Select event card to replay at cost in Mâ‚¬ and remove from play', 'Select', replayableEvents, {played: false})\n      .andThen(\n        ([card]) => {\n          const selectedCard: IProjectCard = card;\n\n          players.forEach((p) => {\n            const cardIndex = p.playedCards.findIndex((c) => c.name === selectedCard.name);\n            if (cardIndex !== -1) {\n              p.playedCards.splice(cardIndex, 1);\n            }\n          });\n\n          const cost = player.getCardCost(selectedCard);\n          player.game.defer(new SelectPaymentDeferred(player, cost, {title: 'Select how to pay to replay the event'}))\n            .andThen(() => {\n              player.playCard(selectedCard, undefined, 'nothing'); // Play the card but don't add it to played cards\n              player.removedFromPlayCards.push(selectedCard); // Remove card from the game\n              if (selectedCard.name === CardName.SPECIAL_DESIGN) {\n                player.playedCards.push(new SpecialDesignProxy());\n              } else if (selectedCard.name === CardName.LAW_SUIT) {\n              /*\n               * If the card played is Law Suit we need to remove it from the newly sued player's played cards.\n               * Needs to be deferred to happen after Law Suit's `play()` method.\n               */\n                player.defer(() => {\n                  player.game.getPlayers().some((p) => {\n                    const card = p.playedCards[p.playedCards.length - 1];\n                    if (card?.name === selectedCard.name) {\n                      p.playedCards.pop();\n                      return true;\n                    }\n                    return false;\n                  });\n                  return undefined;\n                });\n              }\n            });\n          return undefined;\n        },\n      );\n  }\n\n  public getCheckLoops(): number {\n    return this.checkLoops;\n  }\n\n  private getReplayableEvents(player: IPlayer): Array<IProjectCard> {\n    const playedEvents : IProjectCard[] = [];\n\n    this.checkLoops++;\n    try {\n      player.game.getPlayers().forEach((p) => {\n        playedEvents.push(...p.playedCards.filter((card) => {\n          // Special case Price Wars, which is not easy to work with.\n          if (card.name === CardName.PRICE_WARS) {\n            return false;\n          }\n          const canAffordOptions = {\n            cost: player.getCardCost(card),\n            reserveUnits: MoonExpansion.adjustedReserveCosts(player, card),\n          };\n          return card.type === CardType.EVENT &&\n          // Can player.canPlay(card) replace this?\n          player.canAfford(canAffordOptions) && card.canPlay(player, canAffordOptions);\n        }));\n      });\n    } finally {\n      this.checkLoops--;\n    }\n\n    return playedEvents;\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Curiosity II",
  "tags" : [ "science", "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 42,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/community/CuriosityII.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {DrawCards} from '../../deferredActions/DrawCards';\nimport {SpaceType} from '../../../common/boards/SpaceType';\nimport {SpaceBonus} from '../../../common/boards/SpaceBonus';\nimport {Phase} from '../../../common/Phase';\nimport {TITLES} from '../../inputs/titles';\n\nexport class CuriosityII extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.CURIOSITY_II,\n      tags: [Tag.SCIENCE, Tag.BUILDING],\n      startingMegaCredits: 42,\n\n      behavior: {\n        production: {steel: 2},\n      },\n\n      metadata: {\n        cardNumber: 'Y07',\n        description: 'You start with 42 Mâ‚¬ and 2 steel production.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.megacredits(42).nbsp.production((pb) => pb.steel(2));\n          b.corpBox('effect', (ce) => {\n            ce.vSpace();\n            ce.effect(\n              'When you place a tile on an area that has a RESOURCE placement bonus, ' +\n              'or on top of another tile, you may pay 3 Mâ‚¬ to draw a card.',\n              (eb) => {\n                eb.emptyTile('normal', {size: Size.SMALL}).nbsp.asterix().startEffect.megacredits(-3).cards(1);\n              });\n          });\n        }),\n      },\n    });\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    const eligibleBonuses = [SpaceBonus.STEEL, SpaceBonus.TITANIUM, SpaceBonus.HEAT, SpaceBonus.PLANT, SpaceBonus.MEGACREDITS, SpaceBonus.ANIMAL, SpaceBonus.MICROBE, SpaceBonus.ENERGY];\n\n    if (cardOwner.id !== activePlayer.id) return;\n    if (cardOwner.game.phase === Phase.SOLAR) return;\n    if (space.spaceType === SpaceType.COLONY) return;\n\n    if (space.bonus.some((bonus) => eligibleBonuses.includes(bonus)) || space.tile?.covers !== undefined) {\n      cardOwner.defer(() => this.corpAction(cardOwner));\n    }\n  }\n\n  private corpAction(player: IPlayer) {\n    if (!player.canAfford(3)) return undefined;\n\n    return new OrOptions(\n      new SelectOption('Pay 3 Mâ‚¬ to draw a card').andThen(() => {\n        player.game.defer(new SelectPaymentDeferred(player, 3, {title: TITLES.payForCardAction(this.name)}))\n          .andThen(() => player.game.defer(DrawCards.keepAll(player)));\n        return undefined;\n      }),\n      new SelectOption('Do nothing'),\n    );\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Midas",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 110,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/community/Midas.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class Midas extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.MIDAS,\n      startingMegaCredits: 110,\n\n      metadata: {\n        cardNumber: 'R41',\n        description: 'You start with 110 Mâ‚¬. Lower your TR 6 steps.',\n        renderData: CardRenderer.builder((b) => {\n          b.vSpace(Size.LARGE).br;\n          b.megacredits(110, {size: Size.LARGE}).nbsp.nbsp.nbsp;\n          b.minus().tr(6);\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.decreaseTerraformRating(6);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "United Nations Mission One",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 44,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/community/UnitedNationsMissionOne.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {all} from '../Options';\nimport {Phase} from '../../../common/Phase';\nimport {Resource} from '../../../common/Resource';\n\nexport class UnitedNationsMissionOne extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.UNITED_NATIONS_MISSION_ONE,\n      tags: [Tag.EARTH],\n      startingMegaCredits: 44, // +1 for the initial change in TR.\n\n      metadata: {\n        cardNumber: 'R50',\n        description: 'You start with 43 Mâ‚¬. Increase your TR 1 step.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br.br;\n          b.megacredits(43).nbsp.tr(1);\n          b.corpBox('effect', (ce) => {\n            ce.vSpace();\n            ce.effect('When any player takes an action or plays a card that increases TR, including this, gain 1 Mâ‚¬ for each step.', (eb) => {\n              eb.tr(1, {all}).startEffect.megacredits(1);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer): undefined {\n    player.increaseTerraformRating();\n    return undefined;\n  }\n\n  // TODO(kberg): Since UNMO can generate MC for raising TR, that MC can offset reds costs, can't it?\n  public onIncreaseTerraformRating(player: IPlayer, cardOwner: IPlayer, steps: number) {\n    const game = player.game;\n\n    if (game.phase === Phase.ACTION || game.phase === Phase.PRELUDES) {\n      cardOwner.stock.add(Resource.MEGACREDITS, steps, {log: true});\n    }\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Junk Ventures",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 43,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/community/JunkVentures.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {Size} from '../../../common/cards/render/Size';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ChooseCards} from '../../deferredActions/ChooseCards';\nimport {IPlayer} from '../../IPlayer';\n\nexport class JunkVentures extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.JUNK_VENTURES,\n      initialActionText: 'Discard the top 3 cards of the deck',\n      startingMegaCredits: 43,\n\n      metadata: {\n        cardNumber: 'R49',\n        description: 'You start with 43 Mâ‚¬. As your first action, discard the top 3 cards of the deck.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.megacredits(43).text('DECK: ').minus().cards(3);\n          b.corpBox('action', (cb) => {\n            cb.text('ACTION: SHUFFLE THE DISCARD PILE, THEN DRAW 3 CARDS FROM IT. KEEP 1 AND DISCARD THE OTHER 2.', Size.SMALL, true);\n          });\n        }),\n      },\n    });\n  }\n\n  public initialAction(player: IPlayer) {\n    const cards = player.game.projectDeck.drawN(player.game, 3);\n    for (const card of cards) {\n      player.game.projectDeck.discard(card);\n    }\n    return undefined;\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.game.projectDeck.discardPile.length >= 3;\n  }\n\n  public action(player: IPlayer) {\n    const game = player.game;\n    game.projectDeck.shuffleDiscardPile();\n\n    const cards = [];\n    for (let idx = 0; idx < 3; idx++) {\n      const card = player.game.projectDeck.discardPile.pop();\n      if (card === undefined) {\n        break;\n      }\n      cards.push(card);\n    }\n\n    player.game.defer(new ChooseCards(player, cards, {keepMax: 1}));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Eris",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 52,
  "compatibility" : [ "ares" ],
  "sourceFile" : "src/server/cards/community/Eris.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IGame} from '../../IGame';\nimport {CardName} from '../../../common//cards/CardName';\nimport {PlaceHazardTile} from '../../deferredActions/PlaceHazardTile';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\nimport {Size} from '../../../common/cards/render/Size';\nimport {TileType, tileTypeToString} from '../../../common/TileType';\nimport {LogHelper} from '../../LogHelper';\n\nconst ARES_CARDS = [\n  CardName.BIOENGINEERING_ENCLOSURE,\n  CardName.BIOFERTILIZER_FACILITY,\n  CardName.BUTTERFLY_EFFECT,\n  CardName.CAPITAL_ARES,\n  CardName.COMMERCIAL_DISTRICT_ARES,\n  CardName.DEIMOS_DOWN_ARES,\n  CardName.DESPERATE_MEASURES,\n  CardName.ECOLOGICAL_SURVEY,\n  CardName.ECOLOGICAL_ZONE_ARES,\n  CardName.GEOLOGICAL_SURVEY,\n  CardName.GREAT_DAM_ARES,\n  CardName.INDUSTRIAL_CENTER_ARES,\n  CardName.LAVA_FLOWS_ARES,\n  CardName.MAGNETIC_FIELD_GENERATORS_ARES,\n  CardName.MARKETING_EXPERTS,\n  CardName.METALLIC_ASTEROID,\n  CardName.MINING_AREA_ARES,\n  CardName.MINING_RIGHTS_ARES,\n  CardName.MOHOLE_AREA_ARES,\n  CardName.NATURAL_PRESERVE_ARES,\n  CardName.NUCLEAR_ZONE_ARES,\n  CardName.OCEAN_CITY,\n  CardName.OCEAN_FARM,\n  CardName.OCEAN_SANCTUARY,\n  CardName.RESTRICTED_AREA_ARES,\n  CardName.SOLAR_FARM,\n];\n\nexport class Eris extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.ERIS,\n      tags: [Tag.BUILDING],\n      initialActionText: 'Draw an Ares card',\n      startingMegaCredits: 52,\n\n      metadata: {\n        cardNumber: 'R47',\n        description: 'You start with 52 Mâ‚¬. As your first action, draw an Ares card.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br;\n          b.megacredits(52).nbsp.cards(1, {secondaryTag: AltSecondaryTag.ARES});\n          b.corpBox('action', (ce) => {\n            ce.action('Place a new hazard tile adjacent to NO OTHER TILE, OR remove a hazard tile to gain 1 TR.', (eb) => {\n              eb.empty().startAction.plus().hazardTile().slash().minus().hazardTile().colon().tr(1, {size: Size.SMALL});\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public initialAction(player: IPlayer) {\n    this.drawAresCard(player);\n    return undefined;\n  }\n\n  public canAct(player: IPlayer): boolean {\n    const game = player.game;\n    const availableSpaces = this.getAvailableSpaces(player);\n    const hazardSpaces = Eris.getAllUnprotectedHazardSpaces(game);\n\n    if (availableSpaces.length === 0 && hazardSpaces.length === 0) return false;\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    const game = player.game;\n    const orOptions = new OrOptions();\n    const availableSpaces = this.getAvailableSpaces(player);\n    const hazardSpaces = Eris.getAllUnprotectedHazardSpaces(game);\n\n    if (availableSpaces.length > 0) {\n      orOptions.options.push(new SelectOption('Place a hazard tile adjacent to no other tile', 'Select').andThen(() => {\n        const title = 'Select space next to no other tile for hazard';\n        game.defer(new PlaceHazardTile(player, TileType.EROSION_MILD, {title, spaces: availableSpaces}));\n        return undefined;\n      }));\n    }\n\n    if (hazardSpaces.length > 0 && player.canAfford({cost: 0, tr: {tr: 1}})) {\n      orOptions.options.push(new SelectOption('Remove a hazard tile to gain 1 TR', 'Select').andThen(() => {\n        return new SelectSpace(\n          'Select hazard tile to remove',\n          Eris.getAllUnprotectedHazardSpaces(game)).andThen(\n          (space) => {\n            const tileType = space.tile?.tileType;\n            space.tile = undefined;\n            player.increaseTerraformRating(1, {log: true});\n            if (tileType === undefined) {\n              return;\n            }\n            LogHelper.logBoardTileAction(player, space, tileTypeToString[tileType], 'removed');\n            return undefined;\n          },\n        );\n      }));\n    }\n\n    if (orOptions.options.length === 1) return orOptions.options[0].cb();\n    return orOptions;\n  }\n\n  private drawAresCard(player: IPlayer) {\n    player.drawCard(1, {include: (card) => ARES_CARDS.includes(card.name)});\n\n    return undefined;\n  }\n\n  private getAvailableSpaces(player: IPlayer) {\n    const board = player.game.board;\n    return board.getAvailableSpacesOnLand(player)\n      .filter(((space) => space.tile === undefined))\n      .filter((space) => {\n        const adjacentSpaces = board.getAdjacentSpaces(space);\n        return adjacentSpaces.filter((space) => space.tile !== undefined).length === 0;\n      });\n  }\n\n  public static getAllUnprotectedHazardSpaces(game: IGame) {\n    return game.board.getHazards().filter((space) => space.tile?.protectedHazard !== true);\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Athena",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 64,
  "compatibility" : [ "ares" ],
  "sourceFile" : "src/server/cards/community/Athena.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {PlaceHazardTile} from '../../deferredActions/PlaceHazardTile';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {TileType} from '../../../common/TileType';\n\nexport class Athena extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.ATHENA,\n      tags: [Tag.EARTH],\n      initialActionText: 'Place 2 hazard tiles adjacent to no other tiles.',\n      startingMegaCredits: 64,\n\n      metadata: {\n        cardNumber: 'R52',\n        description: 'You start with 64 Mâ‚¬. As your first action, place 2 hazard tiles adjacent to no other tiles.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(64).hazardTile(1, {size: Size.LARGE}).hazardTile(1, {size: Size.LARGE});\n          b.corpBox('effect', (ce) => {\n            ce.vSpace(Size.SMALL);\n            ce.effect('You do not lose production when placing adjacent to hazard tiles.', (eb) => {\n              eb.startEffect.hazardTile(1, {size: Size.LARGE}).nbsp.asterix();\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public initialAction(player: IPlayer) {\n    const game = player.game;\n    const title = 'Select space next to no other tile for hazard';\n\n    if (game.gameOptions.aresExtension) {\n      game.defer(new PlaceHazardTile(\n        player, TileType.EROSION_MILD, {title, spaces: this.getAvailableSpaces(player)}))\n        .andThen(() => {\n          game.defer(new PlaceHazardTile(\n            player, TileType.EROSION_MILD, {title, spaces: this.getAvailableSpaces(player)}));\n        });\n    }\n\n    return undefined;\n  }\n\n  private getAvailableSpaces(player: IPlayer) {\n    const board = player.game.board;\n    return board.getAvailableSpacesOnLand(player)\n      .filter(((space) => space.tile === undefined))\n      .filter((space) => {\n        const adjacentSpaces = board.getAdjacentSpaces(space);\n        return adjacentSpaces.filter((space) => space.tile !== undefined).length === 0;\n      });\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Research Grant",
  "tags" : [ "science", "science" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 8,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/community/ResearchGrant.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class ResearchGrant extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.RESEARCH_GRANT,\n      tags: [Tag.SCIENCE, Tag.SCIENCE],\n      behavior: {\n        stock: {megacredits: 8},\n      },\n\n      metadata: {\n        cardNumber: 'Y04',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(8);\n        }),\n        description: 'Gain 8 Mâ‚¬.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "community",
  "name" : "Valuable Gases",
  "tags" : [ "jovian", "venus" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 6,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/community/ValuableGases.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {SelectProjectCardToPlay} from '../../inputs/SelectProjectCardToPlay';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {digit} from '../Options';\n\nexport class ValuableGases extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.VALUABLE_GASES,\n      tags: [Tag.JOVIAN, Tag.VENUS],\n      behavior: {\n        stock: {megacredits: 6},\n      },\n\n      metadata: {\n        cardNumber: 'Y06',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(6).br.br;\n          b.text('play', Size.MEDIUM, true).cards(1, {secondaryTag: Tag.VENUS}).colon();\n          b.resource(CardResource.FLOATER, {amount: 4, digit});\n        }),\n        description: 'Gain 6 Mâ‚¬. Play a Venus card from your hand and add 4 floaters to it.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const playableCards = player.getPlayableCards().filter((card) => card.card.tags.includes(Tag.VENUS));\n\n    if (playableCards.length > 0) {\n      return new SelectProjectCardToPlay(player, playableCards)\n        .andThen((card) => {\n          if (card.resourceType === CardResource.FLOATER) {\n            player.addResourceTo(card, 4);\n          }\n          return undefined;\n        });\n    }\n\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "community",
  "name" : "Aerospace Mission",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : -14,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/community/AerospaceMission.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {BuildColony} from '../../deferredActions/BuildColony';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\n\nexport class AerospaceMission extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.AEROSPACE_MISSION,\n      tags: [Tag.SPACE],\n      startingMegacredits: -14,\n\n      metadata: {\n        cardNumber: 'Y01',\n        renderData: CardRenderer.builder((b) => {\n          b.colonies(1).nbsp.colonies(1).br;\n          b.minus().megacredits(14);\n        }),\n        description: 'Place 2 colonies. Pay 14 Mâ‚¬.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return player.canAfford(14);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.stock.deduct(Resource.MEGACREDITS, 14);\n    player.game.defer(new BuildColony(player, {title: 'Select where to build the first colony'}));\n    player.game.defer(new BuildColony(player, {title: 'Select where to build the second colony'}));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Trade Advance",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 2,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/community/TradeAdvance.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class TradeAdvance extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.TRADE_ADVANCE,\n      tags: [Tag.EARTH],\n      behavior: {\n        stock: {megacredits: 2},\n      },\n\n      metadata: {\n        cardNumber: 'Y05',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(2).text('[ solo').colon().megacredits(10).text(']').br;\n          b.text('Trade all colonies with').br;\n          b.trade().colon().text('+1');\n        }),\n        description: 'Gain 2 Mâ‚¬ [SOLO: Gain 10 Mâ‚¬]. Immediately trade with all active colonies. You may increase the Colony Tile track 1 step before each of these trades.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.defer(() => {\n      const activeColonies = player.game.colonies.filter((colony) => colony.isActive);\n      activeColonies.forEach((colony) => {\n        colony.trade(player, {usesTradeFleet: false}, 1);\n      });\n      return undefined;\n    });\n\n    if (player.game.isSoloMode()) {\n      player.megaCredits += 8;\n    }\n\n    return undefined;\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "Political Uprising",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/community/PoliticalUprising.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {TURMOIL_CARD_MANIFEST} from '../turmoil/TurmoilCardManifest';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\nimport {CardManifest} from '../ModuleManifest';\n\nexport class PoliticalUprising extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.POLITICAL_UPRISING,\n\n      behavior: {\n        turmoil: {sendDelegates: {count: 4, manyParties: true}},\n      },\n\n      metadata: {\n        cardNumber: 'Y03',\n        renderData: CardRenderer.builder((b) => {\n          b.delegates(4).br.br;\n          b.cards(1, {secondaryTag: AltSecondaryTag.TURMOIL});\n        }),\n        description: 'Place 4 delegates in any parties. Draw a Turmoil card.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    this.drawTurmoilCard(player);\n    return undefined;\n  }\n\n  // TODO(kberg): it is possible, though unlikely, that the draw deck won't have another Turmoil card, but this\n  // app ought to check the discard pile, or something.\n  private drawTurmoilCard(player: IPlayer) {\n    // Rather than draw and discard potentially dozens of cards, find one card in the deck that's a Turmoil card.\n\n    // First get all the card names for Turmoil Project cards by indexing the manifest.\n    const turmoilCardNames = CardManifest.keys(TURMOIL_CARD_MANIFEST.projectCards);\n\n    // Then find the first card in the deck that matches one of those names.\n    const drawnCard = player.game.projectDeck.drawPile.find((card) => turmoilCardNames.includes(card.name));\n\n    if (drawnCard === undefined) {\n      player.game.log('${0} played ${1} to find a Turmoil card but none were in the draw deck.', (b) => b.player(player).card(this));\n    } else {\n      const cardIndex = player.game.projectDeck.drawPile.findIndex((c) => c.name === drawnCard.name);\n      player.game.projectDeck.drawPile.splice(cardIndex, 1);\n\n      player.cardsInHand.push(drawnCard);\n      player.game.log('${0} drew ${1}', (b) => b.player(player).card(drawnCard));\n    }\n\n    return undefined;\n  }\n}\n"
}, {
  "module" : "community",
  "name" : "By-Election",
  "tags" : [ "wild" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/community/By-Election.ts",
  "sourceCode" : ""
}, {
  "module" : "community",
  "name" : "Executive Order",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/community/ExecutiveOrder.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SendDelegateToArea} from '../../deferredActions/SendDelegateToArea';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {Turmoil} from '../../turmoil/Turmoil';\nimport {IGlobalEvent} from '../../turmoil/globalEvents/IGlobalEvent';\nimport {SelectGlobalEvent} from '../../inputs/SelectGlobalEvent';\n\nexport class ExecutiveOrder extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.EXECUTIVE_ORDER,\n\n      metadata: {\n        cardNumber: 'Y31',\n        renderData: CardRenderer.builder((b) => {\n          b.text('PLAY').globalEvent().asterix();\n          b.br.br.br;\n          b.delegates(2).megacredits(10).br.br;\n        }),\n        description: 'Draw 4 global events. Play 1 as the CURRENT GLOBAL EVENT and discard the rest. Place 2 delegates in any party. Gain 10 Mâ‚¬.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.stock.add(Resource.MEGACREDITS, 10, {log: true});\n    const turmoil = Turmoil.getTurmoil(player.game);\n    const globalEvents: IGlobalEvent[] = [];\n\n    for (let i = 0; i < 4; i++) {\n      const event = turmoil.globalEventDealer.draw();\n      if (event !== undefined) {\n        globalEvents.push(event);\n      }\n    }\n\n    return new SelectGlobalEvent(globalEvents)\n      .andThen((event) => {\n        player.game.log('${0} selected Global Event ${1} for the current global event', (b) => b.player(player).globalEvent(event));\n        turmoil.currentGlobalEvent = event;\n        turmoil.sendDelegateToParty('NEUTRAL', event.currentDelegate, player.game);\n        player.game.log('Neutral delegate added to ${0}', (b) => b.partyName(event.currentDelegate));\n\n        globalEvents.forEach((ge) => {\n          if (ge.name !== event.name) {\n            turmoil.globalEventDealer.discard(ge);\n          }\n        });\n\n        player.game.defer(new SendDelegateToArea(player, 'Select where to send 2 delegates', {count: 2}));\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "ares",
  "name" : "Bioengineering Enclosure",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "each" : -1,
    "per" : 2
  },
  "cost" : 5,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science"
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/BioengineeringEnclosure.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IActionCard} from '../ICard';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\n\nexport class BioengineeringEnclosure extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.BIOENGINEERING_ENCLOSURE,\n      tags: [Tag.ANIMAL],\n      cost: 5,\n      resourceType: CardResource.ANIMAL,\n      protectedResources: true,\n      victoryPoints: {resourcesHere: {}, each: -1, per: 2},\n\n      behavior: {\n        addResources: 4,\n      },\n\n      requirements: {tag: Tag.SCIENCE},\n      metadata: {\n        description: 'Requires 1 science tag to play. Add 4 animals to this card. -1VP per 2 animals on this card. OTHERS MAY NOT REMOVE ANIMALS FROM THIS CARD.',\n        cardNumber: 'A01',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Remove 1 animal from THIS card to add 1 animal to ANOTHER card.', (eb) => {\n            eb.resource(CardResource.ANIMAL).asterix().startAction.resource(CardResource.ANIMAL).asterix();\n          }).br;\n          b.resource(CardResource.ANIMAL, 2);\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    // >1 because this player already has bioengineering enclosure.\n    return this.resourceCount > 0 && player.getResourceCards(this.resourceType).length > 1;\n  }\n\n  public action(player: IPlayer) {\n    player.defer(\n      () => {\n        const resourceCards = player.getResourceCards(this.resourceType).filter((card) => card.name !== CardName.BIOENGINEERING_ENCLOSURE);\n\n        if (resourceCards.length === 0) {\n          return undefined;\n        }\n\n        if (resourceCards.length === 1) {\n          this.resourceCount--;\n          player.addResourceTo(resourceCards[0], 1);\n          player.game.log('${0} moved 1 animal from Bioengineering Enclosure to ${1}.', (b) => b.player(player).card(resourceCards[0]));\n          return undefined;\n        }\n\n        return new SelectCard(\n          'Select card to add 1 animal',\n          'Add animal',\n          resourceCards)\n          .andThen(\n            ([card]) => {\n              this.resourceCount--;\n              player.addResourceTo(card, 1);\n              player.game.log('${0} moved 1 animal from Bioengineering Enclosure to ${1}.', (b) => b.player(player).card(card));\n              return undefined;\n            },\n          );\n      },\n    );\n    return undefined;\n  }\n}\n"
}, {
  "module" : "ares",
  "name" : "Bio-Fertilizer Facility",
  "tags" : [ "microbe", "building" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/Bio-FertilizerFacility.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Butterfly Effect",
  "tags" : [ ],
  "cost" : 4,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/ButterflyEffect.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {ShiftAresGlobalParametersDeferred} from '../../deferredActions/ShiftAresGlobalParametersDeferred';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {AresHandler} from '../../ares/AresHandler';\nimport {HAZARD_CONSTRAINTS} from '../../../common/ares/AresData';\n\nexport class ButterflyEffect extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.BUTTERFLY_EFFECT,\n      cost: 4,\n\n      behavior: {\n        tr: 1,\n      },\n\n      metadata: {\n        cardNumber: 'A03',\n        description: 'Gain 1 TR. Move each hazard marker up to 1 step up or down along its terraforming track.',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(1).br;\n          b.plate('All hazard markers').colon().text('-1 / 0 / +1', Size.SMALL);\n        }),\n      },\n    });\n  }\n  public override bespokePlay(player: IPlayer) {\n    AresHandler.ifAres(player.game, (aresData) => {\n      const hazardData = aresData.hazardData;\n      if (HAZARD_CONSTRAINTS.some((constraint) => hazardData[constraint].available === true)) {\n        player.game.defer(new ShiftAresGlobalParametersDeferred(player));\n      } else {\n        player.game.log('All global parameters are high enough that there is no point in changing any of them.');\n      }\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "ares",
  "name" : "Capital:ares",
  "tags" : [ "city", "building" ],
  "victoryPoints" : "special",
  "cost" : 22,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/Capital:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Commercial District:ares",
  "tags" : [ "building" ],
  "victoryPoints" : "special",
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/CommercialDistrict:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Deimos Down:ares",
  "tags" : [ "space" ],
  "cost" : 31,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/DeimosDown:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Desperate Measures",
  "tags" : [ ],
  "victoryPoints" : -1,
  "cost" : 1,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/DesperateMeasures.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {IGame} from '../../IGame';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {TileType} from '../../../common/TileType';\nimport {AresHandler} from '../../ares/AresHandler';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class DesperateMeasures extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.DESPERATE_MEASURES,\n      cost: 1,\n      victoryPoints: -1,\n\n      metadata: {\n        cardNumber: 'A04',\n        description: 'Place a bronze cube on a dust storm tile and raise oxygen 1 step, or place a bronze cube on an erosion tile and raise the temperature 1 step. The hazard tile with the bronze cube cannot be removed.',\n        renderData: CardRenderer.builder((b) => {\n          b.resource(CardResource.RESOURCE_CUBE).asterix().br;\n          b.temperature(1).slash().oxygen(1);\n        }),\n      },\n    });\n  }\n\n  private getHazardTiles(game: IGame) {\n    return game.board.spaces.filter((space) => AresHandler.hasHazardTile(space));\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    // You can't play desperate measures if there isn't a hazard marker in play.\n    return this.getHazardTiles(player.game).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    return new SelectSpace('Select a hazard space to protect', this.getHazardTiles(player.game))\n      .andThen((space) => {\n        if (space.tile === undefined) {\n          throw new Error(`selected space ${space.id} without tile for DesperateMeasures`);\n        }\n        space.tile.protectedHazard = true;\n        const tileType = space.tile.tileType;\n        if (TileType.DUST_STORM_MILD === tileType || TileType.DUST_STORM_SEVERE === tileType) {\n          player.game.increaseOxygenLevel(player, 1);\n        } else {\n        // is an erosion tile when the expression above is false.\n          player.game.increaseTemperature(player, 1);\n        }\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "ares",
  "name" : "Ecological Survey",
  "tags" : [ "science" ],
  "cost" : 9,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/EcologicalSurvey.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {SpaceBonus} from '../../../common/boards/SpaceBonus';\nimport {Resource} from '../../../common/Resource';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SurveyCard} from './SurveyCard';\n// import {all} from '../Options';\n\nexport class EcologicalSurvey extends SurveyCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ECOLOGICAL_SURVEY,\n      tags: [Tag.SCIENCE],\n      cost: 9,\n\n      metadata: {\n        cardNumber: 'A07',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When placing a tile grants you any plants, animals or microbes, you gain one additional of each of those resources that you gain.', (eb) => {\n            eb.emptyTile().startEffect;\n            eb.plus().plants(1).resource(CardResource.ANIMAL).resource(CardResource.MICROBE);\n          });\n        }),\n      },\n    });\n  }\n\n  protected checkForBonuses(cardOwner: IPlayer, space: Space) {\n    super.maybeRewardStandardResource(cardOwner, space, Resource.PLANTS, SpaceBonus.PLANT);\n    super.maybeRewardCardResource(cardOwner, space, CardResource.MICROBE, SpaceBonus.MICROBE);\n    super.maybeRewardCardResource(cardOwner, space, CardResource.ANIMAL, SpaceBonus.ANIMAL);\n  }\n}\n"
}, {
  "module" : "ares",
  "name" : "Ecological Zone:ares",
  "tags" : [ "animal", "plant" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 11,
  "type" : "active",
  "requirements" : [ {
    "greeneries" : 1,
    "count" : 1
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/EcologicalZone:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Geological Survey",
  "tags" : [ "science" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ {
    "greeneries" : 5,
    "all" : true,
    "max" : true,
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/GeologicalSurvey.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {SpaceBonus} from '../../../common/boards/SpaceBonus';\nimport {Resource} from '../../../common/Resource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SurveyCard} from './SurveyCard';\nimport {all, max} from '../Options';\n\nexport class GeologicalSurvey extends SurveyCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.GEOLOGICAL_SURVEY,\n      tags: [Tag.SCIENCE],\n      cost: 4,\n\n      requirements: {greeneries: 5, all, max},\n      metadata: {\n        cardNumber: 'A09',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When placing a tile ON MARS grants you any steel, titanium, or heat, you gain one additional of each of those resources that you gain.', (eb) => {\n            eb.emptyTile().startEffect;\n            eb.plus().steel(1).titanium(1).heat(1);\n          });\n        }),\n        description: 'Requires 5 or fewer greeneries on Mars.',\n      },\n    });\n  }\n\n  protected checkForBonuses(cardOwner: IPlayer, space: Space) {\n    super.maybeRewardStandardResource(cardOwner, space, Resource.STEEL, SpaceBonus.STEEL);\n    super.maybeRewardStandardResource(cardOwner, space, Resource.TITANIUM, SpaceBonus.TITANIUM);\n    super.maybeRewardStandardResource(cardOwner, space, Resource.HEAT, SpaceBonus.HEAT);\n  }\n}\n"
}, {
  "module" : "ares",
  "name" : "Industrial Center:ares",
  "tags" : [ "building" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/IndustrialCenter:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Great Dam:ares",
  "tags" : [ "power", "building" ],
  "victoryPoints" : 1,
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/GreatDam:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Lava Flows:ares",
  "tags" : [ ],
  "cost" : 18,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/LavaFlows:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Magnetic Field Generators:ares",
  "tags" : [ "building" ],
  "cost" : 18,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/MagneticFieldGenerators:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Marketing Experts",
  "tags" : [ "earth" ],
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/MarketingExperts.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MarketingExperts extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MARKETING_EXPERTS,\n      tags: [Tag.EARTH],\n      cost: 5,\n\n      behavior: {\n        production: {megacredits: 1},\n      },\n\n      metadata: {\n        cardNumber: 'A12',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When an ADJACENCY BONUS is collected from a tile you own, you gain 1 Mâ‚¬.', (eb) => {\n            eb.emptyTile().emptyTile('golden').startEffect.megacredits(1);\n          }).br;\n          b.production((pb) => pb.megacredits(1));\n        }),\n        description: 'Increase your Mâ‚¬ production 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "ares",
  "name" : "Metallic Asteroid",
  "tags" : [ "space" ],
  "cost" : 13,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/MetallicAsteroid.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SpaceBonus} from '../../../common/boards/SpaceBonus';\nimport {TileType} from '../../../common/TileType';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all, digit} from '../Options';\n\nexport class MetallicAsteroid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.METALLIC_ASTEROID,\n      tags: [Tag.SPACE],\n      cost: 13,\n\n      behavior: {\n        stock: {titanium: 1},\n        global: {temperature: 1},\n        removeAnyPlants: 4,\n        tile: {\n          type: TileType.METALLIC_ASTEROID,\n          on: 'land',\n          adjacencyBonus: {bonus: [SpaceBonus.TITANIUM]},\n        },\n      },\n\n      metadata: {\n        cardNumber: 'A13',\n        renderData: CardRenderer.builder((b) => {\n          b.temperature(1).titanium(1).br;\n          b.minus().plants(4, {digit, all});\n          b.tile(TileType.METALLIC_ASTEROID, false, true);\n        }),\n        description: 'Raise temperature 1 step and gain 1 titanium. Remove up to 4 plants from any player. Place this tile which grants an ADJACENCY BONUS of 1 titanium.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "ares",
  "name" : "Mining Area:ares",
  "tags" : [ "building" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/MiningArea:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Mining Rights:ares",
  "tags" : [ "building" ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/MiningRights:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Mohole Area:ares",
  "tags" : [ "building" ],
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/MoholeArea:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Natural Preserve:ares",
  "tags" : [ "science", "building" ],
  "victoryPoints" : 1,
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 4,
    "max" : true,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/NaturalPreserve:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Nuclear Zone:ares",
  "tags" : [ "earth" ],
  "victoryPoints" : -2,
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/NuclearZone:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Ocean City",
  "tags" : [ "city", "building" ],
  "cost" : 18,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 6,
    "count" : 6
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/OceanCity.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {TileType} from '../../../common/TileType';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class OceanCity extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.OCEAN_CITY,\n      tags: [Tag.CITY, Tag.BUILDING],\n      cost: 18,\n\n      behavior: {\n        production: {energy: -1, megacredits: 3},\n        tile: {\n          type: TileType.OCEAN_CITY,\n          on: 'upgradeable-ocean',\n        },\n      },\n\n      requirements: {oceans: 6},\n      metadata: {\n        cardNumber: 'A20',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().megacredits(3);\n          }).nbsp.tile(TileType.OCEAN_CITY, false, true);\n        }),\n        description: 'Requires 6 ocean tiles. Decrease your energy production 1 step and increase your Mâ‚¬ production 3 steps. Place this tile on top of an existing ocean tile, IGNORING NORMAL PLACEMENT RESTRICTIONS FOR CITIES. The tile counts as a city as well as an ocean.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "ares",
  "name" : "Ocean Farm",
  "tags" : [ "plant", "building" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/OceanFarm.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SpaceBonus} from '../../../common/boards/SpaceBonus';\nimport {TileType} from '../../../common/TileType';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class OceanFarm extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.OCEAN_FARM,\n      tags: [Tag.PLANT, Tag.BUILDING],\n      cost: 11,\n\n      behavior: {\n        production: {plants: 1, heat: 1},\n        tile: {\n          type: TileType.OCEAN_FARM,\n          on: 'upgradeable-ocean',\n          adjacencyBonus: {bonus: [SpaceBonus.PLANT]},\n        },\n      },\n\n      requirements: {oceans: 4},\n      metadata: {\n        cardNumber: 'A21',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.heat(1).br;\n            pb.plants(1);\n          }).nbsp.tile(TileType.OCEAN_FARM, false, true);\n        }),\n        description: 'Requires 4 ocean tiles. Increase your heat production 1 step and increase your plant production 1 step. Place this tile on top of an existing ocean tile. The tile grants an ADJACENCY BONUS of 1 plant.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "ares",
  "name" : "Ocean Sanctuary",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 9,
  "type" : "active",
  "requirements" : [ {
    "oceans" : 5,
    "count" : 5
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/OceanSanctuary.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {SpaceBonus} from '../../../common/boards/SpaceBonus';\nimport {TileType} from '../../../common/TileType';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class OceanSanctuary extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.OCEAN_SANCTUARY,\n      tags: [Tag.ANIMAL],\n      cost: 9,\n      resourceType: CardResource.ANIMAL,\n      victoryPoints: {resourcesHere: {}},\n      requirements: {oceans: 5},\n\n      behavior: {\n        addResources: 1,\n        tile: {\n          type: TileType.OCEAN_SANCTUARY,\n          on: 'upgradeable-ocean',\n          adjacencyBonus: {bonus: [SpaceBonus.ANIMAL]},\n        },\n      },\n\n      metadata: {\n        cardNumber: 'A22',\n        renderData: CardRenderer.builder((b) => {\n          b.tile(TileType.OCEAN_SANCTUARY, false, true).nbsp.resource(CardResource.ANIMAL).br;\n          b.vpText('1 VP per animal on this card.');\n        }),\n        description: 'Requires 5 ocean tiles. Place this tile on top of an existing ocean tile. The tile grants an ADJACENCY BONUS of 1 animal. Add 1 animal to this card.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "ares",
  "name" : "Restricted Area:ares",
  "tags" : [ "science" ],
  "cost" : 11,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/RestrictedArea:ares.ts",
  "sourceCode" : ""
}, {
  "module" : "ares",
  "name" : "Solar Farm",
  "tags" : [ "power", "building" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ares/SolarFarm.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {PlaceTile} from '../../../server/deferredActions/PlaceTile';\nimport {CanAffordOptions, IPlayer} from '../../IPlayer';\nimport {SpaceBonus} from '../../../common/boards/SpaceBonus';\nimport {TileType} from '../../../common/TileType';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {message} from '../../logs/MessageBuilder';\nimport {Units} from '../../../common/Units';\n\nexport class SolarFarm extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SOLAR_FARM,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 12,\n\n      metadata: {\n        cardNumber: 'A17',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.energy(1).slash().plants(1);\n          }).asterix().nbsp.tile(TileType.SOLAR_FARM, false, true).br;\n        }),\n        description: 'Place this tile which grants an ADJACENCY BONUS of 2 energy. Increase your energy production 1 step for each plant resource on the area where you place the tile.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer, canAffordOptions: CanAffordOptions): boolean {\n    return player.game.board.getAvailableSpacesOnLand(player, canAffordOptions).length > 0;\n  }\n\n  public productionBox(player: IPlayer) {\n    const space = player.game.board.getSpaceByTileCard(this.name);\n    if (space === undefined) {\n      throw new Error('Solar Farm space not found');\n    }\n    const plantsOnSpace = space.bonus.filter((b) => b === SpaceBonus.PLANT).length;\n    return Units.of({energy: plantsOnSpace});\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(\n      new PlaceTile(player, {\n        tile: {tileType: TileType.SOLAR_FARM, card: this.name},\n        on: 'land',\n        title: message('Select space for ${0} tile', (b) => b.card(this)),\n        adjacencyBonus: {bonus: [SpaceBonus.ENERGY, SpaceBonus.ENERGY]},\n      }).andThen(() => {\n        player.production.adjust(this.productionBox(player), {log: true});\n      }));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Mare Nectaris Mine",
  "tags" : [ "moon", "building" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/MareNectarisMine.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {MoonSpaces} from '../../../common/moon/MoonSpaces';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class MareNectarisMine extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.MARE_NECTARIS_MINE,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON, Tag.BUILDING],\n      cost: 12,\n\n      behavior: {\n        production: {steel: 1},\n        moon: {\n          mineTile: {space: MoonSpaces.MARE_NECTARIS},\n        },\n      },\n      reserveUnits: {titanium: 1},\n\n      metadata: {\n        description: 'Spend 1 titanium. Increase your steel production 1 step. Place a mine ON THE RESERVED AREA and raise the mining rate 1 step.',\n        cardNumber: 'M01',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).nbsp;\n          b.production((pb) => pb.steel(1));\n          b.moonMine({secondaryTag: AltSecondaryTag.MOON_MINING_RATE}).asterix();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Mare Nubium Mine",
  "tags" : [ "moon", "building" ],
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/MareNubiumMine.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {MoonSpaces} from '../../../common/moon/MoonSpaces';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class MareNubiumMine extends Card {\n  constructor() {\n    super({\n      name: CardName.MARE_NUBIUM_MINE,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON, Tag.BUILDING],\n      cost: 16,\n\n      behavior: {\n        production: {titanium: 1},\n        moon: {\n          mineTile: {space: MoonSpaces.MARE_NUBIUM},\n        },\n      },\n      reserveUnits: {titanium: 1},\n\n      metadata: {\n        description: 'Spend 1 titanium. Increase your titanium production 1 step. Place a mine ON THE RESERVED AREA and raise the mining rate 1 step.',\n        cardNumber: 'M02',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1);\n          b.production((pb) => pb.titanium(1)).moonMine({secondaryTag: AltSecondaryTag.MOON_MINING_RATE}).asterix();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Mare Imbrium Mine",
  "tags" : [ "moon", "building" ],
  "cost" : 17,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/MareImbriumMine.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {MoonSpaces} from '../../../common/moon/MoonSpaces';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class MareImbriumMine extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.MARE_IMBRIUM_MINE,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON, Tag.BUILDING],\n      cost: 17,\n      reserveUnits: {titanium: 1},\n\n      behavior: {\n        production: {steel: 1, titanium: 1},\n        moon: {\n          mineTile: {space: MoonSpaces.MARE_IMBRIUM},\n        },\n      },\n\n      metadata: {\n        description: 'Spend 1 titanium. Increase your steel production 1 step and your titanium production 1 step. Place a mine ON THE RESERVED AREA and raise the mining rate 1 step.',\n        cardNumber: 'M03',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1);\n          b.production((pb) => pb.steel(1).titanium(1)).br;\n          b.moonMine({secondaryTag: AltSecondaryTag.MOON_MINING_RATE}).asterix();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Mare Serenitatis Mine",
  "tags" : [ "moon", "building" ],
  "cost" : 21,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/MareSerenitatisMine.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {MoonSpaces} from '../../../common/moon/MoonSpaces';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {PlaceMoonRoadTile} from '../../moon/PlaceMoonRoadTile';\nimport {SpaceType} from '../../../common/boards/SpaceType';\nimport {TileType} from '../../../common/TileType';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class MareSerenitatisMine extends Card {\n  constructor() {\n    super({\n      name: CardName.MARE_SERENITATIS_MINE,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON, Tag.BUILDING],\n      cost: 21,\n\n      behavior: {\n        production: {steel: 1, titanium: 1},\n      },\n      reserveUnits: {steel: 1, titanium: 1},\n      tr: {moonMining: 1, moonLogistics: 1},\n\n      metadata: {\n        description: 'Spend 1 titanium and 1 steel. Increase your steel and titanium production 1 step. ' +\n        'Place a mine ON THE RESERVED AREA and a road tile adjacent to it. Raise the mining rate 1 step and the logistic rate 1 step.',\n        cardNumber: 'M04',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).minus().steel(1).br;\n          b.production((pb) => pb.steel(1).titanium(1)).br;\n          b.moonMine({secondaryTag: AltSecondaryTag.MOON_MINING_RATE}).asterix().nbsp.moonRoad({secondaryTag: AltSecondaryTag.MOON_LOGISTICS_RATE}).asterix();\n        }),\n      },\n      tilesBuilt: [TileType.MOON_MINE, TileType.MOON_ROAD],\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    MoonExpansion.addMineTile(player, MoonSpaces.MARE_SERENITATIS, this.name);\n    MoonExpansion.raiseMiningRate(player);\n    const moon = MoonExpansion.moonData(player.game).moon;\n    const spaces = moon.getAdjacentSpaces(moon.getSpaceOrThrow(MoonSpaces.MARE_SERENITATIS));\n    const availableRoadSpaces = spaces.filter((space) => {\n      return space.player === undefined && space.spaceType === SpaceType.LAND;\n    });\n    player.game.defer(new PlaceMoonRoadTile(player, availableRoadSpaces, 'Select a space next to Mare Serintatis to play a road'));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Habitat 14",
  "tags" : [ "city", "moon" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/Habitat14.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\n\nexport class Habitat14 extends Card {\n  constructor() {\n    super({\n      name: CardName.HABITAT_14,\n      type: CardType.AUTOMATED,\n      tags: [Tag.CITY, Tag.MOON],\n      cost: 4,\n\n      behavior: {\n        production: {energy: -1},\n        moon: {habitatTile: {}},\n      },\n      reserveUnits: {titanium: 2},\n\n      metadata: {\n        description: 'Decrease your energy production 1 step. Spend 2 titanium. Place a habitat tile on The Moon and raise the habitat rate 1 step.',\n        cardNumber: 'M05',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1);\n          }).br;\n          b.minus().titanium(2).br;\n          b.moonHabitat();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Geodesic Tents",
  "tags" : [ "plant", "city", "moon" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/GeodesicTents.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class GeodesicTents extends Card {\n  constructor() {\n    super({\n      name: CardName.GEODESIC_TENTS,\n      type: CardType.AUTOMATED,\n      tags: [Tag.PLANT, Tag.CITY, Tag.MOON],\n      cost: 12,\n      reserveUnits: {titanium: 1},\n\n      behavior: {\n        production: {energy: -1, plants: 1},\n        moon: {habitatTile: {}},\n      },\n\n      metadata: {\n        description: 'Decrease your energy production 1 step and increase your plant production 1 step. ' +\n        'Spend 1 titanium. Place a habitat tile on The Moon and raise the habitat rate 1 step.',\n        cardNumber: 'M06',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).nbsp.plus().plants(1);\n          }).br;\n          b.minus().titanium(1).br;\n          b.moonHabitat({secondaryTag: AltSecondaryTag.MOON_HABITAT_RATE});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Sphere Habitats",
  "tags" : [ "city", "moon" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/SphereHabitats.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class SphereHabitats extends Card {\n  constructor() {\n    super({\n      name: CardName.SPHERE_HABITATS,\n      type: CardType.AUTOMATED,\n      tags: [Tag.CITY, Tag.MOON],\n      cost: 12,\n      reserveUnits: {titanium: 1},\n\n      behavior: {\n        moon: {\n          habitatTile: {},\n        },\n      },\n\n      metadata: {\n        description: 'Spend 1 titanium. Place a habitat tile on The Moon and raise the habitat rate 1 step.',\n        cardNumber: 'M07',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).br;\n          b.moonHabitat({secondaryTag: AltSecondaryTag.MOON_HABITAT_RATE});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "The Womb",
  "tags" : [ "city", "moon" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/TheWomb.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class TheWomb extends Card {\n  constructor() {\n    super({\n      name: CardName.THE_WOMB,\n      type: CardType.AUTOMATED,\n      tags: [Tag.CITY, Tag.MOON],\n      cost: 6,\n\n      behavior: {\n        production: {energy: -2, megacredits: 4},\n        moon: {\n          habitatTile: {},\n        },\n      },\n      reserveUnits: {titanium: 2},\n\n      metadata: {\n        description: 'Decrease your energy production 2 steps and increase your Mâ‚¬ production 4 steps. ' +\n          'Spend 2 titanium. Place a habitat tile on The Moon and raise the habitat rate 1 step.',\n        cardNumber: 'M08',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(2).nbsp.plus().megacredits(4);\n          }).br;\n          b.minus().titanium(2).moonHabitat({secondaryTag: AltSecondaryTag.MOON_HABITAT_RATE});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Tycho Road Network",
  "tags" : [ "moon" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/TychoRoadNetwork.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class TychoRoadNetwork extends Card {\n  constructor() {\n    super({\n      name: CardName.TYCHO_ROAD_NETWORK,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON],\n      cost: 12,\n\n      behavior: {\n        production: {megacredits: 1},\n        moon: {\n          roadTile: {},\n        },\n      },\n      reserveUnits: {steel: 1},\n\n      metadata: {\n        description: 'Spend 1 steel. Increase your Mâ‚¬ production 1 step. ' +\n        'Place a road tile on The Moon and raise the Logistics Rate 1 step.',\n        cardNumber: 'M09',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().steel(1).br;\n          b.production((eb) => eb.megacredits(1)).br;\n          b.moonRoad({secondaryTag: AltSecondaryTag.MOON_LOGISTICS_RATE});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Aristarchus Road Network",
  "tags" : [ "moon" ],
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/AristarchusRoadNetwork.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class AristarchusRoadNetwork extends Card {\n  constructor() {\n    super({\n      name: CardName.ARISTARCHUS_ROAD_NETWORK,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON],\n      cost: 13,\n      reserveUnits: {steel: 1},\n\n      behavior: {\n        production: {megacredits: 2},\n        moon: {\n          roadTile: {},\n        },\n      },\n\n      metadata: {\n        description: 'Spend 1 steel. Increase your Mâ‚¬ production 2 steps. ' +\n        'Place a road tile on The Moon and raise the Logistics Rate 1 step.',\n        cardNumber: 'M10',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().steel(1).nbsp.production((eb) => eb.megacredits(2)).br;\n          b.moonRoad({secondaryTag: AltSecondaryTag.MOON_LOGISTICS_RATE});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Sinus Irdium Road Network",
  "tags" : [ "moon" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/SinusIrdiumRoadNetwork.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class SinusIrdiumRoadNetwork extends Card {\n  constructor() {\n    super({\n      name: CardName.SINUS_IRDIUM_ROAD_NETWORK,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON],\n      cost: 11,\n\n      behavior: {\n        production: {energy: -1, megacredits: 3},\n        moon: {\n          roadTile: {},\n        },\n      },\n      reserveUnits: {steel: 1},\n\n      metadata: {\n        description: 'Decrease your energy production 1 step and increase your Mâ‚¬ production 3 steps. ' +\n          'Spend 1 steel. ' +\n          'Place a road tile on The Moon and raise the Logistics Rate 1 step.',\n        cardNumber: 'M11',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).nbsp.plus().megacredits(3);\n          }).br;\n          b.minus().steel(1).br;\n          b.moonRoad({secondaryTag: AltSecondaryTag.MOON_LOGISTICS_RATE});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Momentum Virium Habitat",
  "tags" : [ "city", "space" ],
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/MomentumViriumHabitat.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {MoonSpaces} from '../../../common/moon/MoonSpaces';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class MomentumViriumHabitat extends Card {\n  constructor() {\n    super({\n      name: CardName.MOMENTUM_VIRUM_HABITAT,\n      type: CardType.AUTOMATED,\n      tags: [Tag.CITY, Tag.SPACE],\n      cost: 13,\n\n      behavior: {\n        production: {heat: 2, megacredits: 3},\n        moon: {\n          habitatTile: {space: MoonSpaces.MOMENTUM_VIRIUM},\n        },\n      },\n      reserveUnits: {titanium: 1},\n\n      metadata: {\n        description: 'Spend 1 titanium. Increase your heat production 2 steps and your Mâ‚¬ production 3 steps. ' +\n        'Place a habitat tile ON THE RESERVED AREA and raise the habitat rate 1 step.',\n        cardNumber: 'M12',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).br;\n          b.production((pb) => {\n            pb.heat(2).megacredits(3);\n          }).br;\n          b.moonHabitat({secondaryTag: AltSecondaryTag.MOON_HABITAT_RATE}).asterix();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Trade Station",
  "tags" : [ "moon", "moon", "space" ],
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunaTradeStation.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {MoonSpaces} from '../../../common/moon/MoonSpaces';\nimport {TileType} from '../../../common/TileType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IActionCard} from '../ICard';\nimport {ActionCard} from '../ActionCard';\nimport {all} from '../Options';\n\nexport class LunaTradeStation extends ActionCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.LUNA_TRADE_STATION,\n      type: CardType.ACTIVE,\n      tags: [Tag.MOON, Tag.MOON, Tag.SPACE],\n      cost: 10,\n      reserveUnits: {titanium: 2},\n\n      action: {\n        stock: {megacredits: {moon: {habitat: {}}, each: 2}},\n      },\n\n      behavior: {\n        moon: {\n          tile: {\n            type: TileType.LUNA_TRADE_STATION,\n            space: MoonSpaces.LUNA_TRADE_STATION,\n          },\n        },\n      },\n\n      metadata: {\n        description: 'Spend 2 titanium. Place this tile ON THE RESERVED AREA.',\n        cardNumber: 'M13',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Gain 2 Mâ‚¬ for each habitat tile on The Moon.', (eb) =>\n            eb.empty().startAction.megacredits(2).slash().moonHabitat({all}));\n          b.br.minus().titanium(2).tile(TileType.LUNA_TRADE_STATION, true).asterix();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Mining Hub",
  "tags" : [ "building", "moon" ],
  "victoryPoints" : "special",
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ {
    "miningRate" : 5,
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunaMiningHub.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {TileType} from '../../../common/TileType';\nimport {CardRenderDynamicVictoryPoints} from '../render/CardRenderDynamicVictoryPoints';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class LunaMiningHub extends Card {\n  constructor() {\n    super({\n      name: CardName.LUNA_MINING_HUB,\n      type: CardType.AUTOMATED,\n      tags: [Tag.BUILDING, Tag.MOON],\n      cost: 20,\n      reserveUnits: {steel: 1, titanium: 1},\n\n      behavior: {\n        production: {steel: 1, titanium: 1},\n        // TODO(kberg): mining rate ought to occur after tile is placed.\n        moon: {\n          tile: {type: TileType.LUNA_MINING_HUB},\n          miningRate: 1,\n        },\n      },\n\n      victoryPoints: 'special',\n      requirements: {miningRate: 5},\n\n      metadata: {\n        cardNumber: 'M14',\n        description: {\n          text: '2 VP PER MINING TILE ADJACENT TO THIS TILE.',\n          align: 'left',\n        },\n        renderData: CardRenderer.builder((b) => {\n          b.text('Requires a mining rate of 5 or higher.', Size.TINY, false, false).br;\n          b.minus().steel(1).minus().titanium(1).production((pb) => pb.steel(1).titanium(1)).br;\n          b.text('Spend 1 steel and 1 titanium and raise your steel and titanium production 1 step.', Size.TINY, false, false).br;\n          b.tile(TileType.LUNA_MINING_HUB, true).moonMiningRate({size: Size.SMALL});\n          b.text('Place this tile on The Moon and raise the mining rate 1 step.', Size.TINY, false, false);\n        }),\n        victoryPoints: CardRenderDynamicVictoryPoints.moonMiningTile(2, true),\n      },\n    });\n  }\n\n  public override getVictoryPoints(player: IPlayer) {\n    const moonData = MoonExpansion.moonData(player.game);\n    const usedSpace = moonData.moon.getSpaceByTileCard(this.name);\n    if (usedSpace !== undefined) {\n      const adjacentSpaces = moonData.moon.getAdjacentSpaces(usedSpace);\n      const adjacentMines = adjacentSpaces.filter((s) => MoonExpansion.spaceHasType(s, TileType.MOON_MINE));\n      return 2 * adjacentMines.length;\n    }\n    return 0;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Train Station",
  "tags" : [ "building", "moon" ],
  "victoryPoints" : "special",
  "cost" : 24,
  "type" : "automated",
  "requirements" : [ {
    "logisticRate" : 5,
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunaTrainStation.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {TileType} from '../../../common/TileType';\nimport {CardRenderDynamicVictoryPoints} from '../render/CardRenderDynamicVictoryPoints';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {digit} from '../Options';\n\nexport class LunaTrainStation extends Card {\n  constructor() {\n    super({\n      name: CardName.LUNA_TRAIN_STATION,\n      type: CardType.AUTOMATED,\n      tags: [Tag.BUILDING, Tag.MOON],\n      cost: 24,\n      reserveUnits: {steel: 2},\n      victoryPoints: 'special',\n\n      behavior: {\n        production: {megacredits: 2},\n        moon: {\n          tile: {type: TileType.LUNA_TRAIN_STATION},\n          roadTile: {},\n        },\n      },\n\n      requirements: {logisticRate: 5},\n\n      metadata: {\n        description: 'Requires a logistic rate of 5 or higher. Spend 2 steel. ' +\n        'Increase your Mâ‚¬ production 4 steps. Place this tile on The Moon and build road yeah! ' +\n        '2 VP FOR EACH ROAD TILE ADJACENT TO THIS TILE.',\n        cardNumber: 'M15',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().steel(2, {digit});\n          b.production((pb) => pb.megacredits(2));\n          b.tile(TileType.LUNA_TRAIN_STATION, true).moonRoad();\n        }),\n        victoryPoints: CardRenderDynamicVictoryPoints.moonRoadTile(2, true),\n      },\n    });\n  }\n\n  public override getVictoryPoints(player: IPlayer) {\n    const moonData = MoonExpansion.moonData(player.game);\n    const usedSpace = moonData.moon.getSpaceByTileCard(this.name);\n    if (usedSpace !== undefined) {\n      const adjacentSpaces = moonData.moon.getAdjacentSpaces(usedSpace);\n      const adjacentMines = adjacentSpaces.filter((s) => MoonExpansion.spaceHasType(s, TileType.MOON_ROAD));\n      return 2 * adjacentMines.length;\n    }\n    return 0;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Colonist Shuttles",
  "tags" : [ "space" ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/ColonistShuttles.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\nexport class ColonistShuttles extends Card {\n  constructor() {\n    super({\n      name: CardName.COLONIST_SHUTTLES,\n      type: CardType.AUTOMATED,\n      tags: [Tag.SPACE],\n      cost: 9,\n      reserveUnits: {titanium: 1},\n\n      behavior: {\n        moon: {habitatRate: 1},\n        stock: {megacredits: {moon: {habitat: {}}, each: 2}},\n      },\n\n      metadata: {\n        description: 'Spend 1 titanium. Raise the habitat rate 1 step. Gain 2Mâ‚¬ for each habitat tile on The Moon.',\n        cardNumber: 'M16',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).moonHabitatRate().br;\n          b.megacredits(2).slash().moonHabitat({size: Size.SMALL, all});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Lunar Dust Processing Plant",
  "tags" : [ "moon" ],
  "cost" : 1,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarDustProcessingPlant.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {TileType} from '../../../common/TileType';\nimport {Card} from '../Card';\n\nexport class LunarDustProcessingPlant extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LUNAR_DUST_PROCESSING_PLANT,\n      type: CardType.ACTIVE,\n      tags: [Tag.MOON],\n      cost: 1,\n      reserveUnits: {titanium: 1},\n\n\n      metadata: {\n        description: 'Spend 1 titanium.',\n        cardNumber: 'M17',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you place a road tile on The Moon, you spend no steel on it.', (eb) => {\n            eb.startEffect.tile(TileType.MOON_ROAD, false).colon().text('0').steel(1);\n          }).br;\n          b.minus().titanium(1);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Deep Lunar Mining",
  "tags" : [ "moon", "space" ],
  "cost" : 18,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/DeepLunarMining.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class DeepLunarMining extends Card {\n  constructor() {\n    super({\n      name: CardName.DEEP_LUNAR_MINING,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON, Tag.SPACE],\n      cost: 18,\n      reserveUnits: {titanium: 1},\n\n      behavior: {\n        production: {titanium: 2},\n        moon: {miningRate: 1},\n      },\n\n      metadata: {\n        description: 'Spend 1 titanium. Increase your titanium production 2 steps. Raise the mining rate 1 step.',\n        cardNumber: 'M18',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).production((pb) => {\n            pb.titanium(2);\n          }).br;\n          b.moonMiningRate();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Ancient Shipyards",
  "tags" : [ "moon", "space" ],
  "victoryPoints" : -1,
  "cost" : 12,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/AncientShipyards.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\n// import {CardResource} from '../../../common/CardResource';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all} from '../Options';\n\nexport class AncientShipyards extends Card {\n  constructor() {\n    super({\n      name: CardName.ANCIENT_SHIPYARDS,\n      type: CardType.ACTIVE,\n      tags: [Tag.MOON, Tag.SPACE],\n      cost: 12,\n\n      victoryPoints: -1,\n      reserveUnits: {titanium: 3},\n\n      metadata: {\n        description: 'Spend 3 titanium.',\n        cardNumber: 'M19',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Steal 2 Mâ‚¬ from each player.', (eb) => {\n            eb.empty().startAction.text('Steal').nbsp.megacredits(2, {all});\n          }).br.br;\n          b.minus().titanium(3);\n        }),\n      },\n    });\n  }\n\n  public canAct(): boolean {\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    const game = player.game;\n    for (const target of player.getOpponents()) {\n      target.maybeBlockAttack(player, (proceed) => {\n        if (proceed) {\n          target.stock.steal(Resource.MEGACREDITS, 2, player);\n        }\n        return undefined;\n      });\n    }\n    if (game.isSoloMode()) {\n      player.stock.add(Resource.MEGACREDITS, 2);\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Project Office",
  "tags" : [ "science" ],
  "cost" : 3,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunaProjectOffice.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class LunaProjectOffice extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LUNA_PROJECT_OFFICE,\n      type: CardType.AUTOMATED,\n      tags: [Tag.SCIENCE],\n      cost: 3,\n      requirements: {tag: Tag.SCIENCE, count: 2},\n\n      metadata: {\n        description: 'Requires 2 science tags.',\n        cardNumber: 'M20',\n        renderData: CardRenderer.builder((b) => {\n          b.text('DRAW 5 CARDS DURING THE RESEARCH PHASE FOR THE NEXT 2 GENERATIONS.', Size.MEDIUM, true);\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    MoonExpansion.moonData(player.game).lunaProjectOfficeLastGeneration = player.game.generation + 2;\n    return undefined;\n  }\n\n  // Returns true when the current player has played Luna Project Office and the card is still valid\n  public static isActive(player: IPlayer): boolean {\n    return MoonExpansion.ifElseMoon(player.game, (moonData) => {\n      if (!player.cardIsInEffect(CardName.LUNA_PROJECT_OFFICE)) {\n        return false;\n      }\n      return player.game.generation <= (moonData.lunaProjectOfficeLastGeneration ?? -1);\n    }, () => false);\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Resort",
  "tags" : [ "moon" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ {
    "habitatTiles" : 2,
    "all" : true,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunaResort.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all} from '../Options';\n\nexport class LunaResort extends Card {\n  constructor() {\n    super({\n      name: CardName.LUNA_RESORT,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON],\n      cost: 11,\n      reserveUnits: {titanium: 1},\n\n      behavior: {\n        production: {energy: -1, megacredits: 3},\n        moon: {habitatTile: {}},\n      },\n\n      requirements: {habitatTiles: 2, all},\n      metadata: {\n        description:\n          'Requires 2 habitats on The Moon. Spend 1 titanium. Decrease your energy production 1 step and increase your Mâ‚¬ production 3 steps. Place 1 habitat, raise the habitat rate 1 step.',\n        cardNumber: 'M21',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).production((pb) => {\n            pb.minus().energy(1).nbsp.plus().megacredits(3);\n          }).br;\n          b.moonHabitat();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Lunar Observation Post",
  "tags" : [ "science", "science" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 7,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarObservationPost.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\n\nexport class LunarObservationPost extends ActionCard {\n  constructor() {\n    super({\n      name: CardName.LUNAR_OBSERVATION_POST,\n      type: CardType.ACTIVE,\n      tags: [Tag.SCIENCE, Tag.SCIENCE],\n      cost: 7,\n\n      resourceType: CardResource.DATA,\n      victoryPoints: {resourcesHere: {}, per: 3},\n      reserveUnits: {titanium: 1},\n\n      action: {\n        addResourcesToAnyCard: {type: CardResource.DATA, count: 2},\n      },\n\n      metadata: {\n        description: 'Spend 1 titanium. 1 VP for every 3 data resources here.',\n        cardNumber: 'M22',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 2 data resource to ANY card', (ab) => {\n            ab.empty().startAction.resource(CardResource.DATA).asterix();\n          });\n          b.br;\n          b.minus().titanium(1);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Mining Robots Manuf. Center",
  "tags" : [ "science", "building" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/MiningRobotsManuf.Center.ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Pride of the Earth Arkship",
  "tags" : [ "science", "science", "space" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 18,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science"
  }, {
    "tag" : "space",
    "count" : 2
  } ],
  "resourceType" : "Science",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/PrideoftheEarthArkship.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IActionCard} from '../ICard';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\n\nexport class PrideoftheEarthArkship extends ActionCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.PRIDE_OF_THE_EARTH_ARKSHIP,\n      type: CardType.ACTIVE,\n      tags: [Tag.SCIENCE, Tag.SCIENCE, Tag.SPACE],\n      cost: 18,\n\n      resourceType: CardResource.SCIENCE,\n      victoryPoints: {resourcesHere: {}},\n      requirements: [{tag: Tag.SCIENCE}, {tag: Tag.SPACE, count: 2}],\n      reserveUnits: {titanium: 1},\n\n      action: {\n        addResources: {tag: Tag.SCIENCE, per: 6},\n      },\n\n      metadata: {\n        description: 'Requires 1 science and 2 space tags. Spend 1 titanium. 1 VP per science resource here.',\n        cardNumber: 'M24',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 science resource here per every 6 science tags you have.', (eb) => {\n            eb.empty().startAction.resource(CardResource.SCIENCE).slash().text('6').tag(Tag.SCIENCE);\n          }).br;\n          b.minus().titanium(1);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Iron Extraction Center",
  "tags" : [ "building", "moon" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/IronExtractionCenter.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class IronExtractionCenter extends Card {\n  constructor() {\n    super({\n      name: CardName.IRON_EXTRACTION_CENTER,\n      type: CardType.AUTOMATED,\n      tags: [Tag.BUILDING, Tag.MOON],\n      cost: 4,\n      reserveUnits: {titanium: 1},\n\n      behavior: {\n        production: {steel: {moon: {miningRate: {}}, per: 2}},\n      },\n\n      metadata: {\n        description: 'Spend 1 titanium. Increase your steel production 1 step for every 2 raised steps of mining rate.',\n        cardNumber: 'M25',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).br;\n          b.production((pb) => pb.steel(1)).slash().moonMiningRate({amount: 2});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Titanium Extraction Center",
  "tags" : [ "building" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/TitaniumExtractionCenter.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class TitaniumExtractionCenter extends Card {\n  constructor() {\n    super({\n      name: CardName.TITANIUM_EXTRACTION_CENTER,\n      type: CardType.AUTOMATED,\n      tags: [Tag.BUILDING],\n      cost: 5,\n      reserveUnits: {titanium: 2},\n\n      behavior: {\n        production: {titanium: {moon: {miningRate: {}}, per: 2}},\n      },\n\n      metadata: {\n        description: 'Spend 2 titanium. Increase your titanium production 1 step for every 2 raised steps of mining rate.',\n        cardNumber: 'M26',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(2).br;\n          b.production((pb) => pb.titanium(1)).slash().moonMiningRate({amount: 2});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Archimedes Hydroponics Station",
  "tags" : [ "plant" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/ArchimedesHydroponicsStation.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class ArchimedesHydroponicsStation extends Card {\n  constructor() {\n    super({\n      name: CardName.ARCHIMEDES_HYDROPONICS_STATION,\n      type: CardType.AUTOMATED,\n      tags: [Tag.PLANT],\n      cost: 12,\n\n      behavior: {\n        production: {energy: -1, plants: 2},\n      },\n\n      metadata: {\n        description: 'Decrease your energy production 1 step. Increase your plant production 2 steps.',\n        cardNumber: 'M27',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.minus().energy(1).nbsp.plus().plants(2));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Steel Market Monopolists",
  "tags" : [ ],
  "cost" : 5,
  "type" : "active",
  "requirements" : [ {
    "miningRate" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/SteelMarketMonopolists.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {MarketCard} from './MarketCard';\n\nexport class SteelMarketMonopolists extends MarketCard {\n  constructor() {\n    super(\n      Resource.STEEL,\n      {from: 3, to: 2, limit: 3},\n      {from: 1, to: 3, limit: 3},\n      {\n        name: CardName.STEEL_MARKET_MONOPOLISTS,\n        type: CardType.ACTIVE,\n        cost: 5,\n        requirements: {miningRate: 3},\n\n        metadata: {\n          description: 'Requires the mining rate to be 3 or higher.',\n          cardNumber: 'M28',\n          renderData: CardRenderer.builder((b) => {\n            b.action('Spend 3X Mâ‚¬ to gain 2X steel (max 9 Mâ‚¬)', (eb) => {\n              eb.megacredits(1, {text: '3x'}).startAction.text('x').steel(2).asterix();\n            }).br;\n            b.or().br;\n            b.action('Spend X steel to gain 3X Mâ‚¬ (max 3 steel).', (eb) => {\n              eb.text('X').steel(1).startAction.text('x').megacredits(3).asterix();\n            });\n          }),\n        },\n      });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Titanium Market Monopolists",
  "tags" : [ ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ {
    "miningRate" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/TitaniumMarketMonopolists.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {MarketCard} from './MarketCard';\n\nexport class TitaniumMarketMonopolists extends MarketCard {\n  constructor() {\n    super(\n      Resource.TITANIUM,\n      {from: 2, to: 1, limit: 4},\n      {from: 1, to: 4, limit: 4},\n      {\n        name: CardName.TITANIUM_MARKET_MONOPOLISTS,\n        type: CardType.ACTIVE,\n        cost: 6,\n\n        requirements: {miningRate: 3},\n        metadata: {\n          description: 'Requires the mining rate to be 3 or higher.',\n          cardNumber: 'M29',\n          renderData: CardRenderer.builder((b) => {\n            b.action('Spend 2X Mâ‚¬ to gain X titanium [max 8 Mâ‚¬]', (eb) => {\n              eb.megacredits(1, {text: '2x'}).startAction.text('X').titanium(1).asterix();\n            }).br;\n            b.or().br;\n            b.action('Spend X titanium to gain 4X Mâ‚¬ [max 4 titanium].', (eb) => {\n              eb.text('X').titanium(1).startAction.text('X').megacredits(4).asterix();\n            });\n          }),\n        },\n      });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Staging Station",
  "tags" : [ "moon", "building" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "logisticRate" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunaStagingStation.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class LunaStagingStation extends Card {\n  constructor() {\n    super({\n      name: CardName.LUNA_STAGING_STATION,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON, Tag.BUILDING],\n      cost: 7,\n      reserveUnits: {titanium: 1},\n\n      behavior: {\n        moon: {\n          roadTile: {},\n        },\n      },\n\n      requirements: {logisticRate: 2},\n      metadata: {\n        description: 'Requires the logistic rate to be 2 or higher. Spend 1 titanium. Place 1 road.',\n        cardNumber: 'M30',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).br;\n          b.moonRoad({amount: 1});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "New Colony Planning Initiatives",
  "tags" : [ "moon" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "habitatRate" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/NewColonyPlanningInitiatives.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class NewColonyPlanningInitiatives extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.NEW_COLONY_PLANNING_INITIAITIVES,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON],\n      cost: 6,\n\n      behavior: {\n        moon: {habitatRate: 1},\n      },\n\n      requirements: {habitatRate: 2},\n      metadata: {\n        description: 'Requires the habitat rate to be 2 or higher. Raise the habitat rate 1 step.',\n        cardNumber: 'M31',\n        renderData: CardRenderer.builder((b) => {\n          b.moonHabitatRate();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "AI Controlled Mine Network",
  "tags" : [ "science" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "logisticRate" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/AIControlledMineNetwork.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class AIControlledMineNetwork extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.AI_CONTROLLED_MINE_NETWORK,\n      type: CardType.AUTOMATED,\n      tags: [Tag.SCIENCE],\n      cost: 6,\n\n      behavior: {\n        moon: {logisticsRate: 1},\n      },\n\n      requirements: {logisticRate: 2},\n      metadata: {\n        description: 'Requires the logistic rate to be 2 or higher. Raise the logistic rate 1 step',\n        cardNumber: 'M32',\n        renderData: CardRenderer.builder((b) => {\n          b.moonLogisticsRate();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Darkside Meteor Bombardment",
  "tags" : [ "space" ],
  "cost" : 18,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/DarksideMeteorBombardment.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class DarksideMeteorBombardment extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.DARKSIDE_METEOR_BOMBARDMENT,\n      type: CardType.EVENT,\n      tags: [Tag.SPACE],\n      cost: 18,\n\n      behavior: {\n        stock: {steel: 2, titanium: 2},\n        moon: {miningRate: 2},\n      },\n\n      metadata: {\n        description: 'Gain 2 steel and 2 titanium. Raise the mining rate 2 steps.',\n        cardNumber: 'M33',\n        renderData: CardRenderer.builder((b) => {\n          b.steel(2).titanium(2);\n          b.br;\n          b.moonMiningRate({amount: 2});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Underground Detonators",
  "tags" : [ "moon" ],
  "cost" : 9,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/UndergroundDetonators.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class UndergroundDetonators extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.UNDERGROUND_DETONATORS,\n      type: CardType.EVENT,\n      tags: [Tag.MOON],\n      cost: 9,\n\n      behavior: {\n        stock: {steel: 1, titanium: 1},\n        moon: {miningRate: 1},\n      },\n\n      metadata: {\n        description: 'Gain 1 steel and 1 titanium. Raise the mining rate 1 step.',\n        cardNumber: 'M34',\n        renderData: CardRenderer.builder((b) => {\n          b.steel(1).titanium(1);\n          b.br;\n          b.moonMiningRate();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Lunar Trade Fleet",
  "tags" : [ "moon", "space" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "production" : "titanium",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarTradeFleet.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class LunarTradeFleet extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LUNAR_TRADE_FLEET,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON, Tag.SPACE],\n      cost: 8,\n\n      behavior: {\n        production: {megacredits: 1},\n        moon: {roadTile: {}},\n      },\n\n      requirements: {production: Resource.TITANIUM, count: 2},\n      metadata: {\n        description: 'Requires that you have 2 titanium production. ' +\n        'Increase your Mâ‚¬ production 1 step. Place a road.',\n        cardNumber: 'M35',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1));\n          b.br;\n          b.moonRoad();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Subterranean Habitats",
  "tags" : [ "moon" ],
  "victoryPoints" : 1,
  "cost" : 3,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/SubterraneanHabitats.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class SubterraneanHabitats extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.SUBTERRANEAN_HABITATS,\n      type: CardType.ACTIVE,\n      tags: [Tag.MOON],\n      cost: 3,\n      reserveUnits: {titanium: 1},\n      victoryPoints: 1,\n\n      metadata: {\n        description: 'Spend 1 titanium.',\n        cardNumber: 'M36',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you build a habitat on THE MOON, you spend 1 titanium less.', (eb) => {\n            eb.startEffect.moonHabitat().colon().minus().titanium(1);\n          });\n          b.br;\n          b.minus().titanium(1);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Improved Moon Concrete",
  "tags" : [ "moon", "moon" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/ImprovedMoonConcrete.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class ImprovedMoonConcrete extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.IMPROVED_MOON_CONCRETE,\n      type: CardType.ACTIVE,\n      tags: [Tag.MOON, Tag.MOON],\n      cost: 4,\n      reserveUnits: {steel: 1},\n\n\n      metadata: {\n        description: 'Spend 1 steel.',\n        cardNumber: 'M37',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you build a mine on The Moon, you spend 1 titanium less.', (eb) => {\n            eb.moonMine().startEffect.minus().titanium(1);\n          }).br;\n          b.minus().steel(1);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Mooncrate Block Factory",
  "tags" : [ "building" ],
  "victoryPoints" : 1,
  "cost" : 6,
  "type" : "active",
  "requirements" : [ {
    "miningTiles" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/MooncrateBlockFactory.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class MooncrateBlockFactory extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.MOONCRATE_BLOCK_FACTORY,\n      type: CardType.ACTIVE,\n      tags: [Tag.BUILDING],\n      cost: 6,\n      requirements: {miningTiles: 1},\n      victoryPoints: 1,\n\n      // Behavior is in MoonHabitatStandardProject, MoonMineStandardProject and MoonRoadStandardProject.\n\n      metadata: {\n        description: 'Requires 1 mine on The Moon.',\n        cardNumber: 'M38',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you pay for a Lunar standard project, you spend 4Mâ‚¬ less.', (eb) => {\n            eb.plate('Lunar standard projects').startEffect.megacredits(-4);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Heavy Duty Rovers",
  "tags" : [ ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/HeavyDutyRovers.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {TileType} from '../../../common/TileType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Card} from '../Card';\nimport {Resource} from '../../../common/Resource';\nimport {all} from '../Options';\n\nexport class HeavyDutyRovers extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.HEAVY_DUTY_ROVERS,\n      cost: 10,\n\n      behavior: {\n        moon: {logisticsRate: 1},\n      },\n\n      metadata: {\n        description: 'Gain 4 Mâ‚¬ for each mining tile adjacent to a road tile. Raise the logistic rate 1 step.',\n        cardNumber: 'M39',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(4).slash().moonRoad({size: Size.SMALL, all})\n            .moonMine({size: Size.SMALL, all});\n          b.br;\n          b.moonLogisticsRate({size: Size.SMALL});\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    MoonExpansion.ifMoon(player.game, (moonData) => {\n      const mines = MoonExpansion.spaces(player.game, TileType.MOON_MINE);\n      const minesNextToRoads = mines.filter((mine) => {\n        const spacesNextToMine = moonData.moon.getAdjacentSpaces(mine);\n        const firstRoad = spacesNextToMine.find((s) => MoonExpansion.spaceHasType(s, TileType.MOON_ROAD));\n        return firstRoad !== undefined;\n      });\n      const count = minesNextToRoads.length;\n      player.stock.add(Resource.MEGACREDITS, count * 4, {log: true});\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Microsingularity Plant",
  "tags" : [ "power", "moon" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ {
    "habitatTiles" : 2,
    "all" : true,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/MicrosingularityPlant.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all} from '../Options';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class MicrosingularityPlant extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.MICROSINGULARITY_PLANT,\n      type: CardType.AUTOMATED,\n      tags: [Tag.POWER, Tag.MOON],\n      cost: 10,\n      requirements: {habitatTiles: 2, all},\n\n      behavior: {\n        production: {energy: 2},\n      },\n\n      metadata: {\n        description: 'Requires 2 habitats on The Moon. Increase your energy production 2 steps.',\n        cardNumber: 'M40',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(2));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Heliostat Mirror Array",
  "tags" : [ "power" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/HeliostatMirrorArray.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class HeliostatMirrorArray extends Card {\n  constructor() {\n    super({\n      cost: 8,\n      tags: [Tag.POWER],\n      type: CardType.AUTOMATED,\n      name: CardName.HELIOSTAT_MIRROR_ARRAY,\n\n      behavior: {\n        production: {energy: 2},\n        stock: {heat: 1},\n      },\n      reserveUnits: {titanium: 1},\n\n      metadata: {\n        description: 'Spend 1 titanium. Gain 1 heat. Increase your energy production 2 steps.',\n        cardNumber: 'M41',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).heat(1);\n          b.br;\n          b.production((pb) => pb.energy(2));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Lunar Security Stations",
  "tags" : [ "moon" ],
  "cost" : 9,
  "type" : "active",
  "requirements" : [ {
    "roadTiles" : 3,
    "all" : true,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarSecurityStations.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {all} from '../Options';\n\nexport class LunarSecurityStations extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LUNAR_SECURITY_STATIONS,\n      type: CardType.ACTIVE,\n      tags: [Tag.MOON],\n      cost: 9,\n      requirements: {roadTiles: 3, all},\n\n      behavior: {\n        moon: {roadTile: {}},\n      },\n\n      metadata: {\n        description: 'Requires 3 road tiles on The Moon. Place a road.',\n        cardNumber: 'M42',\n        renderData: CardRenderer.builder((b) => {\n          b.text('Opponents may not remove your', Size.SMALL, true).br;\n          b.steel(1).titanium(1).production((pb) => pb.steel(1).titanium(1)).br;\n          b.moonRoad();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Hypersensitive Silicon Chip Factory",
  "tags" : [ "building" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "miningTiles" : 1,
    "all" : true,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/HypersensitiveSiliconChipFactory.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all} from '../Options';\n\nexport class HypersensitiveSiliconChipFactory extends Card {\n  constructor() {\n    super({\n      name: CardName.HYPERSENSITIVE_SILICON_CHIP_FACTORY,\n      type: CardType.AUTOMATED,\n      tags: [Tag.BUILDING],\n      cost: 8,\n\n      behavior: {\n        production: {megacredits: 4},\n      },\n      requirements: {miningTiles: 1, all},\n      reserveUnits: {titanium: 1},\n\n      metadata: {\n        description: 'Requires 1 mining tile on The Moon. Spend 1 titanium. Increase your Mâ‚¬ production 4 steps.',\n        cardNumber: 'M43',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).nbsp;\n          b.production((pb) => pb.megacredits(4)).br;\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Copernicus Solar Arrays",
  "tags" : [ "power", "space" ],
  "cost" : 4,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/CopernicusSolarArrays.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class CopernicusSolarArrays extends Card {\n  constructor() {\n    super({\n      name: CardName.COPERNICUS_SOLAR_ARRAYS,\n      type: CardType.AUTOMATED,\n      tags: [Tag.POWER, Tag.SPACE],\n      cost: 4,\n      reserveUnits: {titanium: 1},\n\n      behavior: {\n        production: {energy: 1},\n        stock: {heat: 2},\n      },\n\n      metadata: {\n        description: 'Spend 1 titanium. Gain 2 heat. Incease your energy production 1 step.',\n        cardNumber: 'M44',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1);\n          b.br;\n          b.heat(2);\n          b.br;\n          b.production((pb) => pb.energy(1));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Darkside Incubation Plant",
  "tags" : [ "microbe", "moon" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 7,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/DarksideIncubationPlant.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {IActionCard} from '../ICard';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {LogHelper} from '../../LogHelper';\n\nexport class DarksideIncubationPlant extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      name: CardName.DARKSIDE_INCUBATION_PLANT,\n      type: CardType.ACTIVE,\n      tags: [Tag.MICROBE, Tag.MOON],\n      cost: 7,\n\n      resourceType: CardResource.MICROBE,\n      victoryPoints: {resourcesHere: {}, per: 2},\n      reserveUnits: {titanium: 1},\n\n      metadata: {\n        description: {\n          text: 'Spend 1 titanium. 1 VP for every 2 microbes here.',\n          align: 'left',\n        },\n        cardNumber: 'M45',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 microbe here.', (eb) => {\n            eb.empty().startAction.resource(CardResource.MICROBE);\n          }).br;\n          b.action('Spend 2 microbes to raise the habitat rate 1 step.', (eb) => {\n            eb.resource(CardResource.MICROBE, 2).startAction.moonHabitatRate();\n          });\n\n          b.br;\n          b.minus().titanium(1);\n        }),\n      },\n    });\n  }\n\n  public canAct() {\n    return true;\n  }\n\n  private canRaiseHabitatRate(player: IPlayer) {\n    return this.resourceCount >= 2 && player.canAfford({cost: 0, tr: {moonHabitat: 1}});\n  }\n\n  public action(player: IPlayer) {\n    const options = [];\n    MoonExpansion.ifMoon(player.game, (moonData) => {\n      if (this.canRaiseHabitatRate(player) && moonData.habitatRate < 8) {\n        options.push(new SelectOption('Spend 2 microbes to raise the habitat rate 1 step.').andThen(() => {\n          player.removeResourceFrom(this, 2);\n          LogHelper.logRemoveResource(player, this, 2, 'raise the habitat rate');\n          MoonExpansion.raiseHabitatRate(player);\n          return undefined;\n        }));\n      }\n    });\n    options.push(new SelectOption('Add 1 microbe to this card').andThen(() => {\n      player.addResourceTo(this, 1);\n      return undefined;\n    }));\n    if (options.length === 1) {\n      return options[0].cb(undefined);\n    } else {\n      return new OrOptions(...options);\n    }\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Water Treatment Complex",
  "tags" : [ "moon" ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ {
    "habitatTiles" : 1,
    "all" : true,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/WaterTreatmentComplex.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all} from '../Options';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class WaterTreatmentComplex extends Card {\n  constructor() {\n    super({\n      name: CardName.WATER_TREATMENT_COMPLEX,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON],\n      cost: 9,\n      requirements: {habitatTiles: 1, all},\n      reserveUnits: {titanium: 1},\n\n      behavior: {\n        moon: {habitatRate: 2},\n      },\n\n      metadata: {\n        description: 'Requires 1 habitat tile on The Moon. Spend 1 titanium. Raise the habitat rate 2 steps.',\n        cardNumber: 'M46',\n        renderData: CardRenderer.builder((b) => b.minus().titanium(1).br.moonHabitatRate({amount: 2})),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Algae Bioreactors",
  "tags" : [ "plant" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/AlgaeBioreactors.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class AlgaeBioreactors extends Card {\n  constructor() {\n    super({\n      name: CardName.ALGAE_BIOREACTORS,\n      type: CardType.AUTOMATED,\n      tags: [Tag.PLANT],\n      cost: 5,\n\n      behavior: {\n        production: {plants: -1},\n        global: {oxygen: 1},\n        moon: {habitatRate: 1},\n      },\n\n      metadata: {\n        description: 'Decrease your plant production 1 step. Raise the habitat rate 1 step and oxygen 1%.',\n        cardNumber: 'M47',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.minus().plants(1)).moonHabitatRate().oxygen(1);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "HE3 Fusion Plant",
  "tags" : [ "power", "moon" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "miningRate" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/HE3FusionPlant.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all} from '../Options';\n\nexport class HE3FusionPlant extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.HE3_FUSION_PLANT,\n      type: CardType.AUTOMATED,\n      tags: [Tag.POWER, Tag.MOON],\n      cost: 6,\n\n      behavior: {\n        production: {energy: {moon: {mine: {}}}},\n      },\n\n      requirements: {miningRate: 2},\n      metadata: {\n        description: 'Requires the mining rate of 2 or higher. ' +\n            'Increase your energy production 1 step for each mining tile on The Moon.',\n        cardNumber: 'M48',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1)).slash().moonMine({all});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "HE3 Refinery",
  "tags" : [ "moon" ],
  "cost" : 8,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/HE3Refinery.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\n\nexport class HE3Refinery extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.HE3_REFINERY,\n      cost: 8,\n      tags: [Tag.MOON],\n\n      action: {\n        stock: {megacredits: {moon: {miningRate: {}}}},\n      },\n\n      metadata: {\n        cardNumber: 'M49',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Gain 1 Mâ‚¬ for each level of mining rate.', (eb) => {\n            eb.empty().startAction;\n            eb.megacredits(1).slash().moonMiningRate();\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "HE3 Lobbyists",
  "tags" : [ "moon" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/HE3Lobbyists.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class HE3Lobbyists extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.HE3_LOBBYISTS,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON],\n      cost: 8,\n\n      behavior: {\n        production: {megacredits: {tag: Tag.MOON}},\n      },\n\n      metadata: {\n        description: 'Increase your Mâ‚¬ production 1 step for each Moon tag you have (including this).',\n        cardNumber: 'M50',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1)).slash().tag(Tag.MOON);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Revolting Colonists",
  "tags" : [ "moon" ],
  "cost" : 3,
  "type" : "event",
  "requirements" : [ {
    "habitatRate" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/RevoltingColonists.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {TileType} from '../../../common/TileType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class RevoltingColonists extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.REVOLTING_COLONISTS,\n      type: CardType.EVENT,\n      tags: [Tag.MOON],\n      cost: 3,\n      requirements: {habitatRate: 4},\n\n      metadata: {\n        description: 'Requires 4 habitat rate. All players pay 3Mâ‚¬ for each habitat tile they own.',\n        cardNumber: 'M51',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().megacredits(3, {all}).slash().moonHabitat({size: Size.SMALL, all});\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    const colonies = MoonExpansion.spaces(game, TileType.MOON_HABITAT);\n    game.getPlayers().forEach((target) => {\n      const owned = colonies.filter((colony) => colony.player?.id === target.id).length;\n      if (owned > 0) {\n        const bill = owned * 3;\n        const owes = Math.min(bill, target.spendableMegacredits());\n\n        if (owes > 0) {\n          target.maybeBlockAttack(player, (proceed) => {\n            if (proceed) {\n              game.defer(new SelectPaymentDeferred(target, owes, {\n                title: message('You must spend ${0} Mâ‚¬ for ${1} habitat tiles', (b) => b.number(owes).number(owned))}))\n                .andThen(() =>\n                  game.log(\n                    '${0} spends ${1} Mâ‚¬ for the ${2} habitat tiles they own.',\n                    (b) => b.player(target).number(owes).number(owned)));\n            }\n            return undefined;\n          });\n        }\n      }\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Cosmic Radiation",
  "tags" : [ "moon" ],
  "cost" : 3,
  "type" : "event",
  "requirements" : [ {
    "miningRate" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/CosmicRadiation.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {TileType} from '../../../common/TileType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class CosmicRadiation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.COSMIC_RADIATION,\n      type: CardType.EVENT,\n      tags: [Tag.MOON],\n      cost: 3,\n\n      requirements: {miningRate: 4},\n      metadata: {\n        description: 'Requires 4 mining rate. All players pay 4Mâ‚¬ for each mining tile they own.',\n        cardNumber: 'M52',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().megacredits(4, {all}).slash().moonMine({size: Size.SMALL, all});\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    const mines = MoonExpansion.spaces(game, TileType.MOON_MINE);\n    game.getPlayersInGenerationOrder().forEach((mineTileOwner) => {\n      const owned = mines.filter((mine) => mine.player?.id === mineTileOwner.id).length;\n      if (owned > 0) {\n        const bill = owned * 4;\n        const owes = Math.min(bill, mineTileOwner.spendableMegacredits());\n\n        game.defer(new SelectPaymentDeferred(mineTileOwner, owes, {\n          title: message('You must spend ${0} Mâ‚¬ for ${1} mining tiles', (b) => b.number(owes).number(owned))}))\n          .andThen(() =>\n            game.log(\n              '${0} spends ${1} Mâ‚¬ for the ${2} mining tiles they own.',\n              (b) => b.player(mineTileOwner).number(owes).number(owned)));\n      }\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Off-World City Living",
  "tags" : [ "city", "space" ],
  "victoryPoints" : {
    "cities" : { },
    "all" : true,
    "per" : 3
  },
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/Off-WorldCityLiving.ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Road Piracy",
  "tags" : [ "moon" ],
  "cost" : 10,
  "type" : "event",
  "requirements" : [ {
    "logisticRate" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/RoadPiracy.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all, digit} from '../Options';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {message} from '../../logs/MessageBuilder';\nimport {AndOptions} from '../../inputs/AndOptions';\nimport {SelectAmount} from '../../inputs/SelectAmount';\nimport {Resource} from '../../../common/Resource';\nimport {sum} from '../../../common/utils/utils';\nimport {Message} from '../../../common/logs/Message';\nimport {SimpleDeferredAction} from '../../deferredActions/DeferredAction';\nimport {Priority} from '../../deferredActions/Priority';\n\nexport class RoadPiracy extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.ROAD_PIRACY,\n      type: CardType.EVENT,\n      tags: [Tag.MOON],\n      cost: 10,\n      requirements: {logisticRate: 3},\n\n      metadata: {\n        description: 'Requires 3 logistic rate. ' +\n          'Steal up to 6 steel or 4 titanium from other players. ' +\n          '(Resources may be stolen from more than 1 opponent.)',\n        cardNumber: 'M54',\n        renderData: CardRenderer.builder((b) => {\n          b.text('STEAL').steel(6, {all}).slash().titanium(4, {all, digit}).asterix();\n        }),\n      },\n    });\n  }\n\n  private generateOption(player: IPlayer, resource: Resource, title: Message, limit: number) {\n    const selectAmounts = [];\n    const ledger: Map<IPlayer, number> = new Map();\n    for (const opponent of player.getOpponents()) {\n      if (opponent.stock.get(resource) > 0 && !opponent.alloysAreProtected()) {\n        const selectAmount =\n          new SelectAmount(\n            message('${0}', (b) => b.player(opponent)), undefined, 0, opponent.stock.get(resource))\n            .andThen((amount: number) => {\n              ledger.set(opponent, amount);\n              return undefined;\n            });\n        selectAmounts.push(selectAmount);\n      }\n    }\n    if (selectAmounts.length === 0) {\n      return undefined;\n    }\n\n    const cb = () => {\n      const total = sum(Array.from(ledger.values()));\n      if (total > limit) {\n        // throw new Error(newMessage('You may only steal up to ${0} ${1} from all players', (b) => b.number(limit).string(resource)));\n        ledger.clear();\n        throw new Error(`You may only steal up to ${limit} ${resource} from all players`);\n      }\n      for (const [target, count] of ledger) {\n        if (count === 0) {\n          continue;\n        }\n        target.maybeBlockAttack(player, (proceed) => {\n          if (proceed) {\n            target.stock.steal(resource, count, player);\n          }\n          return undefined;\n        });\n      }\n      return undefined;\n    };\n    // TODO(kberg): does title always have to be set separately? That's fixable.\n    const option = new AndOptions(...selectAmounts).andThen(cb);\n    option.title = title;\n    return option;\n  }\n\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new SimpleDeferredAction(player, () => this.do(player)), Priority.ATTACK_OPPONENT);\n    return undefined;\n  }\n\n  public do(player: IPlayer) {\n    const game = player.game;\n    const stealSteel = message('Steal ${0} steel', (b) => b.number(6));\n    const stealTitanium = message('Steal ${0} titanium', (b) => b.number(4));\n    if (game.isSoloMode()) {\n      return new OrOptions(\n        new SelectOption(stealSteel, 'Steal steel').andThen(() => {\n          player.steel += 6;\n          return undefined;\n        }),\n        new SelectOption(stealTitanium, 'Steal titanium').andThen(() => {\n          player.titanium += 4;\n          return undefined;\n        }),\n      );\n    }\n\n    const options = new OrOptions();\n\n    const steelOption = this.generateOption(player, Resource.STEEL, stealSteel, 6);\n    if (steelOption !== undefined) {\n      options.options.push(steelOption);\n    }\n\n    const titaniumOption = this.generateOption(player, Resource.TITANIUM, stealTitanium, 4);\n    if (titaniumOption !== undefined) {\n      options.options.push(titaniumOption);\n    }\n\n    if (options.options.length === 0) {\n      return undefined;\n    }\n\n    options.options.push(new SelectOption('Do not steal'));\n    return options;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Lunar Mine Urbanization",
  "tags" : [ "moon", "building" ],
  "cost" : 12,
  "type" : "event",
  "requirements" : [ {
    "miningTiles" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarMineUrbanization.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {TileType} from '../../../common/TileType';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {Card} from '../Card';\n\nexport class LunarMineUrbanization extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LUNAR_MINE_URBANIZATION,\n      type: CardType.EVENT,\n      tags: [Tag.MOON, Tag.BUILDING],\n      cost: 12,\n\n      behavior: {\n        production: {megacredits: 1},\n      },\n      requirements: {miningTiles: 1},\n      tr: {moonHabitat: 1},\n\n      metadata: {\n        cardNumber: 'M55',\n        description: 'Requires you have 1 mine tile. Increase your Mâ‚¬ production 1 step. Raise the habitat rate 1 step. ' +\n        'Remove 1 of your mine tiles (does not affect the mining rate.) ' +\n        'Place this special tile there, regardless of placement rules. ' +\n        'Gain placement bonuses as usual. This tile counts both as a habitat and a mine tile.',\n\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1));\n          b.moonHabitatRate();\n          b.tile(TileType.LUNAR_MINE_URBANIZATION, true).asterix();\n        }),\n      },\n      tilesBuilt: [TileType.LUNAR_MINE_URBANIZATION],\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return MoonExpansion.spaces(player.game, TileType.MOON_MINE, {ownedBy: player, upgradedTiles: false}).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const spaces = MoonExpansion.spaces(player.game, TileType.MOON_MINE, {ownedBy: player, upgradedTiles: false});\n    return new SelectSpace('Select one of your mines to upgrade', spaces)\n      .andThen((space) => {\n        if (space.tile === undefined) {\n          throw new Error(`Space ${space.id} should have a tile, how doesn't it?`);\n        }\n        // #6982, make compatible with Hostile Takeover\n        const owner = space.player;\n        const coOwner = space.coOwner;\n\n        space.tile = undefined;\n        space.player = undefined;\n        space.coOwner = undefined;\n        MoonExpansion.addTile(player, space.id, {tileType: TileType.LUNAR_MINE_URBANIZATION, card: this.name});\n\n        space.player = owner;\n        space.coOwner = coOwner;\n\n        MoonExpansion.raiseHabitatRate(player);\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Thorium Rush",
  "tags" : [ "moon", "moon", "building" ],
  "cost" : 30,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/ThoriumRush.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\n// TODO(kberg): Add a test for how this card operates with Reds. It will be a good verification.\nexport class ThoriumRush extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.THORIUM_RUSH,\n      type: CardType.EVENT,\n      tags: [Tag.MOON, Tag.MOON, Tag.BUILDING],\n      cost: 30,\n\n      behavior: {\n        moon: {\n          habitatTile: {},\n          mineTile: {},\n          roadTile: {},\n        },\n      },\n\n      metadata: {\n        description: 'Place 1 habitat tile, 1 mining tile and 1 road tile on The Moon. ' +\n        'Raise the habitat rate, mining rate and logistic rate 1 step.',\n        cardNumber: 'M56',\n        renderData: CardRenderer.builder((b) => {\n          b.moonHabitat({secondaryTag: AltSecondaryTag.MOON_HABITAT_RATE})\n            .moonMine({secondaryTag: AltSecondaryTag.MOON_MINING_RATE})\n            .moonRoad({secondaryTag: AltSecondaryTag.MOON_LOGISTICS_RATE});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "HE3 Production Quotas",
  "tags" : [ "moon" ],
  "cost" : 10,
  "type" : "event",
  "requirements" : [ {
    "party" : "Kelvinists"
  }, {
    "miningTiles" : 1,
    "all" : true,
    "count" : 1
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/moon/HE3ProductionQuotas.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {TileType} from '../../../common/TileType';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\nimport {Resource} from '../../../common/Resource';\n\nexport class HE3ProductionQuotas extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.HE3_PRODUCTION_QUOTAS,\n      type: CardType.EVENT,\n      tags: [Tag.MOON],\n      cost: 10,\n\n      behavior: {\n        moon: {miningRate: 1},\n      },\n\n      requirements: [{party: PartyName.KELVINISTS}, {miningTiles: 1, all}],\n      metadata: {\n        description: 'Requires that Kelvinists are ruling or that you have 2 delegates there, and 1 mine tile on The Moon. ' +\n        'Pay 1 steel per mine tile on The Moon to gain 4 heat per mine tile on The Moon. Raise the mining rate 1 step.',\n        cardNumber: 'M57',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().steel(1).slash().moonMine({size: Size.SMALL, all})\n            .colon().text('4').heat(1).slash().moonMine({size: Size.SMALL, all}).br;\n          b.moonMiningRate();\n        }),\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    const moonTiles = MoonExpansion.spaces(player.game, TileType.MOON_MINE, {surfaceOnly: true});\n    if (player.steel < moonTiles.length) {\n      return false;\n    }\n    return true;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const moonTiles = MoonExpansion.spaces(player.game, TileType.MOON_MINE, {surfaceOnly: true});\n    const steelSpent = moonTiles.length;\n    const heatGained = moonTiles.length * 4;\n    player.stock.deduct(Resource.STEEL, steelSpent);\n    player.heat += heatGained;\n    player.game.log('Player spent ${0} steel and gained ${1} heat', (b) => b.number(steelSpent).number(heatGained));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Conference",
  "tags" : [ "science", "moon" ],
  "cost" : 5,
  "type" : "event",
  "requirements" : [ {
    "party" : "Scientists"
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/moon/LunaConference.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {Card} from '../Card';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\nexport class LunaConference extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LUNA_CONFERENCE,\n      type: CardType.EVENT,\n      tags: [Tag.SCIENCE, Tag.MOON],\n      cost: 5,\n      requirements: {party: PartyName.SCIENTISTS},\n\n      behavior: {\n        stock: {megacredits: {moon: {road: {}, habitat: {}}, each: 2}},\n      },\n\n      metadata: {\n        description: 'Requires that Scientists are ruling or that you have 2 delegates there. ' +\n        'Gain 2 Mâ‚¬ per road tile on The Moon. Gain 2Mâ‚¬ per habitat tile on The Moon.',\n        cardNumber: 'M58',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(2).slash().moonRoad({size: Size.SMALL, all}).br;\n          b.megacredits(2).slash().moonHabitat({size: Size.SMALL, all}).br;\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "We Grow As One",
  "tags" : [ "space" ],
  "cost" : 8,
  "type" : "event",
  "requirements" : [ {
    "party" : "Unity"
  } ],
  "compatibility" : [ "turmoil", "colonies" ],
  "sourceFile" : "src/server/cards/moon/WeGrowAsOne.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {Card} from '../Card';\nimport {all} from '../Options';\n\nexport class WeGrowAsOne extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.WE_GROW_AS_ONE,\n      type: CardType.EVENT,\n      tags: [Tag.SPACE],\n      cost: 8,\n      requirements: {party: PartyName.UNITY},\n\n      metadata: {\n        description: 'Requires that Unity are ruling or that you have 2 delegates there. ' +\n        'Increase ALL colony tile tracks 1 step. ' +\n        'Increase each colony tile track 1 step if you have a colony on that colony tile.',\n        cardNumber: 'M59',\n        renderData: CardRenderer.builder((b) => {\n          b.colonyTile({all}).text('+1').br;\n          b.colonies(1).asterix().slash().colonyTile().text('+1');\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.colonies.forEach((colony) => {\n      if (colony.colonies.includes(player.id)) {\n        colony.increaseTrack(2);\n      } else {\n        colony.increaseTrack(1);\n      }\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Mooncrate Convoys To Mars",
  "tags" : [ ],
  "cost" : 13,
  "type" : "event",
  "requirements" : [ {
    "party" : "Mars First"
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/moon/MooncrateConvoysToMars.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {IPlayer} from '../../IPlayer';\nimport {SellSteel} from '../../moon/SellSteel';\nimport {all} from '../Options';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class MooncrateConvoysToMars extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.MOONCRATE_CONVOYS_TO_MARS,\n      type: CardType.EVENT,\n      cost: 13,\n      requirements: {party: PartyName.MARS},\n\n      behavior: {\n        moon: {logisticsRate: 1},\n      },\n\n      metadata: {\n        description: 'Requires that Mars First are ruling or that you have 2 delegates there. ' +\n          'Raise the logistic rate 1 step. All players may sell their steel resources for 3Mâ‚¬ each.',\n        cardNumber: 'M60',\n        renderData: CardRenderer.builder((b) => {\n          b.moonLogisticsRate().br;\n          b.text('X').steel(1, {all}).colon().text('X').megacredits(3);\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    game.getPlayers().forEach((player) => {\n      game.defer(new SellSteel(player));\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "An Offer You Can't Refuse",
  "tags" : [ ],
  "cost" : 5,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/moon/AnOfferYouCan'tRefuse.ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Preliminary Darkside",
  "tags" : [ "moon" ],
  "cost" : 15,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/PreliminaryDarkside.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {Resource} from '../../../common/Resource';\nimport {Card} from '../Card';\nimport {digit} from '../Options';\n\nexport class PreliminaryDarkside extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.PRELIMINARY_DARKSIDE,\n      type: CardType.EVENT,\n      tags: [Tag.MOON],\n      cost: 15,\n\n      behavior: {\n        moon: {mineTile: {}},\n      },\n\n      metadata: {\n        description: 'Gain 3 titanium or 4 steel. Place a mine.',\n        cardNumber: 'M63',\n        renderData: CardRenderer.builder((b) => {\n          b.titanium(3, {digit}).or().steel(4, {digit}).br;\n          b.moonMine();\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    return new OrOptions(\n      new SelectOption('Gain 3 titanium', 'Gain titanium').andThen(() => {\n        player.stock.add(Resource.TITANIUM, 3, {log: true});\n        return undefined;\n      }),\n      new SelectOption('Gain 4 steel', 'Gain steel').andThen(() => {\n        player.stock.add(Resource.STEEL, 4, {log: true});\n        return undefined;\n      }));\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Hostile Takeover",
  "tags" : [ "city", "moon" ],
  "cost" : 14,
  "type" : "event",
  "requirements" : [ {
    "habitatRate" : 2,
    "count" : 2
  }, {
    "miningRate" : 4,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/HostileTakeover.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {TileType} from '../../../common/TileType';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {Space} from '../../boards/Space';\n\nexport class HostileTakeover extends Card {\n  constructor() {\n    super({\n      name: CardName.HOSTILE_TAKEOVER,\n      type: CardType.EVENT,\n      tags: [Tag.CITY, Tag.MOON],\n      cost: 14,\n      requirements: [{habitatRate: 2}, {miningRate: 4}],\n\n      behavior: {\n        production: {megacredits: 2},\n      },\n\n      metadata: {\n        cardNumber: 'M64',\n        renderData: CardRenderer.builder((b) => {\n          b.moonHabitat().asterix().moonMine().asterix().production((pb) => pb.megacredits(2));\n        }),\n        description: 'Requires a habitat rate of 2 or higher, and a mining rate of 4 or higher. ' +\n          'Add your player marker to a habitat tile and a mining tile owned by any opponent. ' +\n          'Those now also count as yours. Increase your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer, type: TileType) {\n    return MoonExpansion.spaces(player.game, type, {upgradedTiles: false})\n      .filter((space) => space.player !== player && space.coOwner === undefined);\n  }\n  public override bespokeCanPlay(player: IPlayer) {\n    const habitatSpaces = this.availableSpaces(player, TileType.MOON_HABITAT);\n    const mineSpaces = this.availableSpaces(player, TileType.MOON_MINE);\n    const lunarMineUrbanizationSpaces = this.availableSpaces(player, TileType.LUNAR_MINE_URBANIZATION);\n    // TODO(kberg): warn if Lunar Mine Urbanization is one of the few eligibile cards.\n    if (habitatSpaces.length > 0 && mineSpaces.length > 0) {\n      return true;\n    }\n    if (habitatSpaces.length + mineSpaces.length > 0 && lunarMineUrbanizationSpaces.length > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const habitatSpaces = this.availableSpaces(player, TileType.MOON_HABITAT);\n    const mineSpaces = this.availableSpaces(player, TileType.MOON_MINE);\n\n    // It is expected that Lunar Mine Urbanization cannot be played twice.\n    let lunarMineUrbanizationSpace: Space | undefined = this.availableSpaces(player, TileType.LUNAR_MINE_URBANIZATION)[0];\n\n    if (lunarMineUrbanizationSpace !== undefined) {\n      if (mineSpaces.length === 0) {\n        mineSpaces.push(lunarMineUrbanizationSpace);\n        lunarMineUrbanizationSpace = undefined;\n      } else {\n        habitatSpaces.push(lunarMineUrbanizationSpace);\n      }\n    }\n\n    return new SelectSpace('Select a habitat space to co-own', habitatSpaces).andThen((space) => {\n      space.coOwner = player;\n      if (space.id === lunarMineUrbanizationSpace?.id) {\n        lunarMineUrbanizationSpace = undefined;\n      } else {\n        if (lunarMineUrbanizationSpace !== undefined) {\n          mineSpaces.push(lunarMineUrbanizationSpace);\n        }\n      }\n      return new SelectSpace('Select a mining space to co-own', mineSpaces).andThen((space) => {\n        space.coOwner = player;\n        return undefined;\n      });\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Syndicate Pirate Raids",
  "tags" : [ "space" ],
  "cost" : 8,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/moon/SyndicatePirateRaids.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class SyndicatePirateRaids extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.SYNDICATE_PIRATE_RAIDS,\n      type: CardType.EVENT,\n      tags: [Tag.SPACE],\n      cost: 8,\n\n      metadata: {\n        description: 'ALL OPPONENTS CANNOT RETRIEVE THEIR TRADE FLEETS THIS GENERATION',\n        cardNumber: 'M65',\n        renderData: CardRenderer.builder((b) => {\n          b.tradeFleet().asterix();\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    game.syndicatePirateRaider = player.id;\n\n    game.log(\n      'All players except ${0} may not retrieve their trade fleets this generation.',\n      (b) => b.player(player));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Darkside Mining Syndicate",
  "tags" : [ "moon", "space" ],
  "cost" : 18,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/DarksideMiningSyndicate.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {Resource} from '../../../common/Resource';\nimport {Card} from '../Card';\n\nexport class DarksideMiningSyndicate extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.DARKSIDE_MINING_SYNDICATE,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON, Tag.SPACE],\n      cost: 18,\n      tr: {moonMining: 1},\n\n      metadata: {\n        description: 'Increase your titanium production 2 steps, or ' +\n        '1 step if the mining rate is at least 3. And then raise the mining rate 1 step.',\n        cardNumber: 'M66',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.titanium(2)).or().br;\n          b.moonMiningRate({amount: 3}).colon().production((pb) => pb.titanium(1)).br;\n          b.moonMiningRate().br;\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const productionBonus = (MoonExpansion.moonData(player.game).miningRate >= 3) ? 1 : 2;\n    player.production.add(Resource.TITANIUM, productionBonus, {log: true});\n    MoonExpansion.raiseMiningRate(player);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Staging Station \"Behemoth\"",
  "tags" : [ "space" ],
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/moon/StagingStation\"Behemoth\".ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Luna Archives",
  "tags" : [ "science", "moon" ],
  "cost" : 18,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Science",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunaArchives.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {IActionCard} from '../ICard';\n\nexport class LunaArchives extends ActionCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.LUNA_ARCHIVES,\n      type: CardType.ACTIVE,\n      tags: [Tag.SCIENCE, Tag.MOON],\n      cost: 18,\n      resourceType: CardResource.SCIENCE,\n\n      action: {\n        addResources: {tag: Tag.MOON},\n      },\n\n      metadata: {\n        cardNumber: 'M69',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 science resource here for each Moon tag you have.',\n            (ab) => ab.empty().startAction.resource(CardResource.SCIENCE).slash().tag(Tag.MOON));\n          b.br;\n          b.effect('When playing a Moon tag, science resources here may be used as payment, and are worth 1Mâ‚¬ each.',\n            (eb) => eb.tag(Tag.MOON).startEffect.resource(CardResource.SCIENCE).equals().megacredits(1));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Senate",
  "tags" : [ "moon" ],
  "victoryPoints" : {
    "tag" : "moon",
    "per" : 2
  },
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "moon",
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunaSenate.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n// import {all} from '../Options';\n\nexport class LunaSenate extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LUNA_SENATE,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON],\n      cost: 20,\n      victoryPoints: {tag: Tag.MOON, per: 2},\n\n      behavior: {\n        production: {megacredits: {tag: Tag.MOON, per: 2, others: true}},\n        // production: {megacredits: {tag: Tag.MOON, all: true}},\n      },\n\n      requirements: {tag: Tag.MOON, count: 3},\n      metadata: {\n        // description: 'Requires that you have 3 Moon tags. Increase your Mâ‚¬ production 1 step per Moon tag in the game (including these.)',\n        description: 'Requires that you have 3 Moon tags. Increase your Mâ‚¬ production 1 step per 2 Moon tags your OPPONENTS have.',\n        cardNumber: 'M70',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1).slash().tag(Tag.MOON, {amount: 2}).asterix()).br;\n          b.vpText('1 VP per Moon 2 tags you own.');\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Political Institute",
  "tags" : [ "moon", "earth" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ {
    "tag" : "moon",
    "count" : 2
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/moon/LunaPoliticalInstitute.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\n\nexport class LunaPoliticalInstitute extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LUNA_POLITICAL_INSTITUTE,\n      type: CardType.ACTIVE,\n      tags: [Tag.MOON, Tag.EARTH],\n      cost: 6,\n      requirements: {tag: Tag.MOON, count: 2},\n\n      action: {\n        turmoil: {\n          sendDelegates: {count: 1},\n        },\n      },\n\n      metadata: {\n        description: 'Requires that you have 2 Moon tags.',\n        cardNumber: 'M71',\n        renderData: CardRenderer.builder((b) => {\n          b.action(\n            'Place one of your delegates in any party.',\n            (eb) => eb.empty().startAction.delegates(1));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Copernicus Tower",
  "tags" : [ "space", "moon" ],
  "victoryPoints" : {
    "tag" : "moon",
    "per" : 2
  },
  "cost" : 28,
  "type" : "active",
  "requirements" : [ {
    "production" : "titanium",
    "count" : 2
  } ],
  "resourceType" : "Asteroid",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/CopernicusTower.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Resource} from '../../../common/Resource';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {ActionCard} from '../ActionCard';\n\nexport class CopernicusTower extends ActionCard {\n  constructor() {\n    super({\n      name: CardName.COPERNICUS_TOWER,\n      type: CardType.ACTIVE,\n      tags: [Tag.SPACE, Tag.MOON],\n      cost: 28,\n\n      resourceType: CardResource.ASTEROID,\n      requirements: {production: Resource.TITANIUM, count: 2},\n      victoryPoints: {tag: Tag.MOON, per: 2},\n\n      action: {\n        or: {\n          autoSelect: true,\n          behaviors: [\n            {\n              spend: {resourcesHere: 1},\n              tr: 2,\n              title: 'Remove 1 asteroid resource to increase TR 2 step',\n            },\n            {\n              addResources: 1,\n              title: 'Add 1 asteroid resource to this card',\n            },\n          ],\n        },\n      },\n\n      metadata: {\n        cardNumber: 'M72',\n        renderData: CardRenderer.builder((b) => {\n          b.text('Requires you have 2 titanium production.', Size.TINY, false, false).br;\n          b.action('Add 1 asteroid resource here, or spend 1 asteroid resource here to raise your TR 2 steps.', (eb) => {\n            eb.empty().startAction.resource(CardResource.ASTEROID).nbsp.slash().nbsp.resource(CardResource.ASTEROID).arrow().tr(2);\n          });\n          b.br;\n          b.vpText('1 VP PER 2 MOON TAGS YOU HAVE.');\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Small Duty Rovers",
  "tags" : [ "moon", "space" ],
  "victoryPoints" : 1,
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/SmallDutyRovers.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {SpaceType} from '../../../common/boards/SpaceType';\nimport {Resource} from '../../../common/Resource';\nimport {Size} from '../../../common/cards/render/Size';\nimport {TileType} from '../../../common/TileType';\nimport {all} from '../Options';\nimport {Card} from '../Card';\n\nexport class SmallDutyRovers extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.SMALL_DUTY_ROVERS,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON, Tag.SPACE],\n      cost: 9,\n      reserveUnits: {titanium: 1},\n      victoryPoints: 1,\n\n      metadata: {\n        description: 'Spend 1 titanium. Gain 1 Mâ‚¬ per habitat tile, mine tile and road tile on The Moon.',\n        cardNumber: 'M73',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(1).br;\n          b.megacredits(1).slash()\n            .moonHabitat({size: Size.SMALL, all})\n            .moonMine({size: Size.SMALL, all})\n            .moonRoad({size: Size.SMALL, all});\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const moonData = MoonExpansion.moonData(player.game);\n    let gain = moonData.moon.spaces.filter((s) => s.tile !== undefined && s.spaceType !== SpaceType.COLONY).length;\n    if (moonData.moon.spaces.some((s) => s.tile?.tileType === TileType.LUNAR_MINE_URBANIZATION)) {\n      gain++;\n    }\n    player.stock.add(Resource.MEGACREDITS, gain, {log: true});\n\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Lunar Industry Complex",
  "tags" : [ "power", "building" ],
  "cost" : 22,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarIndustryComplex.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class LunarIndustryComplex extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LUNAR_INDUSTRY_COMPLEX,\n      type: CardType.AUTOMATED,\n      tags: [Tag.POWER, Tag.BUILDING],\n      cost: 22,\n\n      behavior: {\n        production: {steel: 1, titanium: 1, energy: 2, heat: 1},\n        moon: {mineTile: {}},\n      },\n      reserveUnits: {titanium: 2},\n\n      metadata: {\n        description: 'Spend 2 titanium. Place a mine tile on The Moon and raise the mining rate 1 step. ' +\n          'Increase your steel, titanium, and heat production 1 step each. Increase your energy production 2 steps.',\n        cardNumber: 'M74',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(2).moonMine({secondaryTag: AltSecondaryTag.MOON_MINING_RATE}).br;\n          b.production((pb) => pb.steel(1).titanium(1).heat(1).energy(2));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Darkside Observatory",
  "tags" : [ "science" ],
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/DarksideObservatory.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {MoonCards} from '../../moon/MoonCards';\nimport {IActionCard, ICard} from '../ICard';\nimport {Card} from '../Card';\nimport {SelectCard} from '../../inputs/SelectCard';\n\nexport class DarksideObservatory extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      name: CardName.DARKSIDE_OBSERVATORY,\n      type: CardType.ACTIVE,\n      tags: [Tag.SCIENCE],\n      cost: 10,\n\n      metadata: {\n        cardNumber: 'M75',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 science to ANY card [EXCEPT those giving 2 VP or more per science resource.]', (ab) => {\n            ab.empty().startAction.resource(CardResource.SCIENCE).asterix();\n          }).br;\n          b.or().br;\n          b.action('Add 2 data to ANY card.', (ab) => {\n            ab.empty().startAction.resource(CardResource.DATA, 2).asterix();\n          });\n        }),\n      },\n    });\n  }\n\n  private include(card: ICard) {\n    return card.resourceType === CardResource.DATA || MoonCards.scienceCardsWithLessThan2VP.has(card.name);\n  }\n\n  public canAct(player: IPlayer) {\n    return player.playedCards.some(this.include) || player.corporations.some(this.include);\n  }\n\n  private addResource(card: ICard, player: IPlayer): void {\n    if (card.resourceType === CardResource.DATA) {\n      player.addResourceTo(card, {qty: 2, log: true});\n    }\n    if (card.resourceType === CardResource.SCIENCE) {\n      player.addResourceTo(card, {qty: 1, log: true});\n    }\n  }\n\n  public action(player: IPlayer) {\n    const playableCards = [\n      ...player.playedCards.filter((c) => this.include(c)),\n      ...player.corporations.filter((c) => this.include(c)),\n    ];\n\n    return new SelectCard(\n      'Select card to add EITHER 1 science resource OR 2 Data resources',\n      'Add',\n      playableCards)\n      .andThen(([card]) => {\n        this.addResource(card, player);\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Martian Embassy",
  "tags" : [ "moon", "mars", "mars" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ "pathfinders" ],
  "sourceFile" : "src/server/cards/moon/MartianEmbassy.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {PathfindersExpansion} from '../../pathfinders/PathfindersExpansion';\n\nexport class MartianEmbassy extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.MARTIAN_EMBASSY,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON, Tag.MARS, Tag.MARS],\n      cost: 11,\n\n      metadata: {\n        cardNumber: 'M76',\n        description: 'Raise the Mars Planetary Track 1 step for every 3 Moon tags you have, including this.',\n        renderData: CardRenderer.builder((b) => {\n          b.tag(Tag.MARS).planetaryTrack().text('+1').slash().tag(Tag.MOON, 3);\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    // The +1 is \"including this\".\n    const tags = player.tags.count(Tag.MOON) + 1;\n    const rate = Math.floor(tags / 3);\n    PathfindersExpansion.raiseTrack(Tag.MARS, player, rate);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Earth Embassy",
  "tags" : [ "moon", "earth" ],
  "victoryPoints" : 1,
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/EarthEmbassy.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class EarthEmbassy extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.EARTH_EMBASSY,\n      type: CardType.ACTIVE,\n      tags: [Tag.MOON, Tag.EARTH],\n      cost: 10,\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'M77',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you perform an action, your PLAYED Moon tags count as Earth tags, but not vice versa.', (eb) => {\n            eb.empty().startEffect.tag(Tag.MOON).equals().tag(Tag.EARTH);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Rover Drivers Union",
  "tags" : [ "moon" ],
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ {
    "logisticRate" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/RoverDriversUnion.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {Resource} from '../../../common/Resource';\nimport {Card} from '../Card';\n\nexport class RoverDriversUnion extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.ROVER_DRIVERS_UNION,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON],\n      cost: 16,\n      requirements: {logisticRate: 2},\n\n      behavior: {\n        moon: {roadTile: {}},\n      },\n\n      metadata: {\n        description: 'Requires 2 logistic rate. Place a road. Increase your Mâ‚¬ production 1 step per logistic rate.',\n        cardNumber: 'M78',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1)).slash().moonLogisticsRate().br;\n          b.moonRoad;\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    MoonExpansion.ifMoon(player.game, (moonData) => {\n      player.production.add(Resource.MEGACREDITS, moonData.logisticRate, {log: true});\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "L.T.F. Headquarters",
  "tags" : [ "space", "moon" ],
  "cost" : 25,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/moon/L.T.F.Headquarters.ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Darkside Smugglers' Union",
  "tags" : [ "space" ],
  "cost" : 17,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/moon/DarksideSmugglers'Union.ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Undermoon Drug Lords Network",
  "tags" : [ "moon" ],
  "victoryPoints" : -2,
  "cost" : 1,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/UndermoonDrugLordsNetwork.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class UndermoonDrugLordsNetwork extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.UNDERMOON_DRUG_LORDS_NETWORK,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON],\n      cost: 1,\n      victoryPoints: -2,\n\n      behavior: {\n        production: {megacredits: {moon: {habitatRate: {}}, per: 1}},\n      },\n\n      metadata: {\n        description: 'Increase your Mâ‚¬ production 1 step per step of habitat rate.',\n        cardNumber: 'M81',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.megacredits(1);\n          }).slash().moonHabitatRate({amount: 1});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "L.T.F. Privileges",
  "tags" : [ "moon" ],
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/L.T.F.Privileges.ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Grand Luna Academy",
  "tags" : [ "moon" ],
  "victoryPoints" : 1,
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/GrandLunaAcademy.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {digit} from '../Options';\n\nexport class GrandLunaAcademy extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.GRAND_LUNA_ACADEMY,\n      type: CardType.AUTOMATED,\n      tags: [Tag.MOON],\n      cost: 13,\n      victoryPoints: 1,\n\n      behavior: {\n        drawCard: {count: {tag: Tag.MOON, per: 2}},\n      },\n\n      metadata: {\n        description: 'Draw 1 card per 2 Moon tags you have, including this.',\n        cardNumber: 'M83',\n        renderData: CardRenderer.builder((b) => {\n          b.cards(1).slash().tag(Tag.MOON, {amount: 2, digit});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Ecumenopolis",
  "tags" : [ "city", "city", "moon", "space" ],
  "cost" : 25,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunaEcumenopolis.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\nimport {Card} from '../Card';\nimport {TileType} from '../../../common/TileType';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {PlaceMoonHabitatTile} from '../../moon/PlaceMoonHabitatTile';\nimport {Space} from '../../boards/Space';\nimport {MoonData} from '../../moon/MoonData';\n\nexport class LunaEcumenopolis extends Card {\n  constructor() {\n    super({\n      name: CardName.LUNA_ECUMENOPOLIS,\n      type: CardType.AUTOMATED,\n      tags: [Tag.CITY, Tag.CITY, Tag.MOON, Tag.SPACE],\n      cost: 25,\n      reserveUnits: {titanium: 2},\n\n      metadata: {\n        cardNumber: 'M84',\n        hasExternalHelp: true,\n        description: 'Spend 2 titanium. ' +\n        'Place 2 habitat tiles adjacent to at least 2 other habitat tiles and raise habitat rate 2 steps. ' +\n        'Increase your TR 1 step for each 2 steps of the habitat rate.',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().titanium(2).nbsp;\n          b.text('2').moonHabitat({secondaryTag: AltSecondaryTag.MOON_HABITAT_RATE}).asterix().br;\n          b.tr(1).slash().moonHabitatRate().moonHabitatRate();\n        }),\n      },\n      tilesBuilt: [TileType.MOON_HABITAT, TileType.MOON_HABITAT],\n    });\n  }\n\n  private canAffordTRBump(player: IPlayer) {\n    // Note for someone paying close attention:\n    //\n    // In the real world, this card can be resolved in one of two orders:\n    // 1. Raise the TR rate before raising the habitat rate\n    // 2. Raise the habitat rate before the TR rate.\n    // In the first case, the player will get fewer TR, but also is more likely to afford the costs.\n    // In the second case, the player will get the most TR, but will have to pay up to 3 more MC, the cost\n    // of that additional TR bump.\n    //\n    // This algorithm assumes the second case.\n    //\n    // If someone wants to optimize for this, they can change this algorithm to use the current habitat rate instead\n    // of the expected habitat rate, but then they must also change the order in which the player gains those bonuses\n    // in play().\n    //\n    const moonData = MoonExpansion.moonData(player.game);\n    const expectedHabitatRate = Math.min(moonData.habitatRate + 2, 8);\n    const expectedTRBump = Math.floor(expectedHabitatRate / 2);\n    return player.canAfford({cost: 0, tr: {moonHabitat: 2, tr: expectedTRBump}});\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    if (!this.canAffordTRBump(player)) {\n      return false;\n    }\n\n    const moonData = MoonExpansion.moonData(player.game);\n    const spaces = moonData.moon.getAvailableSpacesOnLand(player);\n    const len = spaces.length;\n\n    let firstSpaceId = '';\n\n    // This function returns true when this space is next to two colonies. Don't try to understand firstSpaceId yet.\n    const nextToTwoColonies = function(space: Space): boolean {\n      const adjacentSpaces = moonData.moon.getAdjacentSpaces(space).filter((adjacentSpace) => {\n        return MoonExpansion.spaceHasType(adjacentSpace, TileType.MOON_HABITAT) || adjacentSpace.id === firstSpaceId;\n      });\n      return adjacentSpaces.length >= 2;\n    };\n\n    // Go through every available land space.\n    for (let x = 0; x < len; x++) {\n      const first = spaces[x];\n      // If it's next to two colonies\n      if (nextToTwoColonies(first) === true) {\n        // Remember it.\n        firstSpaceId = first.id;\n        // Now go through all the land spaces again\n        for (let y = 0; y < len; y++) {\n          const second = spaces[y];\n          if (second.id === firstSpaceId) continue;\n          // Now if it's next to two colonies, it includes the first colony you placed. That's what firstSpaceId is for.\n          if (nextToTwoColonies(second) === true) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    // These all have the same priority: Default.\n    player.game.defer(new CustomPlaceMoonTile(player));\n    player.game.defer(new CustomPlaceMoonTile(player));\n    player.defer(() => {\n      const habitatRate = MoonExpansion.moonData(player.game).habitatRate;\n      player.increaseTerraformRating(Math.floor(habitatRate / 2));\n    });\n    return undefined;\n  }\n}\n\nclass CustomPlaceMoonTile extends PlaceMoonHabitatTile {\n  protected override getSpaces(moonData: MoonData) {\n    const spaces = moonData.moon.getAvailableSpacesOnLand(this.player);\n    const filtered = spaces.filter((space) => {\n      const adjacentSpaces = moonData.moon.getAdjacentSpaces(space).filter((adjacentSpace) => {\n        return MoonExpansion.spaceHasType(adjacentSpace, TileType.MOON_HABITAT);\n      });\n      return adjacentSpaces.length >= 2;\n    });\n    return filtered;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Orbital Power Grid",
  "tags" : [ "power", "space" ],
  "victoryPoints" : 1,
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/OrbitalPowerGrid.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all} from '../Options';\n\nexport class OrbitalPowerGrid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.ORBITAL_POWER_GRID,\n      type: CardType.AUTOMATED,\n      tags: [Tag.POWER, Tag.SPACE],\n      cost: 10,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {energy: {cities: {where: 'offmars'}}},\n      },\n\n      metadata: {\n        description: 'Increase your energy production 1 step per city tile NOT ON MARS.',\n        cardNumber: 'M85',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1)).slash().city({all, secondaryTag: Tag.SPACE});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Processor Factory",
  "tags" : [ "moon", "building" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/ProcessorFactory.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\n\nexport class ProcessorFactory extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.PROCESSOR_FACTORY,\n      type: CardType.ACTIVE,\n      tags: [Tag.MOON, Tag.BUILDING],\n      cost: 5,\n\n      action: {\n        spend: {steel: 1},\n        addResourcesToAnyCard: {type: CardResource.DATA, count: 2},\n      },\n\n      resourceType: CardResource.DATA,\n      victoryPoints: {resourcesHere: {}, per: 3},\n\n      metadata: {\n        cardNumber: 'M86',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 steel to add 2 data resources to ANY card.', (eb) => eb.startAction.steel(1).arrow().resource(CardResource.DATA, 2).asterix());\n          b.br;\n          b.vpText('1 VP for every 3 data resources here.');\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Lunar Steel",
  "tags" : [ "moon" ],
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarSteel.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Card} from '../Card';\n\nexport class LunarSteel extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LUNAR_STEEL,\n      type: CardType.ACTIVE,\n      tags: [Tag.MOON],\n      cost: 5,\n\n      behavior: {\n        steelValue: 1,\n      },\n\n      metadata: {\n        cardNumber: 'M87',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Your steel resources are worth 1 Mâ‚¬ extra.', (eb) => {\n            eb.steel(1).startEffect.plus(Size.SMALL).megacredits(1);\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Rust Eating Bacteria",
  "tags" : [ "microbe" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/RustEatingBacteria.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\n\nexport class RustEatingBacteria extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.RUST_EATING_BACTERIA,\n      type: CardType.ACTIVE,\n      tags: [Tag.MICROBE],\n      cost: 4,\n\n      resourceType: CardResource.MICROBE,\n      victoryPoints: {resourcesHere: {}, per: 3},\n\n      action: {\n        spend: {steel: 1},\n        addResources: 2,\n      },\n\n      metadata: {\n        cardNumber: 'M88',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 steel to add 2 microbes here.', (eb) => {\n            eb.startAction.steel(1).arrow().resource(CardResource.MICROBE, 2);\n          }).br;\n          b.vpText('1 VP per 3 microbes here.');\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Solar Panel Foundry",
  "tags" : [ "power", "moon", "building" ],
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/SolarPanelFoundry.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActionCard} from '../ActionCard';\n\nexport class SolarPanelFoundry extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.SOLAR_PANEL_FOUNDRY,\n      type: CardType.ACTIVE,\n      tags: [Tag.POWER, Tag.MOON, Tag.BUILDING],\n      cost: 10,\n\n      action: {\n        spend: {steel: 1},\n        production: {energy: 1},\n      },\n\n      metadata: {\n        cardNumber: 'M89',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 steel to increase your energy production 1 step.',\n            (eb) => eb.startAction.steel(1).arrow().production((pb) => pb.energy(1)));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Moon Tether",
  "tags" : [ "moon", "space" ],
  "cardDiscount" : {
    "amount" : 2
  },
  "victoryPoints" : 1,
  "cost" : 18,
  "type" : "active",
  "requirements" : [ {
    "tag" : "space",
    "count" : 6
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/MoonTether.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class MoonTether extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.MOON_TETHER,\n      type: CardType.ACTIVE,\n      tags: [Tag.MOON, Tag.SPACE],\n      cost: 18,\n      victoryPoints: 1,\n\n      requirements: {tag: Tag.SPACE, count: 6},\n      cardDiscount: {amount: 2},\n      metadata: {\n        cardNumber: 'M90',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play a card, you pay 2 Mâ‚¬ less for it.', (eb) => {\n            eb.empty().startEffect.megacredits(-2);\n          }).br;\n        }),\n        description: 'Requires 6 space tags.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Nanotech Industries",
  "tags" : [ "science", "moon" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Science",
  "startingMegaCredits" : 48,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/NanotechIndustries.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IActionCard} from '../ICard';\nimport {CardResource} from '../../../common/CardResource';\nimport {IPlayer} from '../../IPlayer';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {MoonCards} from '../../moon/MoonCards';\n\nexport class NanotechIndustries extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.NANOTECH_INDUSTRIES,\n      tags: [Tag.SCIENCE, Tag.MOON],\n      startingMegaCredits: 48,\n      resourceType: CardResource.SCIENCE,\n\n      firstAction: {\n        text: 'Draw 4 cards and keep 3.',\n        drawCard: {count: 4, keep: 3},\n      },\n\n      victoryPoints: {resourcesHere: {}, per: 2},\n\n      metadata: {\n        cardNumber: 'MC1',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(42).cards(3).minus().cards(1).br;\n          b.action('Add 1 science resource to ANY card [except those giving 2 or more VP per 1 science resource.]', (eb) => {\n            eb.empty().startAction.resource(CardResource.SCIENCE).asterix();\n          });\n        }),\n        description: 'You start with 42 Mâ‚¬. As your first action, draw 3 cards. Take 2 of them into hand, and discard the rest. ' +\n          '1 VP for every 2 science resources here.',\n      },\n    });\n  }\n\n  public canAct() {\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    player.game.defer(new AddResourcesToCard(\n      player,\n      CardResource.SCIENCE,\n      {filter: (card): boolean => MoonCards.scienceCardsWithLessThan2VP.has(card.name)},\n    ));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Tempest Consultancy",
  "tags" : [ "moon" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 37,
  "compatibility" : [ "turmoil", "moon" ],
  "sourceFile" : "src/server/cards/moon/TempestConsultancy.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {SendDelegateToArea} from '../../deferredActions/SendDelegateToArea';\nimport {IPlayer} from '../../IPlayer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Turmoil} from '../../turmoil/Turmoil';\nimport {digit} from '../Options';\n\nexport class TempestConsultancy extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.TEMPEST_CONSULTANCY,\n      tags: [Tag.MOON],\n      startingMegaCredits: 37,\n\n      firstAction: {\n        text: 'Place 2 delegates in one party',\n        turmoil: {sendDelegates: {count: 2}},\n      },\n\n      metadata: {\n        description: 'You start with 37 Mâ‚¬. As your first action, place 2 delegates in one party.',\n        cardNumber: 'MC2',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(37).delegates(1).delegates(1).br;\n          b.action('Place 1 delegate in any party for every 5 Moon tags you have [max 3.]', (eb) => {\n            eb.empty().startAction.delegates(1).text('(max 3)', Size.SMALL).slash().tag(Tag.MOON, {amount: 5, digit});\n          }).br;\n          b.effect('When your delegate becomes the chairman, increase your TR 1 step.', (eb) => {\n            eb.chairman().startEffect.tr(1);\n          });\n        }),\n      },\n    });\n  }\n\n  public initialAction(player: IPlayer) {\n    const title = 'Tempest Consultancy first action - Select where to send two delegates';\n    player.game.defer(new SendDelegateToArea(player, title, {count: 2}));\n\n    return undefined;\n  }\n\n  public canAct(player: IPlayer) {\n    return player.tags.count(Tag.MOON) >= 5 && Turmoil.getTurmoil(player.game).getAvailableDelegateCount(player) > 0;\n  }\n\n  public action(player: IPlayer) {\n    let count = Math.floor(player.tags.count(Tag.MOON) / 5);\n    count = Math.min(count, 3);\n    count = Math.min(count, Turmoil.getTurmoil(player.game).getAvailableDelegateCount(player));\n    if (count > 0) {\n      player.game.defer(new SendDelegateToArea(\n        player,\n        `Select a party to send ${count} delegate(s) to`,\n        {count: count}));\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "The Darkside of The Moon Syndicate",
  "tags" : [ "moon" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Syndicate Fleet",
  "startingMegaCredits" : 40,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/TheDarksideofTheMoonSyndicate.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {MultiSet} from 'mnemonist';\nimport {Resource} from '../../../common/Resource';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Phase} from '../../../common/Phase';\nimport {all} from '../Options';\nimport {Payment} from '../../../common/inputs/Payment';\n\nexport class TheDarksideofTheMoonSyndicate extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.THE_DARKSIDE_OF_THE_MOON_SYNDICATE,\n      tags: [Tag.MOON],\n      startingMegaCredits: 40,\n      resourceType: CardResource.SYNDICATE_FLEET,\n\n      behavior: {\n        addResources: 2,\n      },\n\n      metadata: {\n        cardNumber: 'MC3',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(40).resource(CardResource.SYNDICATE_FLEET, 2).br;\n          b.text('You start with 40 Mâ‚¬ and 2 syndicate fleets on this card.', Size.SMALL, false, false).br;\n          b.titanium(1).arrow(Size.SMALL).resource(CardResource.SYNDICATE_FLEET)\n            .slash(Size.SMALL)\n            .resource(CardResource.SYNDICATE_FLEET).arrow(Size.SMALL).text('steal', Size.TINY).megacredits(2, {all}).asterix().br;\n          b.text('Action: Spend 1 titanium to add 1 syndicate fleet on this card OR ' +\n                'remove 1 syndicate fleet from this card to steal 2Mâ‚¬ from every opponent.', Size.TINY, false, false).br;\n          b.effect('When you place a tile on The Moon, steal 2 Mâ‚¬ from opponents for each of their tiles next to yours.', (eb) => {\n            eb.emptyTile('normal', {size: Size.SMALL, secondaryTag: Tag.MOON})\n              .startEffect\n              .text('STEAL').megacredits(2, {all}).slash().emptyTile('normal', {size: Size.SMALL}).emptyTile('normal', {size: Size.SMALL, all});\n          });\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.titanium > 0 || this.resourceCount > 0;\n  }\n\n  public action(player: IPlayer) {\n    const orOptions = new OrOptions();\n    if (player.titanium > 0) {\n      orOptions.options.push(new SelectOption('Spend 1 titanium to add 1 syndicate fleet on this card', 'Add syndicate fleet').andThen(() => {\n        player.pay(Payment.of({titanium: 1}));\n        player.addResourceTo(this, {qty: 1, log: true});\n        return undefined;\n      }));\n    }\n    if (this.resourceCount > 0) {\n      orOptions.options.push(new SelectOption('Remove 1 syndicate fleet from this card to steal 2Mâ‚¬ from every opponent.', 'Remove syndicate fleet').andThen(() => {\n        player.removeResourceFrom(this);\n        for (const target of player.getOpponents()) {\n          target.maybeBlockAttack(player, (proceed) => {\n            if (proceed) {\n              target.stock.steal(Resource.MEGACREDITS, 2, player);\n            }\n            return undefined;\n          });\n        }\n        return undefined;\n      }));\n    }\n\n    if (orOptions.options.length === 1) {\n      return orOptions.options[0].cb();\n    }\n    return orOptions;\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    if (activePlayer.game.phase === Phase.SOLAR) {\n      return;\n    }\n    if (activePlayer !== cardOwner) {\n      return undefined;\n    }\n    // Unlikely, but the compiler now thinks space.tile is defined.\n    if (space.tile === undefined) {\n      return undefined;\n    }\n    const game = activePlayer.game;\n    if (MoonExpansion.MOON_TILES.has(space.tile.tileType)) {\n      const costs = new MultiSet<IPlayer>();\n      MoonExpansion.moonData(game).moon.getAdjacentSpaces(space).forEach((space) => {\n        if (space.tile !== undefined && space.player !== undefined && space.player !== activePlayer) {\n          costs.add(space.player, 2);\n        }\n      });\n      costs.forEachMultiplicity((qty, target) => {\n        // TODO(kberg): Create a Game.steal method that manages this, both here\n        // and in StealResources.\n        const adjustedQuantity = Math.min(qty, target.megaCredits);\n        activePlayer.stock.add(Resource.MEGACREDITS, adjustedQuantity, {log: true});\n        target.stock.deduct(Resource.MEGACREDITS, adjustedQuantity, {log: true, from: activePlayer});\n      });\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Hyperloop Corporation",
  "tags" : [ "moon", "building" ],
  "victoryPoints" : {
    "moon" : {
      "road" : { }
    },
    "all" : true
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 38,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/LunaHyperloopCorporation.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {all} from '../Options';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActiveCorporationCard} from '../corporation/CorporationCard';\n\nexport class LunaHyperloopCorporation extends ActiveCorporationCard {\n  constructor() {\n    super({\n      name: CardName.LUNA_HYPERLOOP_CORPORATION,\n      tags: [Tag.MOON, Tag.BUILDING],\n      startingMegaCredits: 38,\n\n      behavior: {\n        stock: {steel: 5},\n      },\n\n      action: {\n        stock: {megacredits: {moon: {road: {}}, all}},\n      },\n\n      victoryPoints: {moon: {road: {}}, all},\n\n      metadata: {\n        description: 'You start with 38 Mâ‚¬ and 5 steel.',\n        cardNumber: 'MC4',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(38).steel(5).br;\n          b.action('Gain 1 Mâ‚¬ for each road tile on The Moon.', (eb) => {\n            eb.empty().startAction.megacredits(1).slash().moonRoad({all});\n          }).br,\n          b.vpText('1 VP for each road tile on The Moon.').br;\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Crescent Research Association",
  "tags" : [ "science", "moon", "moon" ],
  "victoryPoints" : {
    "tag" : "moon",
    "per" : 3
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 48,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/CrescentResearchAssociation.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class CrescentResearchAssociation extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.CRESCENT_RESEARCH_ASSOCIATION,\n      tags: [Tag.SCIENCE, Tag.MOON, Tag.MOON],\n      startingMegaCredits: 48,\n\n      victoryPoints: {tag: Tag.MOON, per: 3},\n\n      metadata: {\n        description: 'You start with 50 Mâ‚¬. 1 VP for every 3 Moon tags you have.',\n        cardNumber: 'MC5',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(50).br;\n          b.effect('When you play a Moon tag, you pay 1 Mâ‚¬ less for each 2 Moon tags you have.', (eb) => {\n            eb.tag(Tag.MOON).startEffect.megacredits(1).slash().tag(Tag.MOON).tag(Tag.MOON);\n          });\n        }),\n      },\n    });\n  }\n\n  public override getCardDiscount(player: IPlayer, card: IProjectCard) {\n    if (card.tags.indexOf(Tag.MOON) === -1) {\n      return 0;\n    }\n    if (player.tags.count(Tag.MOON) % 2 === 0) {\n      return player.tags.count(Tag.MOON)/2;\n    } else {\n      return (player.tags.count(Tag.MOON)-1)/2;\n    }\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna First Incorporated",
  "tags" : [ "moon", "space", "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 40,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/LunaFirstIncorporated.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\nexport class LunaFirstIncorporated extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.LUNA_FIRST_INCORPORATED,\n      tags: [Tag.MOON, Tag.SPACE, Tag.BUILDING],\n      startingMegaCredits: 40,\n\n      behavior: {\n        // stock: {steel: 2, titanium: 2},\n        stock: {steel: 1, titanium: 1},\n      },\n\n      metadata: {\n        // description: 'You start with 40 Mâ‚¬, 2 steel, and 2 titanium.',\n        description: 'You start with 40 Mâ‚¬, 1 steel, and 1 titanium.',\n        cardNumber: 'MC6',\n        renderData: CardRenderer.builder((b) => {\n          // b.megacredits(40).steel(2).titanium(2).br;\n          b.megacredits(40).steel(1).titanium(1).br;\n          b.effect('When you raise any Moon Rate, increase your Mâ‚¬ production 1 step per step.', (eb) => {\n            eb.moonHabitatRate({size: Size.SMALL}).slash()\n              .moonMiningRate({size: Size.SMALL}).slash()\n              .moonLogisticsRate({size: Size.SMALL})\n              .startEffect.production((pb) => pb.megacredits(1));\n          }).br,\n          b.effect('When any player raises any Moon Rate, gain 1Mâ‚¬ per step.', (eb) => {\n            eb.moonHabitatRate({size: Size.SMALL, all}).slash()\n              .moonMiningRate({size: Size.SMALL, all}).slash()\n              .moonLogisticsRate({size: Size.SMALL, all})\n              .startEffect.megacredits(1);\n          }).br;\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    MoonExpansion.moonData(player.game).lunaFirstPlayer = player;\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "The Grand Luna Capital Group",
  "tags" : [ "city", "moon" ],
  "victoryPoints" : "special",
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 38,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/TheGrandLunaCapitalGroup.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {TileType} from '../../../common/TileType';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {Space} from '../../boards/Space';\nimport {SpaceId} from '../../../common/Types';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderDynamicVictoryPoints} from '../render/CardRenderDynamicVictoryPoints';\nimport {Size} from '../../../common/cards/render/Size';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\nimport {all} from '../Options';\n\nexport class TheGrandLunaCapitalGroup extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.THE_GRAND_LUNA_CAPITAL_GROUP,\n      tags: [Tag.CITY, Tag.MOON],\n      startingMegaCredits: 38,\n      victoryPoints: 'special',\n\n      behavior: {\n        stock: {titanium: 2},\n      },\n\n      firstAction: {\n        text: 'Place a habitat tile',\n        moon: {habitatTile: {}},\n      },\n\n      metadata: {\n        description: {\n          text: 'You start with 38 Mâ‚¬ and 2 titanium. As your first action, place a habitat tile on The Moon and raise the habitat rate 1 step.',\n          align: 'left',\n        },\n        cardNumber: 'MC7',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(38).titanium(2).moonHabitat({secondaryTag: AltSecondaryTag.MOON_HABITAT_RATE}).br;\n          b.effect('When you place a habitat tile, gain 3 Mâ‚¬ for each adjacent habitat tile.', (eb) => {\n            eb.moonHabitat({size: Size.SMALL, all}).moonHabitat({size: Size.SMALL}).asterix()\n              .startEffect\n              .megacredits(3).slash().moonHabitat({size: Size.SMALL, all});\n          }).br,\n          b.vpText('1 VP for each habitat tile adjacent to your habitat tiles.').br;\n        }),\n        victoryPoints: CardRenderDynamicVictoryPoints.moonHabitatTile(1),\n      },\n    });\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    if (cardOwner.id !== activePlayer.id) {\n      return;\n    }\n    if (!MoonExpansion.spaceHasType(space, TileType.MOON_HABITAT)) {\n      return;\n    }\n    const adjacentSpaces = MoonExpansion.moonData(cardOwner.game).moon.getAdjacentSpaces(space);\n    const filtered = adjacentSpaces.filter((space) => MoonExpansion.spaceHasType(space, TileType.MOON_HABITAT));\n    cardOwner.stock.add(Resource.MEGACREDITS, filtered.length * 3, {log: true});\n  }\n\n  public override getVictoryPoints(player: IPlayer) {\n    const moon = MoonExpansion.moonData(player.game).moon;\n    const neighboringColonyTiles: Set<SpaceId> = new Set();\n    const colonyTiles = MoonExpansion.spaces(player.game, TileType.MOON_HABITAT, {ownedBy: player});\n    colonyTiles.forEach((tile) =>\n      moon.getAdjacentSpaces(tile).forEach((neighbor) => {\n        if (MoonExpansion.spaceHasType(neighbor, TileType.MOON_HABITAT)) {\n          neighboringColonyTiles.add(neighbor.id);\n        }\n      }),\n    );\n\n    return neighboringColonyTiles.size;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Intragen Sanctuary Headquarters",
  "tags" : [ "animal", "moon" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Animal",
  "startingMegaCredits" : 42,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/IntragenSanctuaryHeadquarters.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ICorporationCard} from '../corporation/ICorporationCard';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {all} from '../Options';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\nimport {ICard} from '../ICard';\n\nexport class IntragenSanctuaryHeadquarters extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.INTRAGEN_SANCTUARY_HEADQUARTERS,\n      tags: [Tag.ANIMAL, Tag.MOON],\n      startingMegaCredits: 42,\n      resourceType: CardResource.ANIMAL,\n      victoryPoints: {resourcesHere: {}, per: 2},\n\n      behavior: {\n        // Gains the initial resource from its own tag.\n        addResources: 1,\n      },\n\n      firstAction: {\n        text: 'Place a habitat tile on The Moon. Draw cards with 3 an animal tag.',\n        moon: {habitatTile: {}},\n        drawCard: {count: 3, tag: Tag.ANIMAL},\n      },\n\n      metadata: {\n        description: 'You start with 38 Mâ‚¬. ' +\n        'As your first action, place a habitat tile on The Moon and raise the habitat rate 1 step, then you draw 3 cards with an animal tag. 1 VP for every 2 animals on this card.',\n        cardNumber: 'MC8',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(38).moonHabitat({secondaryTag: AltSecondaryTag.MOON_HABITAT_RATE}).br;\n          b.cards(3),\n          b.effect('When any player plays an animal tag (including this), add 1 animal on this card.', (eb) => {\n            eb.tag(Tag.ANIMAL, {all}).startEffect.resource(CardResource.ANIMAL);\n          }).br;\n        }),\n      },\n    });\n  }\n\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard) {\n    this.onCardPlayed(player, card);\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard) {\n    const count = player.tags.cardTagCount(card, Tag.ANIMAL);\n    player.addResourceTo(this, {qty: count, log: true});\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Luna Trade Federation",
  "tags" : [ "moon", "space" ],
  "victoryPoints" : 1,
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 15,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/LunaTradeFederation.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {TileType} from '../../../common/TileType';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {Space} from '../../boards/Space';\nimport {Resource} from '../../../common/Resource';\nimport {Size} from '../../../common/cards/render/Size';\n// import {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n// import {all, multiplier} from '../Options';\n\nexport class LunaTradeFederation extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.LUNA_TRADE_FEDERATION,\n      tags: [Tag.MOON, Tag.SPACE],\n      startingMegaCredits: 15,\n      victoryPoints: 1,\n\n      behavior: {\n        stock: {titanium: 15},\n      },\n      // firstAction: {\n      //   text: 'Place a mine tile on The Moon.',\n      //   moon: {mineTile: {}},\n      // },\n\n      metadata: {\n        // description: 'You start with 15 Mâ‚¬ and 15 titanium. As your first action, place a mine tile on The Moon and raise the mining rate 1 step.',\n        description: 'You start with 15 Mâ‚¬ and 15 titanium.',\n        cardNumber: 'MC9',\n        renderData: CardRenderer.builder((b) => {\n          // b.megacredits(15).titanium(10).moonMine({secondaryTag: AltSecondaryTag.MOON_MINING_RATE}).br;\n          b.megacredits(15).titanium(15).br;\n          // b.effect('When any mine tile is placed on The Moon, raise your titanium production 1 step.', (eb) => {\n          //   eb.moonMine({size: Size.SMALL, all}).startEffect.production((pb) => pb.titanium(1)).nbsp;\n          // });\n          b.effect('When you place a mine tile on The Moon, raise your titanium production 1 step.', (eb) => {\n            eb.moonMine({size: Size.SMALL}).startEffect.production((pb) => pb.titanium(1)).nbsp;\n          });\n          b.br;\n          b.effect('You may use titanium resources as 2Mâ‚¬ each.', (eb) => {\n            eb.startEffect.text('X').titanium(1).equals().megacredits(1, {text: '2x'});\n          });\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.canUseTitaniumAsMegacredits = true;\n    return undefined;\n  }\n\n  // public onTilePlaced(cardOwner: IPlayer, _activePlayer: IPlayer, , space: Space) {\n  //   if (MoonExpansion.spaceHasType(space, TileType.MOON_MINE)) {\n  //     cardOwner.production.add(Resources.TITANIUM, 1, {log: true});\n  //   }\n  // }\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    if (activePlayer === cardOwner && MoonExpansion.spaceHasType(space, TileType.MOON_MINE)) {\n      cardOwner.production.add(Resource.TITANIUM, 1, {log: true});\n    }\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "The Archaic Foundation Institute",
  "tags" : [ "moon", "moon" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Resource cube",
  "startingMegaCredits" : 55,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/TheArchaicFoundationInstitute.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ICard} from '../ICard';\nimport {Size} from '../../../common/cards/render/Size';\nimport {digit} from '../Options';\nimport {LogHelper} from '../../LogHelper';\n\nexport class TheArchaicFoundationInstitute extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.THE_ARCHAIC_FOUNDATION_INSTITUTE,\n      tags: [Tag.MOON, Tag.MOON],\n      startingMegaCredits: 55,\n      resourceType: CardResource.RESOURCE_CUBE,\n\n      behavior: {\n        addResources: 2,\n      },\n\n      metadata: {\n        hasExternalHelp: true,\n        cardNumber: 'MC10',\n        description: 'You start with 55 Mâ‚¬.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(55).nbsp;\n          b.effect('When you play a Moon tag, including these, add a cube to this card.', (eb) => {\n            eb.tag(Tag.MOON).startEffect.resource(CardResource.RESOURCE_CUBE);\n          }).br;\n          b.effect('Automatically remove 3 cubes here and gain 1 TR.', (eb) => {\n            eb.resource(CardResource.RESOURCE_CUBE, {amount: 3, digit}).startEffect.tr(1, {size: Size.TINY});\n          }).br;\n          b.action('Remove 3 cubes here; gain 1 TR.', (ab) => {\n            ab.resource(CardResource.RESOURCE_CUBE, {amount: 3, digit}).startAction.tr(1, {size: Size.TINY});\n          });\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard): void {\n    if (player.isCorporation(this.name)) {\n      const moonTags = card.tags.filter((t) => t === Tag.MOON);\n      const count = moonTags.length;\n      if (count > 0) {\n        player.addResourceTo(this, {qty: count, log: true});\n      }\n    }\n  }\n\n  public canAct(player: IPlayer) {\n    return (this.resourceCount >= 3 && player.canAfford({cost: 0, tr: {tr: 1}}));\n  }\n\n  // The only reason Archaic Foundation Institute has an action is if Reds is\n  // in effect when the player gains the Moon tag. Ideally, this is always\n  // automatically resolved, even at strange times, even produciton.\n  //\n  public action(player: IPlayer) {\n    // How should this interact in a Merger with UNMO?\n    let tr = Math.floor(this.resourceCount / 3);\n    while (!player.canAfford({cost: 0, tr: {tr: tr}})) {\n      tr--;\n    }\n    player.removeResourceFrom(this, tr * 3);\n    player.increaseTerraformRating(tr);\n    LogHelper.logRemoveResource(player, this, tr * 3, `Gain ${tr} TR`);\n  }\n\n  public onResourceAdded(player: IPlayer, playedCard: ICard): void {\n    if (playedCard.name !== this.name) return;\n    if (this.canAct(player)) {\n      this.action(player);\n    }\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "First Lunar Settlement",
  "tags" : [ "city", "moon" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/FirstLunarSettlement.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IProjectCard} from '../IProjectCard';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class FirstLunarSettlement extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.FIRST_LUNAR_SETTLEMENT,\n      tags: [Tag.CITY, Tag.MOON],\n\n      behavior: {\n        production: {megacredits: 1},\n        moon: {habitatTile: {}},\n      },\n\n      metadata: {\n        description: 'Place a habitat tile on The Moon and raise the habitat rate 1 step. Increase your Mâ‚¬ production 1 step.',\n        cardNumber: 'MP1',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1)).moonHabitat({secondaryTag: AltSecondaryTag.MOON_HABITAT_RATE});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Core Mine",
  "tags" : [ "moon" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/CoreMine.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IProjectCard} from '../IProjectCard';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class CoreMine extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.CORE_MINE,\n      tags: [Tag.MOON],\n\n      behavior: {\n        production: {titanium: 1},\n        moon: {mineTile: {}},\n      },\n\n      metadata: {\n        description: 'Place a mine tile on The Moon and raise the mining rate 1 step. Increase your titanium production 1 step.',\n        cardNumber: 'MP2',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.titanium(1)).moonMine({secondaryTag: AltSecondaryTag.MOON_MINING_RATE});\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Basic Infrastructure",
  "tags" : [ "moon" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "moon", "colonies" ],
  "sourceFile" : "src/server/cards/moon/BasicInfrastructure.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {TileType} from '../../../common/TileType';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class BasicInfrastructure extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.BASIC_INFRASTRUCTURE,\n      tags: [Tag.MOON],\n\n      behavior: {\n        moon: {roadTile: {}},\n        colonies: {addTradeFleet: 1},\n      },\n\n      metadata: {\n        description: 'Place a road tile on The Moon and raise the Logistics Rate 1 step. Gain 1 trade fleet.',\n        cardNumber: 'MP3',\n        renderData: CardRenderer.builder((b) => {\n          b.tile(TileType.MOON_ROAD, false).tradeFleet();\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Lunar Planning Office",
  "tags" : [ "moon", "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/LunarPlanningOffice.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class LunarPlanningOffice extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LUNAR_PlANNING_OFFICE,\n      tags: [Tag.MOON, Tag.BUILDING],\n\n      behavior: {\n        stock: {steel: 6},\n        drawCard: {tag: Tag.MOON, count: 2},\n      },\n\n      metadata: {\n        description: 'Draw 2 cards with a Moon tag. Gain 6 steel.',\n        cardNumber: 'MP4',\n        renderData: CardRenderer.builder((b) => {\n          b.cards(2, {secondaryTag: Tag.MOON}).br.steel(6);\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Mining Complex",
  "tags" : [ "moon" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : -7,
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/moon/MiningComplex.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {Tag} from '../../../common/cards/Tag';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PlaceMoonMineTile} from '../../moon/PlaceMoonMineTile';\nimport {IPlayer} from '../../IPlayer';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\nimport {PlaceMoonRoadTile} from '../../moon/PlaceMoonRoadTile';\nimport {SpaceType} from '../../../common/boards/SpaceType';\nimport {Resource} from '../../../common/Resource';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\nimport {TileType} from '../../../common/TileType';\n\nexport class MiningComplex extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.MINING_COMPLEX,\n      tags: [Tag.MOON],\n      startingMegacredits: -7,\n      tilesBuilt: [TileType.MOON_MINE, TileType.MOON_ROAD],\n\n      metadata: {\n        description: 'Place a mine tile on The Moon and raise the mining rate 1 step. ' +\n        'Place a road tile adjacent to placed mine tile and raise the Logistics Rate 1 step. ' +\n        'Pay 7 Mâ‚¬.',\n        cardNumber: 'MP5',\n        renderData: CardRenderer.builder((b) =>\n          b.moonMine({secondaryTag: AltSecondaryTag.MOON_MINING_RATE}).moonRoad({secondaryTag: AltSecondaryTag.MOON_LOGISTICS_RATE}).asterix().br.minus().megacredits(7),\n        ),\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return player.canAfford(7);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlaceMoonMineTile(player))\n      .andThen((space) => {\n        const moon = MoonExpansion.moonData(player.game).moon;\n        const spaces = moon.getAdjacentSpaces(space);\n        const availableRoadSpaces = spaces.filter((space) => {\n          return space.player === undefined && space.spaceType === SpaceType.LAND;\n        });\n        player.game.defer(\n          new PlaceMoonRoadTile(\n            player,\n            availableRoadSpaces,\n            'Select a space next to the mine for a road',\n          ));\n      });\n    player.stock.deduct(Resource.MEGACREDITS, 7);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "moon",
  "name" : "Lunar Habitat",
  "tags" : [ ],
  "cost" : 22,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarHabitat.ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Lunar Habitat (var. 1)",
  "tags" : [ ],
  "cost" : 23,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarHabitat(var.1).ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Lunar Habitat (var. 2)",
  "tags" : [ ],
  "cost" : 26,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarHabitat(var.2).ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Lunar Mine",
  "tags" : [ ],
  "cost" : 20,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarMine.ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Lunar Mine (var. 1)",
  "tags" : [ ],
  "cost" : 21,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarMine(var.1).ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Lunar Mine (var. 2)",
  "tags" : [ ],
  "cost" : 23,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/LunarMine(var.2).ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Road Infrastructure",
  "tags" : [ ],
  "cost" : 18,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/RoadInfrastructure.ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Road Infrastructure (var. 1)",
  "tags" : [ ],
  "cost" : 19,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/RoadInfrastructure(var.1).ts",
  "sourceCode" : ""
}, {
  "module" : "moon",
  "name" : "Road Infrastructure (var. 2)",
  "tags" : [ ],
  "cost" : 21,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/moon/RoadInfrastructure(var.2).ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Breeding Farms",
  "tags" : [ "science", "animal", "building" ],
  "cost" : 13,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science"
  }, {
    "tag" : "animal"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/BreedingFarms.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class BreedingFarms extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.BREEDING_FARMS,\n      cost: 13,\n      tags: [Tag.SCIENCE, Tag.ANIMAL, Tag.BUILDING],\n\n      behavior: {\n        global: {temperature: 1},\n      },\n\n      action: {\n        spend: {plants: 1},\n        addResourcesToAnyCard: {count: 1, type: CardResource.ANIMAL, mustHaveCard: true},\n      },\n\n      requirements: [{tag: Tag.SCIENCE}, {tag: Tag.ANIMAL}],\n      metadata: {\n        cardNumber: 'Pf01',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 plant to add 1 animal to ANY card.', (eb) => {\n            eb.plants(1).startAction.resource(CardResource.ANIMAL);\n          });\n          b.br;\n          b.temperature(1);\n        }),\n        description: 'Requires 1 science tag and 1 animal tag. Raise the temperature 1 step.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Prefabrication of Human Habitats",
  "tags" : [ "building", "city" ],
  "cardDiscount" : {
    "tag" : "city",
    "amount" : 2
  },
  "cost" : 6,
  "type" : "active",
  "requirements" : [ {
    "production" : "steel",
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/PrefabricationofHumanHabitats.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class PrefabricationofHumanHabitats extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.PREFABRICATION_OF_HUMAN_HABITATS,\n      cost: 6,\n      tags: [Tag.BUILDING, Tag.CITY],\n\n      requirements: {production: Resource.STEEL, count: 1},\n      cardDiscount: {tag: Tag.CITY, amount: 2},\n\n      metadata: {\n        cardNumber: 'Pf02',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Cards with a city tag cost 2Mâ‚¬ less.', (eb) => {\n            eb.tag(Tag.CITY, {size: Size.MEDIUM}).startEffect.megacredits(-2);\n          });\n          b.br;\n          b.effect('The CITY STANDARD PROJECT costs 2Mâ‚¬ less. STEEL MAY BE USED as if you were playing a building card.', (eb) => {\n            eb.city().asterix().startEffect.megacredits(23).super((b) => b.steel(1));\n          });\n        }),\n        description: 'Requires that you have steel production.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "New Venice",
  "tags" : [ "mars", "power", "building", "city" ],
  "cost" : 21,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/NewVenice.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {TileType} from '../../../common/TileType';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class NewVenice extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.NEW_VENICE,\n      tags: [Tag.MARS, Tag.POWER, Tag.BUILDING, Tag.CITY],\n      cost: 21,\n\n      behavior: {\n        production: {energy: 1, megacredits: 2},\n        tile: {\n          type: TileType.OCEAN_CITY,\n          on: 'upgradeable-ocean',\n        },\n      },\n      reserveUnits: {plants: 2},\n      requirements: {oceans: 3},\n\n      metadata: {\n        cardNumber: 'Pf3',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().plants(2).br;\n          b.production((pb) => {\n            pb.energy(1).megacredits(2);\n          }).nbsp.tile(TileType.OCEAN_CITY, false, true);\n        }),\n        description: 'Requires 3 ocean tiles. Lose 2 plants. Increase your energy production 1 step and your Mâ‚¬ production 2 steps. ' +\n            'Place this tile on top of an existing ocean tile, IGNORING NORMAL PLACEMENT RESTRICTIONS FOR CITIES. The tile counts as a city as well as an ocean.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Agro-Drones",
  "tags" : [ "plant", "mars" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 8,
  "type" : "active",
  "requirements" : [ {
    "temperature" : -18,
    "count" : -18
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Agro-Drones.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Wetlands",
  "tags" : [ "plant", "mars" ],
  "victoryPoints" : 2,
  "cost" : 22,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Wetlands.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {Space} from '../../boards/Space';\nimport {CanAffordOptions, IPlayer} from '../../IPlayer';\nimport {TileType} from '../../../common/TileType';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Board} from '../../boards/Board';\nimport {Size} from '../../../common/cards/render/Size';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class Wetlands extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.WETLANDS,\n      tags: [Tag.PLANT, Tag.MARS],\n      cost: 22,\n      tr: {oxygen: 1, tr: 1},\n      requirements: {oceans: 2},\n      reserveUnits: {plants: 4},\n      victoryPoints: 2,\n\n      metadata: {\n        cardNumber: 'Pf03',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().plants(4).br;\n          b.tile(TileType.WETLANDS, false, false).asterix();\n          b.oxygen(1).tr(1);\n          b.br;\n          b.text('(Requires 2 ocean tiles. Lose 4 plants. Place this tile on an UNRESERVED SPACE ' +\n            'ADJACENT TO AT LEAST 2 OCEANS. Raise oxygen 1 step. Gain 1 TR.)', Size.TINY, false, false);\n          b.br;\n          b.text('(Effect: Wetlands counts as a greenery tile and an ocean tile, except it can\\'t be covered and is not one of the 9 oceans required to end the game.)', Size.TINY, false, false);\n        }),\n      },\n    });\n  }\n\n  public availableSpaces(player: IPlayer, canAffordOptions?: CanAffordOptions) {\n    const board = player.game.board;\n    const adjacentOceans: (space: Space) => number = (space) => {\n      const adjacentSpaces = board.getAdjacentSpaces(space);\n      return adjacentSpaces.filter(Board.isOceanSpace).length;\n    };\n\n    const redCity = board.getSpaceByTileCard(CardName.RED_CITY);\n    const spacesNextToRedCity = redCity ?\n      board.getAdjacentSpaces(redCity) :\n      [];\n    return board.getAvailableSpacesOnLand(player, canAffordOptions)\n      .filter((space) => adjacentOceans(space) >= 2)\n      .filter((space) => !spacesNextToRedCity.includes(space));\n  }\n\n  public override bespokeCanPlay(player: IPlayer, canAffordOptions: CanAffordOptions) {\n    return this.availableSpaces(player, canAffordOptions).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    return new SelectSpace(\n      message('Select space for ${0}', (b) => b.card(this)),\n      this.availableSpaces(player))\n      .andThen((space) => {\n        const tile = {\n          tileType: TileType.WETLANDS,\n          card: this.name,\n          covers: space.tile,\n        };\n        player.game.addTile(player, space, tile);\n        player.game.increaseOxygenLevel(player, 1);\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Rare-Earth Elements",
  "tags" : [ "earth", "mars" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Rare-EarthElements.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Orbital Laboratories",
  "tags" : [ "science", "plant", "space" ],
  "cost" : 17,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/OrbitalLaboratories.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class OrbitalLaboratories extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ORBITAL_LABORATORIES,\n      cost: 17,\n      tags: [Tag.SCIENCE, Tag.PLANT, Tag.SPACE],\n\n      behavior: {\n        production: {plants: 2},\n        stock: {plants: 1},\n      },\n\n      metadata: {\n        cardNumber: 'Pf07',\n        renderData: CardRenderer.builder((b) => {\n          b.production(((pb) => pb.plants(2))).nbsp.plants(1);\n        }),\n        description: 'Increase your plant production 2 steps. Gain 1 plant.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Dust Storm",
  "tags" : [ "mars" ],
  "cost" : 16,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/DustStorm.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {all} from '../Options';\n\nexport class DustStorm extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.DUST_STORM,\n      cost: 16,\n      tags: [Tag.MARS],\n\n      behavior: {\n        global: {temperature: 2},\n      },\n\n      metadata: {\n        cardNumber: 'Pf08',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().energy(1, {all}).asterix();\n          b.br;\n          b.temperature(2);\n        }),\n        description: 'Every player loses all energy. Raise the temperature 2 steps.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.getPlayers().forEach((target) => {\n      target.maybeBlockAttack(player, (proceed) => {\n        if (proceed) {\n          target.stock.deduct(Resource.ENERGY, target.energy, {log: true});\n        }\n        return undefined;\n      });\n    });\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Martian Monuments",
  "tags" : [ "mars", "building" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ {
    "cities" : 1,
    "text" : "ON MARS",
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/MartianMonuments.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Board} from '../../boards/Board';\nimport {SpaceType} from '../../../common/boards/SpaceType';\n\nexport class MartianMonuments extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.MARTIAN_MONUMENTS,\n      cost: 10,\n      tags: [Tag.MARS, Tag.BUILDING],\n      requirements: {cities: 1, text: 'ON MARS'},\n\n      behavior: {\n        production: {megacredits: {tag: Tag.MARS}},\n      },\n\n      metadata: {\n        cardNumber: 'Pf09',\n        renderData: CardRenderer.builder((b) => {\n          b.production(((pb) => pb.megacredits(1))).slash().tag(Tag.MARS);\n        }),\n        description: 'Requires that you own a city ON MARS. Raise your Mâ‚¬ production 1 step for every Mars tag you own (including this.)',\n      },\n    });\n  }\n\n  // Is this necessary?\n  public override bespokeCanPlay(player: IPlayer) {\n    return player.game.board.spaces.some((space) => {\n      return Board.isCitySpace(space) && space.player?.id === player.id && space.spaceType !== SpaceType.COLONY;\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Martian Nature Wonders",
  "tags" : [ "mars" ],
  "victoryPoints" : 2,
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/MartianNatureWonders.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CanAffordOptions, IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {CardResource} from '../../../common/CardResource';\nimport {TileType} from '../../../common/TileType';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class MartianNatureWonders extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.MARTIAN_NATURE_WONDERS,\n      cost: 13,\n      tags: [Tag.MARS],\n      victoryPoints: 2,\n\n      behavior: {\n        addResourcesToAnyCard: {type: CardResource.DATA, count: 4},\n      },\n\n      metadata: {\n        cardNumber: 'Pf10',\n        renderData: CardRenderer.builder((b) => {\n          b.resource(CardResource.RESOURCE_CUBE).asterix().br;\n          b.resource(CardResource.DATA, 4).asterix();\n        }),\n        description: 'Place a neutral player cube on a non-reserved space. No tile can be placed on that space this game. ' +\n        'Gather any bonus on that space, but no bonuses from adjacent spaces. Add 4 data to ANY card.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer, canAffordOptions: CanAffordOptions) {\n    return player.game.board.getAvailableSpacesOnLand(player, canAffordOptions).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    return new SelectSpace(\n      message('Select space for ${0}', (b) => b.card(this)),\n      player.game.board.getAvailableSpacesOnLand(player))\n      .andThen((space) => {\n        player.game.simpleAddTile(player, space, {tileType: TileType.MARTIAN_NATURE_WONDERS});\n        player.game.grantSpaceBonuses(player, space);\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Museum of Early Colonisation",
  "tags" : [ "building", "mars" ],
  "cost" : 21,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 1,
    "count" : 1
  }, {
    "cities" : 1,
    "all" : true,
    "count" : 1
  }, {
    "greeneries" : 1,
    "all" : true,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/MuseumofEarlyColonisation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {all} from '../Options';\n\nexport class MuseumofEarlyColonisation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.MUSEUM_OF_EARLY_COLONISATION,\n      cost: 21,\n      tags: [Tag.BUILDING, Tag.MARS],\n      requirements: [{oceans: 1}, {cities: 1, all}, {greeneries: 1, all}],\n\n      behavior: {\n        production: {energy: -1, steel: 1, titanium: 1, plants: 1, megacredits: 1},\n        tr: 1,\n      },\n\n      metadata: {\n        cardNumber: 'Pf11',\n        renderData: CardRenderer.builder((b) => {\n          b.production(((pb) => pb.minus().energy(1).nbsp.steel(1).titanium(1).plants(1).megacredits(1)));\n          b.br.tr(1);\n        }),\n        description: 'Requires 1 ocean, 1 city and one greenery on Mars. ' +\n         'Decrease your energy production 1 step. Raise your steel, titanium, plant and megacredits production 1 step. ' +\n         'Gain 1 TR.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Terraforming Control Station",
  "tags" : [ "venus", "mars", "space" ],
  "cardDiscount" : [ {
    "tag" : "venus",
    "amount" : 2
  }, {
    "tag" : "mars",
    "amount" : 2
  } ],
  "cost" : 18,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/pathfinders/TerraformingControlStation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class TerraformingControlStation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.TERRAFORMING_CONTROL_STATION,\n      cost: 18,\n      tags: [Tag.VENUS, Tag.MARS, Tag.SPACE],\n\n      behavior: {\n        tr: 2,\n      },\n\n      cardDiscount: [{tag: Tag.VENUS, amount: 2}, {tag: Tag.MARS, amount: 2}],\n      metadata: {\n        cardNumber: 'Pf12',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play a Venus or Mars tag, pay 2 Mâ‚¬ less.', (eb) => {\n            eb.tag(Tag.VENUS).slash().tag(Tag.MARS).startEffect.megacredits(-2);\n          });\n          b.br.tr(2);\n        }),\n        description: 'Raise your TR 2 steps.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Ceres Spaceport",
  "tags" : [ "jovian", "jovian", "city", "space" ],
  "victoryPoints" : 1,
  "cost" : 36,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/CeresSpaceport.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {SpaceName} from '../../SpaceName';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class CeresSpaceport extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.CERES_SPACEPORT,\n      tags: [Tag.JOVIAN, Tag.JOVIAN, Tag.CITY, Tag.SPACE],\n      cost: 36,\n      victoryPoints: 1,\n\n      behavior: {\n        drawCard: 1,\n        ocean: {},\n        city: {space: SpaceName.CERES_SPACEPORT},\n        production: {megacredits: 2, titanium: {tag: Tag.JOVIAN, per: 2}},\n      },\n\n      metadata: {\n        cardNumber: 'Pf14',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(2))\n            .production((pb) => pb.titanium(1).slash().tag(Tag.JOVIAN, 2))\n            .br\n            .cards(1).oceans(1).city().asterix().br;\n        }),\n        description: 'Increase your Mâ‚¬ production 2 steps, and titanium production 1 step for every 2 Jovian tags (including these.) ' +\n          'Draw a card. Place an ocean tile. Place a city tile ON THE RESERVED AREA.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Dyson Screens",
  "tags" : [ "science", "venus", "power", "space" ],
  "victoryPoints" : 1,
  "cost" : 22,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/DysonScreens.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Size} from '../../../common/cards/render/Size';\nimport {SpaceName} from '../../SpaceName';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\nimport {ActionCard} from '../ActionCard';\n\nexport class DysonScreens extends ActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.DYSON_SCREENS,\n      tags: [Tag.SCIENCE, Tag.VENUS, Tag.POWER, Tag.SPACE],\n      cost: 22,\n      victoryPoints: 1,\n\n      behavior: {\n        production: {energy: 2, heat: 2},\n        drawCard: 1,\n        global: {temperature: 1},\n        city: {space: SpaceName.DYSON_SCREENS},\n      },\n\n      action: {\n        spend: {titanium: 2},\n        production: {energy: 1, heat: 1},\n      },\n\n      metadata: {\n        cardNumber: 'Pf15',\n        renderData: CardRenderer.builder((b) => {\n          b.action(\n            'Pay 2 titanium to raise your heat and energy production 1 step each.',\n            (ab) => ab.titanium(2, {digit}).startAction.production((pb) => pb.heat(1).energy(1))).br;\n          b.temperature(1).cards(1, {size: Size.SMALL}).city({size: Size.SMALL}).asterix();\n          b.production((pb) => pb.heat(2, {digit}).energy(2, {digit}));\n        }),\n        description: 'Raise the temperature 1 step. Draw a card. Place a city tile ON THE RESERVED AREA. Raise your energy and heat production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Lunar Embassy",
  "tags" : [ "earth", "mars", "city", "space" ],
  "victoryPoints" : 2,
  "cost" : 28,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/LunarEmbassy.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {SpaceName} from '../../SpaceName';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class LunarEmbassy extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.LUNAR_EMBASSY,\n      tags: [Tag.EARTH, Tag.MARS, Tag.CITY, Tag.SPACE],\n      cost: 28,\n      victoryPoints: 2,\n\n      behavior: {\n        drawCard: 1,\n        city: {space: SpaceName.LUNAR_EMBASSY},\n        production: {megacredits: 3, plants: {tag: Tag.EARTH, per: 2}},\n      },\n\n      metadata: {\n        cardNumber: 'Pf16',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(3))\n            .production((pb) => pb.plants(1).slash().tag(Tag.EARTH, 2))\n            .br\n            .cards(1).city().asterix().br;\n        }),\n        description: 'Increase your Mâ‚¬ production 3 steps, and plant production 1 step for every 2 Earth tags (including this.) ' +\n          'Draw a card. Place a city tile ON THE RESERVED AREA.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Geological Expedition",
  "tags" : [ "mars", "science" ],
  "victoryPoints" : 2,
  "cost" : 16,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/GeologicalExpedition.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {SpaceBonus} from '../../../common/boards/SpaceBonus';\nimport {IPlayer} from '../../IPlayer';\nimport {BoardType} from '../../boards/BoardType';\nimport {Space} from '../../boards/Space';\nimport {Resource} from '../../../common/Resource';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {Priority} from '../../deferredActions/Priority';\nimport {SpaceType} from '../../../common/boards/SpaceType';\nimport {Phase} from '../../../common/Phase';\n\nconst VALID_BONUSES: Array<SpaceBonus> = [\n  SpaceBonus.TITANIUM,\n  SpaceBonus.STEEL,\n  SpaceBonus.PLANT,\n  SpaceBonus.HEAT,\n  SpaceBonus.MEGACREDITS,\n  SpaceBonus.ANIMAL,\n  SpaceBonus.MICROBE,\n  SpaceBonus.ENERGY,\n  SpaceBonus.DATA,\n  SpaceBonus.SCIENCE,\n];\n\nexport class GeologicalExpedition extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.GEOLOGICAL_EXPEDITION,\n      cost: 16,\n      tags: [Tag.MARS, Tag.SCIENCE],\n      victoryPoints: 2,\n\n      metadata: {\n        cardNumber: 'Pf17',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you place a tile ON MARS gain 1 additional resource on the space. If the space has no bonus, gain 1 steel.', (eb) => {\n            eb.emptyTile().startEffect.plus().wild(1).or().steel(1).asterix();\n          }).br;\n        }),\n      },\n    });\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space, boardType: BoardType) {\n    if (boardType !== BoardType.MARS || space.spaceType === SpaceType.COLONY) return;\n    if (cardOwner !== activePlayer) return;\n    if (cardOwner.game.phase === Phase.SOLAR) return;\n    // Don't grant bonuses when overplacing.\n    if (space.tile?.covers !== undefined) return;\n\n    const bonuses = space.bonus;\n    if (bonuses.length === 0) {\n      activePlayer.stock.add(Resource.STEEL, 1, {log: true /* , from: this.name */});\n      return;\n    }\n    const filtered = bonuses.filter((bonus) => VALID_BONUSES.includes(bonus));\n    const unique = Array.from(new Set(filtered));\n    const options = new OrOptions();\n    options.title = 'Select an additional bonus from this space.';\n    unique.forEach((bonus) => {\n      options.options.push(new SelectOption(\n        SpaceBonus.toString(bonus),\n        'Select')\n        .andThen(() => {\n          activePlayer.game.grantSpaceBonus(activePlayer, bonus, 1);\n          return undefined;\n        }));\n    });\n    if (options.options.length === 1) {\n      options.options[0].cb();\n      return;\n    }\n    if (options.options.length === 0) {\n      // should not happen.\n      return;\n    }\n    activePlayer.defer(options, Priority.GAIN_RESOURCE_OR_PRODUCTION);\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Early Expedition",
  "tags" : [ "science", "space", "city" ],
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ {
    "temperature" : -18,
    "max" : true,
    "count" : -18
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/EarlyExpedition.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {max} from '../Options';\n\nexport class EarlyExpedition extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.EARLY_EXPEDITION,\n      cost: 15,\n      tags: [Tag.SCIENCE, Tag.SPACE, Tag.CITY],\n      requirements: {temperature: -18, max},\n\n      behavior: {\n        production: {energy: -1, megacredits: 3},\n        addResourcesToAnyCard: {type: CardResource.DATA, count: 1},\n        city: {on: 'isolated'},\n      },\n\n      metadata: {\n        cardNumber: 'Pf18',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().production((pb) => pb.energy(1)).production((pb) => pb.megacredits(3)).br;\n          b.resource(CardResource.DATA).asterix().city().asterix();\n        }),\n        description: 'Temperature must be -18 C or lower. Decrease your energy production 1 step and ' +\n          'Raise your Mâ‚¬ production 3 steps. Add 1 data to ANY card. Place a city tile on Mars NEXT TO NO OTHER TILE.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Hydrogen Processing Plant",
  "tags" : [ "building", "power" ],
  "victoryPoints" : -1,
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/HydrogenProcessingPlant.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class HydrogenProcessingPlant extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.HYDROGEN_PROCESSING_PLANT,\n      cost: 6,\n      tags: [Tag.BUILDING, Tag.POWER],\n      requirements: {oxygen: 3},\n      victoryPoints: -1,\n\n      behavior: {\n        global: {oxygen: -1},\n        production: {energy: {oceans: {}, per: 2}},\n      },\n\n      metadata: {\n        cardNumber: 'Pf19',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1)).slash().oceans(2).br;\n          b.minus().oxygen(1).br;\n        }),\n        description: 'Oxygen level must be 3% or higher. Decrease oxygen level 1% ' +\n          'Raise your energy production 1 step for every two ocean tiles on Mars.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Power Plant:Pathfinders",
  "tags" : [ "mars", "power", "building" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/PowerPlant:Pathfinders.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Luxury Estate",
  "tags" : [ "earth", "mars", "building" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ {
    "oxygen" : 7,
    "count" : 7
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/LuxuryEstate.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class LuxuryEstate extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.LUXURY_ESTATE,\n      cost: 12,\n      tags: [Tag.EARTH, Tag.MARS, Tag.BUILDING],\n      requirements: {oxygen: 7},\n\n      behavior: {\n        stock: {titanium: {cities: {}, greeneries: {}, all: false}},\n      },\n\n      metadata: {\n        cardNumber: 'Pf21',\n        renderData: CardRenderer.builder((b) => {\n          b.titanium(1).slash().city().plus().greenery({withO2: false});\n        }),\n        description: 'Oxygen must be 7% or greater. Gain 1 titanium for each city tile and greenery tile you own.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Return to Abandoned Technology",
  "tags" : [ "mars" ],
  "cost" : 4,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/ReturntoAbandonedTechnology.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {ChooseCards} from '../../deferredActions/ChooseCards';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class ReturntoAbandonedTechnology extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.RETURN_TO_ABANDONED_TECHNOLOGY,\n      cost: 4,\n      tags: [Tag.MARS],\n\n      metadata: {\n        cardNumber: 'Pf22',\n        renderData: CardRenderer.builder((b) => {\n          b.text('Draw the top 4 cards from the discard pile. Choose 2 to keep and discard the rest.', Size.SMALL).br;\n        }),\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return player.game.projectDeck.discardPile.length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const cards = [];\n    for (let idx = 0; idx < 4; idx++) {\n      const card = player.game.projectDeck.discardPile.pop();\n      if (card === undefined) break;\n      cards.push(card);\n    }\n\n    const cardsToKeep = Math.min(2, cards.length);\n    player.game.defer(new ChooseCards(player, cards, {keepMax: cardsToKeep}));\n\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Designed Organisms",
  "tags" : [ "science", "plant", "mars" ],
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/DesignedOrganisms.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class DesignedOrganisms extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.DESIGNED_ORGANISMS,\n      cost: 13,\n      tags: [Tag.SCIENCE, Tag.PLANT, Tag.MARS],\n      requirements: {tag: Tag.SCIENCE, count: 5},\n\n      behavior: {\n        production: {plants: 2},\n        stock: {plants: 3},\n        addResourcesToAnyCard: [\n          {count: 3, type: CardResource.MICROBE},\n          {count: 1, type: CardResource.ANIMAL},\n        ],\n      },\n\n      metadata: {\n        cardNumber: 'Pf23',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(2)).plants(3).br;\n          b.resource(CardResource.MICROBE, 3).asterix().resource(CardResource.ANIMAL).asterix();\n        }),\n        description: 'Requires 5 science tags. Increase your plant production 2 steps. Gain 3 plants. ' +\n          'Add 3 microbes to ANY card. Add 1 animal to ANY card.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Space Debris Cleaning Operation",
  "tags" : [ "mars", "space" ],
  "cost" : 10,
  "type" : "event",
  "requirements" : [ {
    "tag" : "space",
    "count" : 4,
    "all" : true
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/SpaceDebrisCleaningOperation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {ICard} from '../ICard';\nimport {all} from '../Options';\n\nexport class SpaceDebrisCleaningOperation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.SPACE_DEBRIS_CLEANING_OPERATION,\n      cost: 10,\n      tags: [Tag.MARS, Tag.SPACE],\n      requirements: {tag: Tag.SPACE, count: 4, all},\n\n      behavior: {\n        stock: {titanium: 3},\n        addResourcesToAnyCard: {count: 1, type: CardResource.DATA},\n        drawCard: 1,\n      },\n\n      metadata: {\n        cardNumber: 'Pf24',\n        renderData: CardRenderer.builder((b) => {\n          b.titanium(3).br;\n          b.wild(1).asterix().resource(CardResource.DATA).asterix().cards(1);\n        }),\n        // Nerfed by disallowing science resources (rather than the one The Moon does just to keep the text smaller.)\n        description: 'Requires any 4 space tags in play. Gain 3 titanium. ' +\n          'Add 1 resource to ANY card (not cards that take ANIMAL or SCIENCE resources.) ' +\n          'Add 1 data to ANY card. Draw 1 card.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(\n      new AddResourcesToCard(\n        player,\n        undefined,\n        {\n          count: 1,\n          filter: (card: ICard) => {\n            return card.resourceType !== undefined && card.resourceType !== CardResource.SCIENCE && !card.tags.includes(Tag.ANIMAL);\n          },\n        },\n      ));\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Private Security",
  "tags" : [ "earth" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/PrivateSecurity.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class PrivateSecurity extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.PRIVATE_SECURITY,\n      cost: 4,\n      tags: [Tag.EARTH],\n\n      metadata: {\n        cardNumber: 'Pf25',\n        renderData: CardRenderer.builder((b) => {\n          b.text('Opponents may not remove your basic resource production', Size.SMALL, true).br;\n          b.production((pb) => pb.wild(1, {cancelled: true}));\n        }),\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Secret Labs",
  "tags" : [ "jovian", "building", "space" ],
  "victoryPoints" : 1,
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science"
  }, {
    "tag" : "jovian"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/SecretLabs.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CanAffordOptions, IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {PlaceOceanTile} from '../../deferredActions/PlaceOceanTile';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {Resource} from '../../../common/Resource';\nimport {CardResource} from '../../../common/CardResource';\nimport {TRSource} from '../../../common/cards/TRSource';\nimport {digit} from '../Options';\nimport {MAX_OCEAN_TILES} from '../../../common/constants';\n\nexport class SecretLabs extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SECRET_LABS,\n      cost: 20,\n      tags: [Tag.JOVIAN, Tag.BUILDING, Tag.SPACE],\n      requirements: [{tag: Tag.SCIENCE}, {tag: Tag.JOVIAN}],\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'Pf26',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(1).resource(CardResource.MICROBE, {amount: 2, digit}).asterix().or().temperature(1).br;\n          b.plants(3, {digit}).or().oxygen(1).resource(CardResource.FLOATER, {amount: 2, digit}).asterix().br;\n        }),\n        description: 'Requires 1 science tag and 1 Jovian tag. ' +\n          'Place an ocean tile. Add 2 microbes to ANY card. ' +\n          'OR Raise temperature 1 step. Gain 3 plants. ' +\n          'OR Raise oxygen level 1 step. Add 2 floaters to ANY card.',\n      },\n    });\n  }\n\n  private adjustedOptions(options: CanAffordOptions, trSource: TRSource, cost?: number): CanAffordOptions {\n    const newOptions = {...options};\n    newOptions.tr = trSource;\n    if (cost !== undefined) {\n      newOptions.cost = cost;\n    }\n    return newOptions;\n  }\n\n  public override bespokeCanPlay(player: IPlayer, canAffordOptions: CanAffordOptions) {\n    return (\n      player.canAfford(this.adjustedOptions(canAffordOptions, {oceans: 1})) ||\n      player.canAfford(this.adjustedOptions(canAffordOptions, {temperature: 1})) ||\n      player.canAfford(this.adjustedOptions(canAffordOptions, {oxygen: 1}))\n    );\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const options = new OrOptions();\n\n    if (player.canAfford({cost: 0, tr: {oceans: 1}})) {\n      const oceanPlacementAvailable = player.game.board.getOceanSpaces().length < MAX_OCEAN_TILES;\n      const optionTitle = oceanPlacementAvailable ? 'Place an ocean tile. Add 2 microbes to ANY card.': 'Add 2 microbes to ANY card.';\n      options.options.push(new SelectOption(optionTitle).andThen(() => {\n        if (oceanPlacementAvailable || player.cardIsInEffect(CardName.WHALES)) {\n          player.game.defer(new PlaceOceanTile(player));\n        }\n        player.game.defer(new AddResourcesToCard(player, CardResource.MICROBE, {count: 2}));\n        return undefined;\n      }));\n    }\n    if (player.canAfford({cost: 0, tr: {temperature: 1}})) {\n      options.options.push(new SelectOption('Raise temperature 1 step. Gain 3 plants.').andThen(() => {\n        player.game.increaseTemperature(player, 1);\n        player.stock.add(Resource.PLANTS, 3, {log: true});\n        return undefined;\n      }));\n    }\n    if (player.canAfford({cost: 0, tr: {oxygen: 1}})) {\n      options.options.push(new SelectOption('Raise oxygen level 1 step. Add 2 floaters to ANY card.').andThen(() => {\n        player.game.increaseOxygenLevel(player, 1);\n        player.game.defer(new AddResourcesToCard(player, CardResource.FLOATER, {count: 2}));\n        return undefined;\n      }));\n    }\n\n    return options;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Cyanobacteria",
  "tags" : [ "microbe", "mars" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Cyanobacteria.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {AddResourcesToCards} from '../../deferredActions/AddResourcesToCards';\n\nexport class Cyanobacteria extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.CYANOBACTERIA,\n      cost: 12,\n      tags: [Tag.MICROBE, Tag.MARS],\n\n      behavior: {\n        global: {oxygen: 1},\n      },\n\n      metadata: {\n        cardNumber: 'Pf27',\n        renderData: CardRenderer.builder((b) => {\n          b.oxygen(1).br;\n          b.resource(CardResource.MICROBE).asterix().slash().oceans(1).br;\n        }),\n        description: 'Raise the oxygen level 1%. For every ocean tile, add a microbe to ANY card.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const microbes = player.game.board.getOceanSpaces({upgradedOceans: true, wetlands: true}).length;\n    player.game.defer(new AddResourcesToCards(player, CardResource.MICROBE, microbes));\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Communication Center",
  "tags" : [ "science", "mars", "building" ],
  "cost" : 13,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/CommunicationCenter.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {all, digit} from '../Options';\nimport {Size} from '../../../common/cards/render/Size';\nimport {ICard} from '../ICard';\nimport {Priority} from '../../deferredActions/Priority';\n\nexport class CommunicationCenter extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.COMMUNICATION_CENTER,\n      cost: 13,\n      tags: [Tag.SCIENCE, Tag.MARS, Tag.BUILDING],\n      resourceType: CardResource.DATA,\n\n      behavior: {\n        production: {energy: -1},\n        addResources: 2,\n      },\n\n      metadata: {\n        cardNumber: 'Pf28',\n        renderData: CardRenderer.builder((b) => {\n          b.tag(Tag.EVENT, {all}).colon().resource(CardResource.DATA).nbsp.resource(CardResource.DATA, {amount: 3, digit}).colon().cards(1).br;\n          b.text('(Effect: Whenever ANY PLAYER plays an event, add 1 data to this card.)', Size.TINY, false, false).br;\n          b.text('(Effect: Remove 3 data to draw a card automatically.)', Size.TINY, false, false).br;\n          b.minus().production((pb) => pb.energy(1)).resource(CardResource.DATA, 2);\n        }),\n        description: 'Decrease your energy production 1 step. Place 2 data on this card.',\n      },\n    });\n  }\n\n  public onResourceAdded(player: IPlayer, playedCard: ICard) {\n    if (playedCard.name !== this.name) return;\n    while (this.resourceCount >= 3) {\n      this.resourceCount -= 3;\n      player.drawCard(1);\n      player.game.log('${0} automatically removed 3 data from ${1} to draw a card.', (b) => {\n        b.player(player).card(this);\n      });\n    }\n  }\n\n  public onCardPlayedFromAnyPlayer(thisCardOwner: IPlayer, _playedCardOwner: IPlayer, card: IProjectCard) {\n    if (card.type === CardType.EVENT) {\n      // Resolve CEO's Favorite Project before adding the resource.\n      const priority = (card.name === CardName.CEOS_FAVORITE_PROJECT) ? Priority.BACK_OF_THE_LINE : Priority.DEFAULT;\n      thisCardOwner.defer(() => {\n        thisCardOwner.addResourceTo(this, {qty: 1, log: true});\n      }, priority);\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Martian Repository",
  "tags" : [ "mars", "mars", "building" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 8,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/MartianRepository.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {ICard} from '../ICard';\n\nexport class MartianRepository extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MARTIAN_REPOSITORY,\n      cost: 8,\n      tags: [Tag.MARS, Tag.MARS, Tag.BUILDING],\n      resourceType: CardResource.DATA,\n\n      behavior: {\n        production: {energy: -1},\n      },\n\n      victoryPoints: {resourcesHere: {}, per: 3},\n\n      metadata: {\n        cardNumber: 'Pf29',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('For every science or Mars tag you play (including these) add 1 data to this card.', (eb) => {\n            eb.tag(Tag.SCIENCE).tag(Tag.MARS).startEffect.resource(CardResource.DATA);\n          }).br;\n          b.minus().production((pb) => pb.energy(1));\n        }),\n        description: 'Decrease your energy production 1 step. 1 VP for every 3 data here.',\n      },\n    });\n  }\n\n\n  public onCardPlayed(player: IPlayer, card: ICard) {\n    const qty = player.tags.cardTagCount(card, Tag.SCIENCE) + player.tags.cardTagCount(card, Tag. MARS);\n    if (qty > 0) player.addResourceTo(this, {qty, log: true});\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Data Leak",
  "tags" : [ ],
  "cost" : 3,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/DataLeak.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class DataLeak extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.DATA_LEAK,\n      cost: 3,\n\n      behavior: {\n        addResourcesToAnyCard: {count: 5, type: CardResource.DATA},\n      },\n\n      metadata: {\n        cardNumber: 'Pf30',\n        renderData: CardRenderer.builder((b) => b.resource(CardResource.DATA, 5).asterix()),\n        description: 'Add 5 data to ANY card.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Small Open Pit Mine",
  "tags" : [ "building" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/SmallOpenPitMine.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {Resource} from '../../../common/Resource';\n\nexport class SmallOpenPitMine extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SMALL_OPEN_PIT_MINE,\n      cost: 10,\n      tags: [Tag.BUILDING],\n\n      metadata: {\n        cardNumber: 'Pf31',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.steel(2)).or().production((pb) => pb.titanium(1));\n        }),\n        description: 'Increase your steel production 2 steps OR increase your titanium production 1 step.',\n      },\n    });\n  }\n\n  public produce(player: IPlayer) {\n    player.defer(() => {\n      return new OrOptions(\n        new SelectOption('Increase your steel production 2 steps').andThen(() => {\n          player.production.add(Resource.STEEL, 2, {log: true});\n          return undefined;\n        }),\n        new SelectOption('Increase your titanium production 1 step').andThen(() => {\n          player.production.add(Resource.TITANIUM, 1, {log: true});\n          return undefined;\n        }));\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    this.produce(player);\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Solar Storm",
  "tags" : [ "space" ],
  "cost" : 12,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/SolarStorm.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {RemoveResourcesFromCard} from '../../deferredActions/RemoveResourcesFromCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {all, digit} from '../Options';\n\nexport class SolarStorm extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.SOLAR_STORM,\n      cost: 12,\n      tags: [Tag.SPACE],\n\n      behavior: {\n        production: {heat: 1},\n        global: {temperature: 1},\n      },\n\n      metadata: {\n        cardNumber: 'Pf32',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().plants(2, {all}).asterix().nbsp.minus().resource(CardResource.DATA, {amount: 3, digit, all}).br;\n          b.production((pb) => pb.heat(1)).nbsp.temperature(1);\n        }),\n        description: 'Every player loses 2 plants. Remove up to 3 data from any player. ' +\n          'Raise your heat production 1 step. Raise the temperature 1 step.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    for (const p of player.game.getPlayers()) {\n      if (!p.plantsAreProtected()) {\n        // Botanical Experience reduces the impact in half.\n        if (p.cardIsInEffect(CardName.BOTANICAL_EXPERIENCE)) {\n          p.stock.deduct(Resource.PLANTS, 1, {log: true, from: player});\n        } else {\n          p.stock.deduct(Resource.PLANTS, 2, {log: true, from: player});\n        }\n      }\n    }\n    player.game.defer(new RemoveResourcesFromCard(\n      player, CardResource.DATA, 3, {mandatory: false}));\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Space Relay",
  "tags" : [ "space", "jovian" ],
  "cost" : 15,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/SpaceRelay.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ICard} from '../ICard';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class SpaceRelay extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SPACE_RELAY,\n      cost: 15,\n      tags: [Tag.SPACE, Tag.JOVIAN],\n\n      behavior: {\n        production: {megacredits: 1},\n      },\n\n      metadata: {\n        cardNumber: 'Pf33',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Whenever you play a card with a Jovian tag, including this, draw a card.', (eb) => {\n            eb.tag(Tag.JOVIAN).startEffect.cards(1);\n          }).br;\n          b.production((pb) => pb.megacredits(1));\n        }),\n        description: 'Increase your Mâ‚¬ production 1 step.',\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard) {\n    if (card.tags.includes(Tag.JOVIAN)) {\n      player.drawCard();\n    }\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Declaration of Independence",
  "tags" : [ "mars" ],
  "victoryPoints" : 5,
  "cost" : 20,
  "type" : "event",
  "requirements" : [ {
    "tag" : "mars",
    "count" : 6
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/pathfinders/DeclarationofIndependence.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Martian Culture",
  "tags" : [ "mars", "mars" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "tag" : "mars",
    "count" : 2,
    "all" : true
  } ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/MartianCulture.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {all} from '../Options';\n\nexport class MartianCulture extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MARTIAN_CULTURE,\n      cost: 10,\n      tags: [Tag.MARS, Tag.MARS],\n      resourceType: CardResource.DATA,\n      requirements: {tag: Tag.MARS, count: 2, all},\n      victoryPoints: {resourcesHere: {}, per: 2},\n\n      action: {\n        addResourcesToAnyCard: {type: CardResource.DATA, count: 1},\n      },\n\n      metadata: {\n        cardNumber: 'Pf35',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 data to ANY card.', (eb) => eb.empty().startAction.resource(CardResource.DATA).asterix());\n        }),\n        description: 'Requires any 2 Mars tags in play.  1 VP for every 2 data here.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Ozone Generators",
  "tags" : [ "mars", "space" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 14,
  "type" : "active",
  "requirements" : [ {
    "oxygen" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/OzoneGenerators.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class OzoneGenerators extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.OZONE_GENERATORS,\n      cost: 14,\n      tags: [Tag.MARS, Tag.SPACE],\n      requirements: {oxygen: 2},\n      victoryPoints: {tag: Tag.POWER, per: 3},\n\n\n      action: {\n        spend: {energy: 3},\n        tr: 1,\n        // player.game.log('${0} spent 3 energy to gain 1 TR', (b) => b.player(player));\n      },\n\n      metadata: {\n        cardNumber: 'Pf36',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 3 energy to gain 1 TR.', (eb) => eb.energy(3).startAction.tr(1));\n        }),\n        description: 'Requires 6% Oxygen.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Small Comet",
  "tags" : [ "mars", "space" ],
  "cost" : 32,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/SmallComet.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {all} from '../Options';\nimport {RemoveResources} from '../../deferredActions/RemoveResources';\nimport {Resource} from '../../../common/Resource';\nimport {Priority} from '../../../server/deferredActions/Priority';\n\nexport class SmallComet extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.SMALL_COMET,\n      cost: 32,\n      tags: [Tag.MARS, Tag.SPACE],\n\n      behavior: {\n        stock: {titanium: 1},\n        global: {temperature: 1, oxygen: 1},\n        ocean: {on: 'land'},\n      },\n\n      metadata: {\n        cardNumber: 'Pf37',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().plants(2, {all}).asterix();\n          b.br;\n          b.temperature(1).oxygen(1).oceans(1).asterix();\n          b.br;\n          b.titanium(1);\n        }),\n        description: 'Every player loses 2 plants. Raise the temperature 1 step. Raise the oxygen 1 step. ' +\n          'Place an ocean ON AN AREA NOT RESERVED FOR OCEAN. Gain 1 titanium.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    for (const target of game.getPlayers()) {\n      game.defer(new RemoveResources(target, player, Resource.PLANTS, 2), Priority.ATTACK_OPPONENT);\n    }\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Economic Espionage",
  "tags" : [ "earth" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/EconomicEspionage.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class EconomicEspionage extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ECONOMIC_ESPIONAGE,\n      cost: 4,\n      tags: [Tag.EARTH],\n      resourceType: CardResource.DATA,\n      victoryPoints: {resourcesHere: {}, per: 3},\n\n      action: {\n        spend: {megacredits: 2},\n        addResourcesToAnyCard: {count: 1, type: CardResource.DATA},\n      },\n\n      metadata: {\n        cardNumber: 'Pf38',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 2 Mâ‚¬ to Add 1 data to ANY card.', (eb) => {\n            eb.megacredits(2).startAction.resource(CardResource.DATA).asterix();\n          }).br;\n        }),\n        description: '1VP for every 3 data here.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Flat Mars Theory",
  "tags" : [ "earth", "mars" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 1,
    "max" : true
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/FlatMarsTheory.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Resource} from '../../../common/Resource';\nimport {max} from '../Options';\n\nexport class FlatMarsTheory extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.FLAT_MARS_THEORY,\n      cost: 8,\n      tags: [Tag.EARTH, Tag.MARS],\n      requirements: {tag: Tag.SCIENCE, count: 1, max},\n\n      metadata: {\n        cardNumber: 'Pf39',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1)).slash().text('GENERATION');\n        }),\n        description: 'Requires maximum 1 science tag. Increase your Mâ‚¬ production 1 step for every generation played so far.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const generation = player.game.generation;\n    player.production.add(Resource.MEGACREDITS, generation, {log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Asteroid Resources",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : 1,
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/AsteroidResources.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Size} from '../../../common/cards/render/Size';\nimport {digit} from '../Options';\n\nexport class AsteroidResources extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ASTEROID_RESOURCES,\n      cost: 15,\n      tags: [Tag.JOVIAN, Tag.SPACE],\n      reserveUnits: {energy: 3},\n      victoryPoints: 1,\n\n      behavior: {\n        or: {\n          autoSelect: true,\n          behaviors: [\n            {\n              title: 'Increase your steel and titanium production 1 step.',\n              spend: {energy: 3},\n              production: {steel: 1, titanium: 1},\n            },\n            {\n              title: 'Place an ocean, and gain 2 steel and one titanium.',\n              spend: {energy: 3},\n              ocean: {},\n              stock: {steel: 2, titanium: 1},\n            },\n          ],\n        },\n      },\n\n      metadata: {\n        cardNumber: 'Pf40',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().energy(3, {digit}).production((pb) => pb.steel(1).titanium(1)).br\n            .or(Size.SMALL).br;\n          b.minus().energy(3, {digit}).oceans(1, {size: Size.SMALL}).steel(2, {digit}).titanium(1);\n        }),\n        description: 'Spend 3 energy. Either increase your steel and titanium production one step, OR ' +\n          'place an ocean, and gain 2 steel and one titanium.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Kickstarter",
  "tags" : [ "clone" ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Kickstarter.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {DeclareCloneTag} from '../../pathfinders/DeclareCloneTag';\nimport {ICloneTagCard} from './ICloneTagCard';\nimport {PathfindersExpansion} from '../../pathfinders/PathfindersExpansion';\n\nexport class Kickstarter extends Card implements IProjectCard, ICloneTagCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.KICKSTARTER,\n      cost: 9,\n\n      metadata: {\n        cardNumber: 'Pf41',\n        renderData: CardRenderer.builder((b) => {\n          b.planetaryTrack().text('3');\n        }),\n        description: 'Choose a planet tag. This card counts as having 1 of that tag. Raise the corresponding planetary track 3 steps in total.',\n      },\n    });\n  }\n\n  public cloneTag: Tag = Tag.CLONE;\n\n  public override get tags(): Array<Tag> {\n    return [this.cloneTag];\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    // player.production.adjust(this.productionBox); Why was this here? Remove it, I suppose.\n    player.game.defer(new DeclareCloneTag(player, this))\n      // +2 instead of +3 because onCardPlayed covers applying one of the 3.\n      .andThen((tag) => PathfindersExpansion.raiseTrack(tag, player, 2));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Economic Help",
  "tags" : [ ],
  "cost" : 7,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/EconomicHelp.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {isPlanetaryTag, PlanetaryTag} from '../../pathfinders/PathfindersData';\nimport {PathfindersExpansion, TRACKS} from '../../pathfinders/PathfindersExpansion';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Size} from '../../../common/cards/render/Size';\nimport {PathfindersData} from '../../pathfinders/PathfindersData';\n\nexport class EconomicHelp extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.ECONOMIC_HELP,\n      cost: 7,\n\n      behavior: {\n        production: {megacredits: 1},\n      },\n\n      metadata: {\n        cardNumber: 'Pf42',\n        renderData: CardRenderer.builder((b) => {\n          b.planetaryTrack().text('3').or().text('2')\n            .tag(Tag.VENUS).or(Size.SMALL)\n            .tag(Tag.EARTH).or(Size.SMALL).br;\n          b.tag(Tag.MARS).or(Size.SMALL)\n            .tag(Tag.JOVIAN).or(Size.SMALL)\n            .tag(Tag.MOON).br;\n          b.production((pb) => pb.megacredits(1));\n        }),\n        description: 'Raise the lowest non-completed planetary influence track 3 steps. When tied, raise all lowest tracks 2 steps. ' +\n         'Increase your Mâ‚¬ production 1 step',\n      },\n    });\n  }\n\n  private trackOffset(tag: PlanetaryTag, data: PathfindersData): number {\n    const value = data[tag];\n    const maxValue = TRACKS[tag].spaces.length - 1;\n    return maxValue === value ? -1 : value;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const data = player.game.pathfindersData;\n    if (data === undefined) {\n      return undefined;\n    }\n    const tags = player.game.tags.filter(isPlanetaryTag);\n    const values = tags.map((tag) => this.trackOffset(tag, data));\n\n    // Filter any maximized track.\n    // Filter out -1.\n    const lowest = Math.min(...(values.filter((v) => v >= 0)));\n    const count = values.filter((v) => v === lowest).length;\n    const increment = (count === 1) ? 3 : 2;\n    if (data.earth === lowest) PathfindersExpansion.raiseTrack(Tag.EARTH, player, increment);\n    if (data.jovian === lowest) PathfindersExpansion.raiseTrack(Tag.JOVIAN, player, increment);\n    if (data.mars === lowest) PathfindersExpansion.raiseTrack(Tag.MARS, player, increment);\n    if (data.moon === lowest && player.game.gameOptions.moonExpansion === true) PathfindersExpansion.raiseTrack(Tag.MOON, player, increment);\n    if (data.venus === lowest && player.game.gameOptions.venusNextExtension === true) PathfindersExpansion.raiseTrack(Tag.VENUS, player, increment);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Interplanetary Transport",
  "tags" : [ "earth", "jovian", "space" ],
  "victoryPoints" : 1,
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/InterplanetaryTransport.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {all} from '../Options';\n\nexport class InterplanetaryTransport extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.INTERPLANETARY_TRANSPORT,\n      cost: 10,\n      tags: [Tag.EARTH, Tag.JOVIAN, Tag.SPACE],\n      victoryPoints: 1,\n\n      behavior: {\n        production: {megacredits: {cities: {where: 'offmars'}}},\n      },\n\n      metadata: {\n        cardNumber: 'Pf43',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1)).slash().city({all, secondaryTag: Tag.SPACE}).asterix;\n        }),\n        description: 'Increase your Mâ‚¬ production 1 step for every offworld city tile.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Martian Dust Processing Plant",
  "tags" : [ "mars", "building" ],
  "cost" : 14,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/MartianDustProcessingPlant.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class MartianDustProcessingPlant extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.MARTIAN_DUST_PROCESSING_PLANT,\n      cost: 14,\n      tags: [Tag.MARS, Tag.BUILDING],\n\n      behavior: {\n        production: {energy: -1, steel: 2},\n        tr: 1,\n      },\n\n      metadata: {\n        cardNumber: 'Pf44',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.minus().energy(1).nbsp.steel(2)).br;\n          b.tr(1);\n        }),\n        description: 'Decrease your energy production 1 step, and raise your steel production 2 steps. Gain 1 TR.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Cultivation of Venus",
  "tags" : [ "plant", "venus" ],
  "victoryPoints" : {
    "tag" : "venus",
    "per" : 2
  },
  "cost" : 18,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/pathfinders/CultivationofVenus.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Expedition to the Surface - Venus",
  "tags" : [ "venus" ],
  "cost" : 15,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/pathfinders/ExpeditiontotheSurface-Venus.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Last Resort Ingenuity",
  "tags" : [ ],
  "cost" : 2,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/LastResortIngenuity.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class LastResortIngenuity extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.LAST_RESORT_INGENUITY,\n      cost: 2,\n\n      metadata: {\n        cardNumber: 'Pf47',\n        renderData: CardRenderer.builder((b) => {\n          b.cards(1).asterix().colon().super((b) => b.steel(1).titanium(1));\n          b.br;\n          b.text('The next card you play this generation can be paid for with steel or titanium despite its tags.', Size.MEDIUM, true, true);\n        }),\n      },\n    });\n  }\n  // Behavior in player.canUseSteel, player.canUseTitanium, and SelectPaymentDeferred.\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Crashlanding",
  "tags" : [ "mars" ],
  "cost" : 12,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ "ares" ],
  "sourceFile" : "src/server/cards/pathfinders/Crashlanding.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {Space} from '../../boards/Space';\nimport {CanAffordOptions, IPlayer} from '../../IPlayer';\nimport {TileType} from '../../../common/TileType';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Board} from '../../boards/Board';\nimport {Size} from '../../../common/cards/render/Size';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {CardResource} from '../../../common/CardResource';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {Tile} from '../../Tile';\nimport {CrashlandingBonus} from '../../pathfinders/CrashlandingBonus';\nimport {message} from '../../logs/MessageBuilder';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class Crashlanding extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.CRASHLANDING,\n      tags: [Tag.MARS],\n      cost: 12,\n      tilesBuilt: [TileType.CRASHLANDING],\n\n      behavior: {\n        addResourcesToAnyCard: [\n          {type: CardResource.DATA, count: 1, autoSelect: true},\n          {type: undefined, count: 1, autoSelect: true},\n        ],\n      },\n\n      metadata: {\n        cardNumber: 'Pf48',\n        renderData: CardRenderer.builder((b) => {\n          b.tile(TileType.CRASHLANDING, false, true).asterix().resource(CardResource.DATA).asterix().wild(1).asterix().br;\n          b.text('(Place AND ORIENT this tile on a non-reserved space adjacent to no more than 1 city.', Size.TINY, false, false).br;\n          b.text('Crashsite grants an ADJACENCY BONUS of 1 data, and either 1 steel or 1 titanium.', Size.TINY, false, false).br;\n          b.text('When placing Crashsite, for each tile you own next it, gain those bonuses.', Size.TINY, false, false).br;\n          b.text('Add 1 data to any card. Add 1 resource to any card.)', Size.TINY, false, false).br;\n        }),\n      },\n    });\n  }\n\n  private playableSpaces(player: IPlayer, canAffordOptions?: CanAffordOptions): Array<Space> {\n    const board = player.game.board;\n    const spaces = board.getAvailableSpacesOnLand(player, canAffordOptions);\n    return spaces.filter((space) => board.getAdjacentSpaces(space).filter(Board.isCitySpace).length <= 1);\n  }\n\n  public override bespokeCanPlay(player: IPlayer, canAffordOptions: CanAffordOptions): boolean {\n    return this.playableSpaces(player, canAffordOptions).length > 0;\n  }\n  public override bespokePlay(player: IPlayer) {\n    return new SelectSpace(\n      message('Select space for ${0} tile', (b) => b.card(this)),\n      this.playableSpaces(player))\n      .andThen((space) => {\n        space.adjacency = {bonus: ['callback']};\n        const tile: Tile = {\n          tileType: TileType.CRASHLANDING,\n          card: this.name,\n        };\n        player.game.addTile(player, space, tile);\n        const orOptions = new OrOptions(\n          new SelectOption('Leave as it is').andThen(() => {\n            tile.rotated = undefined;\n            this.grantPlacementBonuses(player, space);\n            return undefined;\n          }),\n          new SelectOption('Rotate Crashlanding').andThen(() => {\n            tile.rotated = true;\n            this.grantPlacementBonuses(player, space);\n            return undefined;\n          }),\n        );\n        orOptions.title = 'Orient Crashlanding';\n        return orOptions;\n      });\n  }\n\n  private grantPlacementBonuses(player: IPlayer, space: Space) {\n    const game = player.game;\n    for (const adjacentSpace of game.board.getAdjacentSpaces(space)) {\n      if (adjacentSpace.player === player && adjacentSpace.tile !== undefined) {\n        const bonuses = CrashlandingBonus.onTilePlacedAdjacentToCrashlanding(game, space, adjacentSpace);\n        for (const bonus of bonuses) {\n          game.grantSpaceBonus(player, bonus);\n        }\n      }\n    }\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Think Tank",
  "tags" : [ "mars", "venus", "science" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/ThinkTank.ts",
  "sourceCode" : "import {CardRenderer} from '../render/CardRenderer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class ThinkTank extends ActionCard {\n  constructor() {\n    super({\n      name: CardName.THINK_TANK,\n      type: CardType.ACTIVE,\n      cost: 4,\n      tags: [Tag.MARS, Tag.VENUS, Tag.SCIENCE],\n      resourceType: CardResource.DATA,\n\n      action: {\n        spend: {megacredits: 2},\n        addResourcesToAnyCard: {count: 1, type: CardResource.DATA},\n      },\n\n      metadata: {\n        cardNumber: 'Pf49',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 2 Mâ‚¬ to place 1 data on any card.', (ab) => {\n            ab.megacredits(2).startAction.resource(CardResource.DATA).asterix();\n          }).br;\n          b.effect(\n            'When playing a card, you can remove data from this card to ' +\n            'change the card\\'s global requirement by 1 step for every 1 data removed.',\n            (eb) => eb.resource(CardResource.DATA).startEffect.text('+/-1 global parameter', Size.SMALL));\n        }),\n      },\n    });\n  }\n\n  public override resourceCount = 0;\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Botanical Experience",
  "tags" : [ "plant", "mars", "science" ],
  "cost" : 14,
  "type" : "active",
  "requirements" : [ {
    "greeneries" : 1,
    "all" : true,
    "count" : 1
  } ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/BotanicalExperience.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all, digit} from '../Options';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Space} from '../../boards/Space';\nimport {Board} from '../../boards/Board';\nimport {CardResource} from '../../../common/CardResource';\nimport {ICard} from '../ICard';\nimport {Resource} from '../../../common/Resource';\n\nexport class BotanicalExperience extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.BOTANICAL_EXPERIENCE,\n      cost: 14,\n      tags: [Tag.PLANT, Tag.MARS, Tag.SCIENCE],\n      requirements: {greeneries: 1, all},\n      resourceType: CardResource.DATA,\n\n      metadata: {\n        cardNumber: 'Pf50',\n        hasExternalHelp: true,\n        renderData: CardRenderer.builder((b) => {\n          b.greenery({size: Size.SMALL, withO2: false, any: true}).colon().resource(CardResource.DATA, {size: Size.SMALL});\n          b.nbsp;\n          b.resource(CardResource.DATA, {amount: 3, digit}).asterix().colon().production((pb) => pb.plants(1));\n          b.br;\n          b.text('(EFFECT: Whenever a greenery tile is placed, add 1 data on this card.) ' +\n            '(EFFECT: Whenever this card has at least 3 data, automatically remove 3 data to raise your plant production 1 step.) ' +\n            '(EFFECT: Players may remove your plants, but you only lose half, rounded up.)', Size.SMALL, false, false);\n        }),\n        description: 'Requires one greenery tile on Mars.',\n      },\n    });\n  }\n\n\n  public onTilePlaced(cardOwner: IPlayer, _activePlayer: IPlayer, space: Space) {\n    if (Board.isGreenerySpace(space)) {\n      cardOwner.addResourceTo(this, 1);\n    }\n  }\n\n  public onResourceAdded(player: IPlayer, playedCard: ICard) {\n    if (playedCard.name !== this.name) return;\n    if (this.resourceCount >= 3) {\n      const delta = Math.floor(this.resourceCount / 3);\n      const deducted = delta * 3;\n      this.resourceCount -= deducted;\n      player.production.add(Resource.PLANTS, delta, {log: false});\n      player.game.log('${0} removed ${1} data from ${2} to increase plant production ${3} steps.',\n        (b) => b.player(player).number(deducted).card(this).number(delta));\n    }\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Cryptocurrency",
  "tags" : [ "power" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Cryptocurrency.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IActionCard} from '../ICard';\nimport {Resource} from '../../../common/Resource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {OrOptions} from '../../inputs/OrOptions';\n\nexport class Cryptocurrency extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.CRYPTOCURRENCY,\n      cost: 4,\n      tags: [Tag.POWER],\n      resourceType: CardResource.DATA,\n\n      metadata: {\n        cardNumber: 'Pf51',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 energy to add 1 data to this card.', (eb) => {\n            eb.energy(1).startAction.resource(CardResource.DATA).or();\n          }).br;\n          b.action('Remove all data from this card to gain 3Mâ‚¬ per data removed.', (eb) => {\n            eb.text('x').resource(CardResource.DATA).startAction.text('x').megacredits(3);\n          });\n        }),\n      },\n    });\n  }\n\n\n  public canAct(player: IPlayer) {\n    return player.energy > 0 || this.resourceCount > 0;\n  }\n\n  public action(player: IPlayer) {\n    const firstOption = new SelectOption(\n      'Spend 1 energy to add 1 data to this card.',\n      'Spend energy')\n      .andThen(() => {\n        player.stock.deduct(Resource.ENERGY, 1);\n        player.addResourceTo(this, {qty: 1, log: true});\n        return undefined;\n      });\n\n    const secondOption = new SelectOption(\n      'Remove all data from this card to gain 3Mâ‚¬ per data removed.',\n      'Spend data')\n      .andThen(() => {\n        player.stock.add(Resource.MEGACREDITS, 3 * this.resourceCount, {log: true});\n        this.resourceCount = 0; // Should this use addResourceTo?\n        return undefined;\n      });\n\n    if (this.resourceCount === 0) {\n      firstOption.cb(undefined);\n      return undefined;\n    }\n    if (player.energy === 0) {\n      secondOption.cb(undefined);\n      return undefined;\n    }\n    return new OrOptions(firstOption, secondOption);\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Rich Deposits",
  "tags" : [ ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/RichDeposits.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class RichDeposits extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.RICH_DEPOSITS,\n      cost: 12,\n\n      behavior: {\n        production: {steel: 3},\n      },\n\n      requirements: {tag: Tag.SCIENCE, count: 2},\n      metadata: {\n        cardNumber: 'Pf52',\n        renderData: CardRenderer.builder((b) => b.production((pb) => pb.steel(3))),\n        description: 'Requires 2 science tags. Increase your steel production 3 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Oumuamua Type Object Survey",
  "tags" : [ "space", "science" ],
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "space"
  }, {
    "tag" : "science"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/OumuamuaTypeObjectSurvey.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {digit} from '../Options';\nimport {Resource} from '../../../common/Resource';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class OumuamuaTypeObjectSurvey extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.OUMUAMUA_TYPE_OBJECT_SURVEY,\n      cost: 16,\n      tags: [Tag.SPACE, Tag.SCIENCE],\n      requirements: [{tag: Tag.SPACE}, {tag: Tag.SCIENCE}],\n\n      metadata: {\n        cardNumber: 'Pf53',\n        renderData: CardRenderer.builder((b) => {\n          b.resource(CardResource.DATA, 2).asterix().cards(2, {size: Size.SMALL}).asterix().br;\n          b.tag(Tag.SCIENCE).tag(Tag.MICROBE).colon().text('play ', Size.SMALL, false, true);\n          b.tag(Tag.SPACE).colon().production((pb) => pb.energy(3, {digit})).br;\n          b.text(\n            'Draw 2 cards face up. If the first has a science or microbe tag, play it outright ignoring requirements and cost. ' +\n            'If not, and it has a space tag, gain 3 energy prod. If it has none of those, apply the check to the second card.',\n            Size.SMALL, false, false);\n        }),\n        description: 'Requires 1 space tag and 1 science tag. Add 2 data to ANY card. ',\n      },\n    });\n  }\n\n  private keep(player: IPlayer, card: IProjectCard) {\n    player.cardsInHand.push(card);\n    player.game.log('${0} kept ${1}', (b) => b.player(player).card(card));\n  }\n\n  private processCard(player: IPlayer, card: IProjectCard): boolean {\n    const tags = card.tags;\n    if (player.tags.cardHasTag(card, Tag.SCIENCE) || player.tags.cardHasTag(card, Tag.MICROBE)) {\n      player.playCard(card, undefined);\n      return true;\n    } else if (tags.includes(Tag.SPACE)) {\n      player.production.add(Resource.ENERGY, 3, {log: true});\n      this.keep(player, card);\n      return true;\n    } else {\n      this.keep(player, card);\n      return false;\n    }\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return player.game.projectDeck.canDraw(2);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    // TODO(kberg): Make sure this action occurs after the card play, in case the played card has data.\n    game.defer(new AddResourcesToCard(player, CardResource.DATA, {count: 2}));\n    const cards = game.projectDeck.drawNOrThrow(game, 2);\n\n    player.game.log('${0} revealed ${1} and ${2}', (b) => b.player(player).card(cards[0], {tags: true}).card(cards[1], {tags: true}));\n    if (this.processCard(player, cards[0])) {\n      this.keep(player, cards[1]);\n    } else {\n      this.processCard(player, cards[1]);\n    }\n\n    return undefined;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Solarpedia",
  "tags" : [ "space" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 4
  },
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "tag" : "venus"
  }, {
    "tag" : "earth"
  }, {
    "tag" : "mars"
  }, {
    "tag" : "jovian"
  } ],
  "resourceType" : "Data",
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/pathfinders/Solarpedia.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {ActionCard} from '../ActionCard';\n\nexport class Solarpedia extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.SOLARPEDIA,\n      type: CardType.ACTIVE,\n      tags: [Tag.SPACE],\n      cost: 10,\n      requirements: [{tag: Tag.VENUS}, {tag: Tag.EARTH}, {tag: Tag.MARS}, {tag: Tag.JOVIAN}],\n      resourceType: CardResource.DATA,\n      victoryPoints: {resourcesHere: {}, per: 4},\n\n      behavior: {\n        addResourcesToAnyCard: {type: CardResource.DATA, count: 2},\n      },\n\n      action: {\n        addResourcesToAnyCard: {type: CardResource.DATA, count: 2},\n      },\n\n      metadata: {\n        cardNumber: 'Pf54',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 2 data to ANY card.', (ab) => {\n            ab.empty().startAction.resource(CardResource.DATA, 2).asterix();\n          }).br;\n          b.resource(CardResource.DATA, 2).asterix();\n        }),\n        description: 'Requires 1 Venus, Earth, Mars, and Jovian Tag. Add 2 data to ANY card. 1 VP for every 4 data resources here.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Anthozoa",
  "tags" : [ "plant", "animal", "mars" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 7,
  "type" : "active",
  "requirements" : [ {
    "oceans" : 3,
    "count" : 3
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Anthozoa.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IActionCard} from '../ICard';\nimport {Resource} from '../../../common/Resource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class Anthozoa extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ANTHOZOA,\n      cost: 7,\n      tags: [Tag.PLANT, Tag.ANIMAL, Tag.MARS],\n      requirements: {oceans: 3},\n      resourceType: CardResource.ANIMAL,\n      victoryPoints: {resourcesHere: {}, per: 2},\n\n      metadata: {\n        cardNumber: 'Pf55',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 plant to add an animal to this card.', (eb) => {\n            eb.plants(1).startAction.resource(CardResource.ANIMAL);\n          });\n        }),\n        description: 'Requires 3 oceans on Mars. 1 VP per 2 animals on this card.',\n      },\n    });\n  }\n\n\n  public canAct(player: IPlayer) {\n    return player.plants > 0;\n  }\n\n  public action(player: IPlayer) {\n    player.stock.deduct(Resource.PLANTS, 1);\n    player.addResourceTo(this);\n    player.game.log('${0} spent 1 plant to place an animal on ${1}.', (b) => b.player(player).card(this));\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Advanced Power Grid",
  "tags" : [ "power", "building", "mars" ],
  "victoryPoints" : {
    "tag" : "power",
    "per" : 3
  },
  "cost" : 19,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/AdvancedPowerGrid.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class AdvancedPowerGrid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ADVANCED_POWER_GRID,\n      cost: 19,\n      tags: [Tag.POWER, Tag.BUILDING, Tag.MARS],\n      victoryPoints: {tag: Tag.POWER, per: 3},\n\n\n      behavior: {\n        production: {megacredits: {tag: Tag.POWER}, energy: 2},\n      },\n\n      metadata: {\n        cardNumber: 'Pf56',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(2).br.megacredits(1).slash().tag(Tag.POWER));\n        }),\n        description: 'Increase your energy production 2 steps. Increase your Mâ‚¬ production 1 step per power tag you have, including this.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Specialized Settlement",
  "tags" : [ "city", "building", "mars" ],
  "cost" : 20,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/SpecializedSettlement.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {Space} from '../../boards/Space';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SpaceBonus} from '../../../common/boards/SpaceBonus';\nimport {SelectResourceTypeDeferred} from '../../deferredActions/SelectResourceTypeDeferred';\nimport {Units} from '../../../common/Units';\n\nexport class SpecializedSettlement extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.SPECIALIZED_SETTLEMENT,\n      tags: [Tag.CITY, Tag.BUILDING, Tag.MARS],\n      cost: 20,\n\n      metadata: {\n        cardNumber: 'PF57',\n        description: 'Decrease your energy production 1 step and increase your Mâ‚¬ production 3 steps. ' +\n          'Place a city tile on Mars. Increase your production by 1 of a resource on the map gained by placement bonus.',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => {\n            pb.minus().energy(1).br;\n            pb.plus().megacredits(3);\n            pb.plus().wild(1);\n          }).nbsp.city();\n        }),\n      },\n    });\n  }\n\n  public bonusResource?: Array<Resource>;\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return player.production.energy >= 1 &&\n      player.game.board.getAvailableSpacesForCity(player).length > 0;\n  }\n\n  private bonusResources(space: Space) {\n    const resources: Set<Resource> = new Set();\n    space.bonus.forEach((bonus) => {\n      switch (bonus) {\n      case SpaceBonus.STEEL:\n        resources.add(Resource.STEEL);\n        break;\n      case SpaceBonus.TITANIUM:\n        resources.add(Resource.TITANIUM);\n        break;\n      case SpaceBonus.PLANT:\n        resources.add(Resource.PLANTS);\n        break;\n      case SpaceBonus.ENERGY:\n        resources.add(Resource.ENERGY);\n        break;\n      case SpaceBonus.HEAT:\n        resources.add(Resource.HEAT);\n        break;\n      }\n    });\n    return Array.from(resources);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.production.adjust(SpecializedSettlement.defaultProductionBox);\n    return new SelectSpace(\n      'Select space for city tile',\n      player.game.board.getAvailableSpacesForCity(player))\n      .andThen((space) => {\n        const coveringExistingTile = space.tile !== undefined;\n\n        player.game.addCity(player, space);\n\n        if (coveringExistingTile) return;\n        const bonusResources = this.bonusResources(space);\n        if (bonusResources.length === 0) return;\n\n        player.game.defer(new SelectResourceTypeDeferred(\n          player, bonusResources,\n          'Select a resource to gain 1 unit of production'))\n          .andThen(\n            (resource) => {\n              player.production.add(resource, 1, {log: true});\n              this.bonusResource = [resource];\n            },\n          );\n        return undefined;\n      },\n      );\n  }\n\n  private static defaultProductionBox = Units.of({energy: -1, megacredits: 3});\n\n  public productionBox() {\n    const units = {...SpecializedSettlement.defaultProductionBox};\n    if (this.bonusResource && this.bonusResource.length === 1) {\n      units[this.bonusResource[0]] += 1;\n    }\n    return units;\n  }\n\n  public produceForTile(player: IPlayer, bonusResources: Array<Resource>) {\n    if (bonusResources.length === 0) return;\n\n    player.game.defer(new SelectResourceTypeDeferred(\n      player, bonusResources,\n      'Select a resource to gain 1 unit of production'))\n      .andThen(\n        (resource) => {\n          player.production.add(resource, 1, {log: true});\n          this.bonusResource = [resource];\n        },\n      );\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Charity Donation",
  "tags" : [ "mars" ],
  "victoryPoints" : 1,
  "cost" : 6,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/CharityDonation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {LogHelper} from '../../LogHelper';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {DeferredAction} from '../../deferredActions/DeferredAction';\nimport {Priority} from '../../deferredActions/Priority';\n\nexport class CharityDonation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.CHARITY_DONATION,\n      tags: [Tag.MARS],\n      cost: 6,\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'Pf58',\n        renderData: CardRenderer.builder((b) =>\n          b.text('Reveal cards from the deck equal to the player count plus 1.')\n            .br\n            .text('In player order starting with you, each player takes one card in hand. Discard the remaining card.')),\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return player.game.projectDeck.canDraw(player.game.getPlayers().length + 1);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    const players = game.getPlayersInGenerationOrder();\n    const thisIdx = players.findIndex((p) => p === player);\n    const cards = game.projectDeck.drawByConditionOrThrow(game, players.length + 1, () => true);\n    LogHelper.logDrawnCards(player, cards);\n    game.defer(new SelectCharityDonationCard(players, thisIdx, thisIdx, cards));\n    return undefined;\n  }\n}\n\nexport class SelectCharityDonationCard extends DeferredAction {\n  constructor(private players: ReadonlyArray<IPlayer>, private playerIdx: number, private boundaryIndex: number, private cards: Array<IProjectCard>) {\n    super(players[playerIdx], Priority.DRAW_CARDS);\n  }\n\n  public execute() {\n    return new SelectCard(\n      'Select a card to keep',\n      'Choose',\n      this.cards)\n      .andThen(\n        ([card]) => {\n          const game = this.player.game;\n\n          const cardIdx = this.cards.indexOf(card);\n          if (cardIdx > -1) {\n            this.cards.splice(cardIdx, 1);\n          }\n\n          this.player.cardsInHand.push(card);\n          game.log('${0} drew ${1}', (b) => b.player(this.player).card(card));\n\n          const nextIndex = (this.playerIdx + 1) % this.players.length;\n          if (nextIndex !== this.boundaryIndex) {\n            game.defer(new SelectCharityDonationCard(this.players, nextIndex, this.boundaryIndex, this.cards));\n          } else {\n            game.projectDeck.discard(this.cards[0]);\n            game.log('${0} was discarded.', (b) => b.card(this.cards[0]));\n          }\n          return undefined;\n        },\n      );\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Nobel Labs",
  "tags" : [ "science" ],
  "cost" : 8,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/NobelLabs.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IActionCard, ICard} from '../ICard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {digit} from '../Options';\n\nexport class NobelLabs extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.NOBEL_LABS,\n      cost: 8,\n      tags: [Tag.SCIENCE],\n      requirements: {tag: Tag.SCIENCE, count: 4},\n\n      metadata: {\n        cardNumber: 'Pf60',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 2 microbes OR 2 data OR 2 floaters to ANY card.', (eb) => {\n            eb.empty().startAction.resource(CardResource.MICROBE, {amount: 2, digit}).slash().resource(CardResource.DATA, {amount: 2, digit}).slash().resource(CardResource.FLOATER, {amount: 2, digit}).asterix();\n          });\n        }),\n        description: 'Requires 4 science tags.',\n      },\n    });\n  }\n\n  private static RESOURCE_TYPES: Array<CardResource> = [CardResource.MICROBE, CardResource.DATA, CardResource.FLOATER, CardResource.WARE];\n  private static PREDICATE = (card: ICard) => card.resourceType !== undefined && NobelLabs.RESOURCE_TYPES.includes(card.resourceType);\n\n  public canAct(player: IPlayer) {\n    return player.getResourceCards().some(NobelLabs.PREDICATE);\n  }\n\n  public action(player: IPlayer) {\n    player.game.defer(new AddResourcesToCard(player, undefined, {filter: NobelLabs.PREDICATE, count: 2}));\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Huygens Observatory",
  "tags" : [ "science", "space" ],
  "victoryPoints" : 1,
  "cost" : 27,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/pathfinders/HuygensObservatory.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {BuildColony} from '../../deferredActions/BuildColony';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {SelectColony} from '../../inputs/SelectColony';\nimport {IColony} from '../../colonies/IColony';\nimport {ColoniesHandler} from '../../colonies/ColoniesHandler';\n\nexport class HuygensObservatory extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 27,\n      tags: [Tag.SCIENCE, Tag.SPACE],\n      name: CardName.HUYGENS_OBSERVATORY,\n      type: CardType.AUTOMATED,\n      victoryPoints: 1,\n\n      behavior: {\n        tr: 1,\n      },\n\n      metadata: {\n        cardNumber: 'Pf61',\n        renderData: CardRenderer.builder((b) => b.colonies(1).asterix().trade().asterix().tr(1)),\n        description: 'Place a colony. MAY BE PLACED ON A COLONY TILE WHERE YOU ALREADY HAVE A COLONY. ' +\n          'Trade for free. You may use a Trade Fleet that is already on a colony tile, but you may not ' +\n          'trade with the tile that fleet came from. Gain 1 TR.',\n      },\n    });\n  }\n\n  private trade(player: IPlayer, colonies: Array<IColony>) {\n    return new SelectColony('Select colony tile to trade with for free', 'Select', colonies)\n      .andThen((colony) => {\n        colony.trade(player);\n        return undefined;\n      });\n  }\n\n  private tryToTrade(player: IPlayer) {\n    const game = player.game;\n    const tradeableColonies = ColoniesHandler.tradeableColonies(player.game);\n    if (tradeableColonies.length === 0) {\n      game.log(\n        '${0} cannot trade with ${1} because there is no colony they may visit.',\n        (b) => b.player(player).card(this));\n      return;\n    }\n\n    const orOptions = new OrOptions();\n    orOptions.title = 'Select a trade fleet';\n\n    const visitedColonies = game.colonies.filter((colony) => colony.visitor === player.id);\n    const hasFreeTradeFleet = visitedColonies.length < player.colonies.getFleetSize();\n    const tradeInput = this.trade(player, tradeableColonies);\n    if (visitedColonies.length > 0) {\n      orOptions.options.push(\n        new SelectColony(\n          'Select a colony tile to recall a trade fleet from',\n          'OK',\n          visitedColonies)\n          .andThen((colony) => {\n            game.log(\n              '${0} is reusing a trade fleet from ${1}',\n              (b) => b.player(player).colony(colony));\n            colony.visitor = undefined;\n            // TODO(kberg): counting the trades in a generation is not the same as using trade fleets. :[\n            player.colonies.tradesThisGeneration--;\n            player.defer(() => tradeInput);\n            return undefined;\n          }));\n    }\n    if (hasFreeTradeFleet) {\n      if (orOptions.options.length === 1) {\n        orOptions.options.push(new SelectOption('Use an available trade fleet').andThen(() => {\n          player.defer(tradeInput);\n          return undefined;\n        }));\n      } else {\n        player.defer(tradeInput);\n      }\n    }\n    if (orOptions.options.length === 1) {\n      player.defer(orOptions.options[0]);\n    }\n    if (orOptions.options.length > 1) {\n      player.defer(orOptions);\n    }\n  }\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    // NOTE: Don't use canTrade.\n    if (player.game.tradeEmbargo === true) {\n      return false;\n    }\n    if (player.colonies.getPlayableColonies(/** allowDuplicate = */true).length === 0) {\n      return false;\n    }\n    if (ColoniesHandler.tradeableColonies(player.game).length === 0) {\n      return false;\n    }\n    return true;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n\n    if (player.colonies.getPlayableColonies(/** allowDuplicate = */true).length > 0) {\n      game.defer(new BuildColony(player, {\n        allowDuplicate: true,\n        title: 'Select colony for Huygens Observatory',\n      })).andThen(() => this.tryToTrade(player));\n    } else {\n      player.defer(() => this.tryToTrade(player));\n    }\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Cassini Station",
  "tags" : [ "power", "science", "space" ],
  "cost" : 23,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/pathfinders/CassiniStation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {all} from '../Options';\nimport {SelectCard} from '../../inputs/SelectCard';\n\nexport class CassiniStation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.CASSINI_STATION,\n      cost: 23,\n      tags: [Tag.POWER, Tag.SCIENCE, Tag.SPACE],\n\n      behavior: {\n        production: {energy: {colonies: {colonies: {}}, all}},\n      },\n\n      metadata: {\n        cardNumber: 'Pf62',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.energy(1).slash().colonies(1, {all})).br;\n          b.resource(CardResource.FLOATER, 2).asterix().or().br;\n          b.resource(CardResource.DATA, 3).asterix();\n        }),\n        description: 'Increase your energy production 1 step for every colony in play. ' +\n          'Add 2 floaters to ANY card OR add 3 data to ANY card.',\n      },\n    });\n  }\n\n  // TODO(kberg): Repalce this with counter / behavior.\n  public override bespokePlay(player: IPlayer) {\n    const cards = [\n      ...player.getResourceCards(CardResource.FLOATER),\n      ...player.getResourceCards(CardResource.DATA),\n    ];\n\n    if (cards.length === 0) {\n      return undefined;\n    }\n    const input = new SelectCard(\n      'Select card to gain 2 floaters or 3 data',\n      'Add resources',\n      cards)\n      .andThen(([card]) => {\n        if (card.resourceType === CardResource.FLOATER) {\n          player.addResourceTo(card, {qty: 2, log: true});\n        } else {\n          player.addResourceTo(card, {qty: 3, log: true});\n        }\n        return undefined;\n      });\n\n    if (cards.length === 1) {\n      input.cb(cards);\n      return undefined;\n    }\n    return input;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Microbiology Patents",
  "tags" : [ "mars", "microbe" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/MicrobiologyPatents.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Resource} from '../../../common/Resource';\n\nexport class MicrobiologyPatents extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MICROBIOLOGY_PATENTS,\n      cost: 6,\n      tags: [Tag.MARS, Tag.MICROBE],\n\n      metadata: {\n        cardNumber: 'Pf63',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('After you play a card with a microbe tag, increase your Mâ‚¬ production 1 step.',\n            (eb) => eb.tag(Tag.MICROBE).startEffect.production((pb) => pb.megacredits(1)));\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    if (card.tags.includes(Tag.MICROBE)) {\n      player.production.add(Resource.MEGACREDITS, 1, {log: true});\n    }\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Coordinated Raid",
  "tags" : [ ],
  "cost" : 5,
  "type" : "event",
  "requirements" : [ {
    "colonies" : 1,
    "count" : 1
  } ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/pathfinders/CoordinatedRaid.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {Card} from '../Card';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SelectColony} from '../../inputs/SelectColony';\nimport {IColony} from '../../colonies/IColony';\n\nexport class CoordinatedRaid extends Card implements IProjectCard {\n  constructor() {\n    super({\n      cost: 5,\n      name: CardName.COORDINATED_RAID,\n      type: CardType.EVENT,\n      requirements: {colonies: 1},\n\n      metadata: {\n        cardNumber: 'Pf64',\n        renderData: CardRenderer.builder((b) => b.trade().asterix()),\n        // TODO(kberg): restoring this behaivor will be quite a tricky thing, mostly for visualization etc.\n        // description: 'Requires at least 1 colony in play. Send one of your unused Trade Fleets to ANY colony tile (can be a tile already used this generation.) ' +\n        //   'Collect the trade bonus and colony bonus for every colony on this tile. Other players do not get their colony bonuses from this action.',\n        description: 'Requires at least 1 colony in play. Send one of your unused Trade Fleets to any colony tile. ' +\n          'Collect the trade bonus and colony bonus for every colony on this tile. Other players do not get their colony bonuses from this action.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return player.colonies.getFleetSize() > player.colonies.tradesThisGeneration;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const activeColonies = player.game.colonies.filter((colony) => colony.isActive);\n    return new SelectColony('Select colony tile for trade', 'trade', activeColonies)\n      .andThen((colony: IColony) => {\n        colony.trade(player, {selfishTrade: true});\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Lobby Halls",
  "tags" : [ "clone", "building" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/pathfinders/LobbyHalls.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {DeclareCloneTag} from '../../pathfinders/DeclareCloneTag';\nimport {ICloneTagCard} from './ICloneTagCard';\n\nexport class LobbyHalls extends Card implements IProjectCard, ICloneTagCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.LOBBY_HALLS,\n      cost: 11,\n\n      behavior: {\n        production: {megacredits: 2},\n        turmoil: {sendDelegates: {count: 1}},\n      },\n\n      metadata: {\n        cardNumber: 'PfT1',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(2)).delegates(1);\n        }),\n        description: 'Increase your Mâ‚¬ production 2 steps. Place 1 delegate in any party.' +\n                     ' Choose a planet tag. This card counts as having 1 of that tag. Raise the corresponding planetary track 1 step.',\n      },\n    });\n  }\n\n  public cloneTag: Tag = Tag.CLONE;\n\n  public override get tags(): Array<Tag> {\n    return [this.cloneTag, Tag.BUILDING];\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new DeclareCloneTag(player, this));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Red City",
  "tags" : [ "city", "building" ],
  "victoryPoints" : "special",
  "cost" : 21,
  "type" : "automated",
  "requirements" : [ {
    "party" : "Reds"
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/pathfinders/RedCity.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {CardRenderDynamicVictoryPoints} from '../render/CardRenderDynamicVictoryPoints';\nimport {TileType} from '../../../common/TileType';\nimport {PlaceTile} from '../../deferredActions/PlaceTile';\nimport {Board} from '../../boards/Board';\nimport {IProjectCard} from '../IProjectCard';\nimport {message} from '../../logs/MessageBuilder';\nimport {Space} from '../../boards/Space';\nimport {SpaceType} from '../../../common/boards/SpaceType';\nimport {isHazardTileType} from '../../../common/AresTileType';\n\nexport class RedCity extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.RED_CITY,\n      tags: [Tag.CITY, Tag.BUILDING],\n      cost: 21,\n\n      behavior: {\n        production: {energy: -1, megacredits: 2},\n      },\n\n      requirements: {party: PartyName.REDS},\n      victoryPoints: 'special',\n\n      metadata: {\n        cardNumber: 'PFT2',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.minus().energy(1).megacredits(2));\n        }),\n        description: 'Requires that Reds are ruling or that you have 2 delegates there. ' +\n          '-1 energy prod, +2 Mâ‚¬ prod. ' +\n          'Place the special tile on Mars ADJACENT TO NO GREENERY. ' +\n          'NO GREENERY MAY BE PLACED NEXT TO THIS TILE. 1 VP for every empty space (or hazard) next to this tile.',\n        victoryPoints: CardRenderDynamicVictoryPoints.questionmark(),\n      },\n    });\n  }\n\n  private availableRedCitySpaces(player: IPlayer) {\n    const board = player.game.board;\n    const citySpaces = board.getAvailableSpacesForCity(player);\n    return citySpaces.filter((space) => !board.getAdjacentSpaces(space).some(Board.isGreenerySpace));\n  }\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.availableRedCitySpaces(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(\n      new PlaceTile(player, {\n        tile: {tileType: TileType.RED_CITY, card: this.name},\n        on: () => this.availableRedCitySpaces(player),\n        title: message('Select space for ${0}', (b) => b.card(this)),\n      }));\n    return undefined;\n  }\n\n  public override getVictoryPoints(player: IPlayer): number {\n    const space = player.game.board.getSpaceByTileCard(this.name);\n    if (space === undefined) {\n      return 0;\n    }\n\n    const neighbors = player.game.board.getAdjacentSpaces(space);\n    return neighbors.filter((neighbor) => this.isEmpty(neighbor)).length;\n  }\n\n  private isEmpty(space: Space): boolean {\n    return space.spaceType === SpaceType.RESTRICTED || space.tile === undefined || isHazardTileType(space.tile.tileType);\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Venera Base",
  "tags" : [ "venus", "venus", "city" ],
  "victoryPoints" : {
    "tag" : "venus",
    "per" : 2
  },
  "cost" : 21,
  "type" : "active",
  "requirements" : [ {
    "party" : "Unity"
  } ],
  "compatibility" : [ "turmoil", "venus" ],
  "sourceFile" : "src/server/cards/pathfinders/VeneraBase.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {SpaceName} from '../../SpaceName';\nimport {ActionCard} from '../ActionCard';\n\nexport class VeneraBase extends ActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.VENERA_BASE,\n      cost: 21,\n      tags: [Tag.VENUS, Tag.VENUS, Tag.CITY],\n\n      requirements: {party: PartyName.UNITY},\n      victoryPoints: {tag: Tag.VENUS, per: 2},\n\n      behavior: {\n        production: {megacredits: 3},\n        city: {space: SpaceName.VENERA_BASE},\n      },\n\n      action: {\n        addResourcesToAnyCard: {type: CardResource.FLOATER, tag: Tag.VENUS, count: 1, mustHaveCard: true},\n      },\n\n      metadata: {\n        cardNumber: 'Pf67',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 floater to ANY Venus card', (ab) => ab.empty().startAction.resource(CardResource.FLOATER, {secondaryTag: Tag.VENUS}).asterix());\n          b.br;\n          b.production((pb) => pb.megacredits(3)).nbsp.city({secondaryTag: Tag.SPACE}).asterix();\n          b.br;\n          b.vpText('1 VP per 2 Venus tags you have.');\n        }),\n        description: 'Requires Unity is ruling or that you have 2 delegates there. Raise your Mâ‚¬ production 3 steps and place a city tile ON THE RESERVED AREA.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Floater-Urbanism",
  "tags" : [ "venus" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 7,
  "type" : "active",
  "requirements" : [ {
    "tag" : "venus",
    "count" : 4
  } ],
  "resourceType" : "Venusian Habitat",
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/pathfinders/Floater-Urbanism.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Soil Detoxification",
  "tags" : [ "plant", "science" ],
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "party" : "Greens"
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/pathfinders/SoilDetoxification.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {PartyName} from '../../../common/turmoil/PartyName';\n\nexport class SoilDetoxification extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SOIL_DETOXIFICATION,\n      cost: 10,\n      tags: [Tag.PLANT, Tag.SCIENCE],\n\n      requirements: {party: PartyName.GREENS},\n\n      behavior: {\n        production: {plants: 1},\n        greeneryDiscount: 1,\n      },\n\n      metadata: {\n        cardNumber: 'PfTmp',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Using the STANDARD GREENERY ACTION costs 1 plant less.', (eb) => eb.greenery().asterix().startEffect.minus().plants(1)).br;\n          b.production((pb) => pb.plants(1));\n        }),\n        description: 'Requires that Greens are ruling or you have 2 delegates there. Increase your plant production 1 step',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "High Temp. Superconductors",
  "tags" : [ "power", "science" ],
  "cardDiscount" : {
    "tag" : "power",
    "amount" : 3
  },
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "party" : "Kelvinists"
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/pathfinders/HighTemp.Superconductors.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Public Sponsored Grant",
  "tags" : [ ],
  "cost" : 6,
  "type" : "event",
  "requirements" : [ {
    "party" : "Scientists"
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/pathfinders/PublicSponsoredGrant.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {ALL_TAGS, Tag} from '../../../common/cards/Tag';\nimport {PartyName} from '../../../common/turmoil/PartyName';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {all} from '../Options';\nimport {inplaceRemove} from '../../../common/utils/utils';\n\nexport class PublicSponsoredGrant extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.PUBLIC_SPONSORED_GRANT,\n      cost: 6,\n      requirements: {party: PartyName.SCIENTISTS},\n\n      metadata: {\n        cardNumber: 'PfTVD',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().megacredits(2, {all}).br;\n          b.cards(1, {secondaryTag: Tag.WILD}).cards(1, {secondaryTag: Tag.WILD}).asterix();\n        }),\n        description: 'Requires Scientists are ruling or that you have 2 delegates there. All players lose 2Mâ‚¬. Choose a tag (NOT CITY, ? OR PLANETARY TRACK) and draw 2 cards with that tag.',\n      },\n    });\n  }\n\n  private draw2Cards(player: IPlayer, tag: Tag) {\n    player.drawCard(2, {tag: tag});\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.getOpponents().forEach((target) => {\n      target.maybeBlockAttack(player, (proceed) => {\n        if (proceed) {\n          target.stock.deduct(Resource.MEGACREDITS, Math.min(target.megaCredits, 2), {log: true, from: player});\n        }\n        return undefined;\n      });\n    });\n\n    const tags = [...ALL_TAGS];\n    inplaceRemove(tags, Tag.CITY);\n    inplaceRemove(tags, Tag.WILD);\n    inplaceRemove(tags, Tag.CLONE);\n\n    inplaceRemove(tags, Tag.EARTH);\n    inplaceRemove(tags, Tag.JOVIAN);\n    inplaceRemove(tags, Tag.VENUS);\n    inplaceRemove(tags, Tag.MOON);\n    inplaceRemove(tags, Tag.MARS);\n\n    const options = tags.map((tag) => {\n      return new SelectOption(tag).andThen(() => {\n        this.draw2Cards(player, tag);\n        return undefined;\n      });\n    });\n\n    return new OrOptions(...options);\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Pollinators",
  "tags" : [ "plant", "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 19,
  "type" : "active",
  "requirements" : [ {
    "tag" : "plant",
    "count" : 3
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Pollinators.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class Pollinators extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.POLLINATORS,\n      cost: 19,\n      tags: [Tag.PLANT, Tag.ANIMAL],\n      resourceType: CardResource.ANIMAL,\n      requirements: {tag: Tag.PLANT, count: 3},\n      victoryPoints: {resourcesHere: {}},\n\n      behavior: {\n        production: {plants: 1, megacredits: 2},\n      },\n\n      action: {\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: 'PfT9',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Add 1 animal on this card', (ab) => ab.empty().startAction.resource(CardResource.ANIMAL)).br;\n          b.production((pb) => pb.plants(1).megacredits(2));\n          b.vpText('1 VP per animal on this card.');\n        }),\n        description: 'Requires 3 plant tags. Raise your plant production 1 step and your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Social Events",
  "tags" : [ "earth", "mars" ],
  "cost" : 14,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/SocialEvents.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class SocialEvents extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.SOCIAL_EVENTS,\n      cost: 14,\n      tags: [Tag.EARTH, Tag.MARS],\n\n      metadata: {\n        cardNumber: 'PfT10',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(1).slash().tag(Tag.MARS, 2);\n        }),\n        description: 'Gain 1 TR for every 2 Mars tags you have (including this one.)',\n      },\n    });\n  }\n\n  public computeTr(player: IPlayer) {\n    const expectedTr = Math.floor((player.tags.count(Tag.MARS) + 1) / 2); // +1 is the \"including this\";\n    return {tr: expectedTr};\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const steps = this.computeTr(player).tr;\n    player.increaseTerraformRating(steps, {log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Controlled Bloom",
  "tags" : [ "microbe", "plant" ],
  "victoryPoints" : 1,
  "cost" : 13,
  "type" : "event",
  "requirements" : [ {
    "oceans" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/ControlledBloom.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class ControlledBloom extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.CONTROLLED_BLOOM,\n      cost: 13,\n      tags: [Tag.MICROBE, Tag.PLANT],\n      victoryPoints: 1,\n\n      requirements: {oceans: 3},\n\n      behavior: {\n        stock: {plants: 3},\n        addResourcesToAnyCard: {count: 3, type: CardResource.MICROBE},\n      },\n\n      metadata: {\n        cardNumber: 'PFTmp',\n        renderData: CardRenderer.builder((b) => {\n          b.resource(CardResource.MICROBE, 3).asterix().br;\n          b.plants(3);\n        }),\n        description: 'Requires 3 oceans. Add 3 microbes to ANY card. Gain 3 plants.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Terraforming Robots",
  "tags" : [ "science" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 4
  } ],
  "resourceType" : "Specialized Robot",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/TerraformingRobots.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class TerraformingRobots extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.TERRAFORMING_ROBOTS,\n      cost: 10,\n      tags: [Tag.SCIENCE],\n      resourceType: CardResource.SPECIALIZED_ROBOT,\n      requirements: {tag: Tag.SCIENCE, count: 4},\n      victoryPoints: {resourcesHere: {}},\n\n      metadata: {\n        cardNumber: 'PfT12',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When you play a Mars tag, add 1 specialized robot on this card.', (eb) => {\n            eb.tag(Tag.MARS).startEffect.resource(CardResource.SPECIALIZED_ROBOT);\n          }).br;\n          b.vpText('1 VP for every specialized robot on this card.');\n        }),\n        description: 'Requires 4 science tags.',\n      },\n    });\n  }\n\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    const qty = player.tags.cardTagCount(card, Tag.MARS);\n    player.addResourceTo(this, {log: true, qty});\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Polaris",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 32,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Polaris.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all, digit} from '../Options';\nimport {Space} from '../../boards/Space';\nimport {GainResources} from '../../deferredActions/GainResources';\nimport {Priority} from '../../deferredActions/Priority';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Board} from '../../boards/Board';\nimport {Phase} from '../../../common/Phase';\n\nexport class Polaris extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.POLARIS,\n      tags: [Tag.SPACE],\n      startingMegaCredits: 32,\n\n      firstAction: {\n        text: 'Place your initial ocean.',\n        ocean: {},\n      },\n\n      metadata: {\n        cardNumber: 'PfC1',\n        description: 'You start with 32 Mâ‚¬. As your first action, place an ocean tile.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.megacredits(32).oceans(1);\n          b.corpBox('effect', (ce) => {\n            ce.effect('When any ocean tile is placed ON MARS, increase your Mâ‚¬ production 1 step. When you place an ocean tile, gain 4Mâ‚¬.', (eb) => {\n              eb.oceans(1, {size: Size.SMALL, all}).colon().production((pb) => pb.megacredits(1));\n              eb.nbsp;\n              eb.oceans(1, {size: Size.SMALL}).startEffect.megacredits(4, {digit});\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    if (Board.isUncoveredOceanSpace(space)) {\n      // TODO(kberg): Find a way to add Card to addProduction log options.\n      cardOwner.production.add(Resource.MEGACREDITS, 1);\n      activePlayer.game.log(\n        '${0} gained 1 ${1} production from ${2}',\n        (b) => b.player(cardOwner).string(Resource.MEGACREDITS).cardName(this.name));\n      if (activePlayer.id === cardOwner.id && cardOwner.game.phase !== Phase.SOLAR) {\n        cardOwner.game.defer(\n          new GainResources(cardOwner, Resource.MEGACREDITS, {\n            count: 4,\n          }).andThen(() => activePlayer.game.log(\n            '${0} gained ${1} from ${2}',\n            (b) => b.player(cardOwner).string(Resource.MEGACREDITS).cardName(this.name))),\n          cardOwner.id !== activePlayer.id ? Priority.OPPONENT_TRIGGER : undefined,\n        );\n      }\n    }\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Ambient",
  "tags" : [ "venus" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 38,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/pathfinders/Ambient.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {ICorporationCard} from '../corporation/ICorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\nimport {ICard} from '../ICard';\nimport {MAX_TEMPERATURE} from '../../../common/constants';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Units} from '../../../common/Units';\n\nexport class Ambient extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.AMBIENT,\n      tags: [Tag.VENUS],\n      startingMegaCredits: 38,\n\n      firstAction: {\n        text: 'Raise the Venus scale 1 step.',\n        //     LogHelper.logVenusIncrease(player, actual);\n        global: {venus: 1},\n      },\n\n      metadata: {\n        cardNumber: 'PfC3',\n        description: 'You start with 38 Mâ‚¬. As your first action, raise the Venus scale 1 step.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(38).venus(1, {size: Size.SMALL}).br;\n          b.effect('When you play a card with a Venus tag (including this) increase your heat production 1 step.', (eb) => {\n            eb.tag(Tag.VENUS).startEffect.production((pb) => pb.heat(1));\n          }).br;\n          b.action('When temperature is maxed, spend 8 heat gain 1 TR. ' +\n            'You may repeat this action like a standard project.', (ab) => {\n            ab.heat(8, {digit, size: Size.SMALL}).startAction.tr(1, {size: Size.SMALL}).text('âˆž');\n          });\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    this.onCorpCardPlayed(player, this);\n    return undefined;\n  }\n\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard) {\n    this.onCardPlayed(player, card);\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard): void {\n    if (player.isCorporation(this.name) && card.tags.includes(Tag.VENUS)) {\n      player.production.add(Resource.HEAT, 1, {log: true});\n    }\n  }\n\n  public canAct(player: IPlayer) {\n    return player.heat >= 8 && player.game.getTemperature() === MAX_TEMPERATURE && player.canAfford({cost: 0, reserveUnits: Units.of({heat: 8}), tr: {tr: 1}});\n  }\n\n  public action(player: IPlayer) {\n    player.heat -= 8;\n    player.increaseTerraformRating();\n    // A hack that allows this action to be replayable.\n    player.defer(() => {\n      player.getActionsThisGeneration().delete(this.name);\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Ringcom",
  "tags" : [ "jovian" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 40,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Ringcom.ts",
  "sourceCode" : "import {ICorporationCard} from '../corporation/ICorporationCard';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\nimport {ICard} from '../ICard';\n\nexport class Ringcom extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.RINGCOM,\n      tags: [Tag.JOVIAN],\n      startingMegaCredits: 40,\n\n      behavior: {\n        production: {megacredits: 3},\n      },\n\n      firstAction: {\n        text: 'Draw 2 cards with a Jovian tag',\n        drawCard: {count: 2, tag: Tag.JOVIAN},\n      },\n\n\n      metadata: {\n        cardNumber: 'PfC4',\n        description: 'You start with 40 Mâ‚¬. and 3 Mâ‚¬ production. As your first action, draw 2 cards with a Jovian tag.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.megacredits(40).production((pb) => pb.megacredits(3));\n          b.cards(2, {secondaryTag: Tag.JOVIAN});\n          b.corpBox('effect', (ce) => {\n            ce.effect('When any player plays a card with a Jovian tag (including this) gain 1 titanium.', (eb) => {\n              eb.tag(Tag.JOVIAN, {all}).startEffect.titanium(1);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    // Typically  onCardPlayed isn't necessary, but onCorpCardPlayed isn't called for your own corp card.\n    this.onCardPlayed(player, this);\n    return undefined;\n  }\n\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard) {\n    this.onCardPlayed(player, card);\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard): void {\n    if (card.tags.includes(Tag.JOVIAN)) {\n      player.game.getPlayers().forEach((p) => {\n        if (p.isCorporation(this.name)) {\n          p.stock.add(Resource.TITANIUM, 1, {log: true});\n        }\n      });\n    }\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Chimera",
  "tags" : [ "wild", "wild" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 42,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Chimera.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class Chimera extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.CHIMERA,\n      tags: [Tag.WILD, Tag.WILD],\n      startingMegaCredits: 42,\n\n      behavior: {\n        stock: {steel: 1, titanium: 1},\n      },\n\n      metadata: {\n        cardNumber: 'PfC5',\n        description: 'You start with 42 Mâ‚¬, 1 steel, and 1 titanium.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(42).steel(1).titanium(1);\n          b.corpBox('effect', (ce) => {\n            ce.effect('When you perform an action, these wild tags count as any tags of your choice. ' +\n              'For claiming milestones and funding awards, both symbols count as one. ' +\n              '(Other wild tags still do not count toward awards.)',\n            (ce) => ce.tag(Tag.WILD, 2).startEffect.tag(Tag.WILD, 2).slash().tag(Tag.WILD).asterix());\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Soylent Seedling Systems",
  "tags" : [ "science", "plant" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Seed",
  "startingMegaCredits" : 38,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/SoylentSeedlingSystems.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {Space} from '../../boards/Space';\nimport {Board} from '../../boards/Board';\n\nexport class SoylentSeedlingSystems extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.SOYLENT_SEEDLING_SYSTEMS,\n      tags: [Tag.SCIENCE, Tag.PLANT],\n      startingMegaCredits: 38,\n      resourceType: CardResource.SEED,\n\n      behavior: {\n        addResources: 3,\n      },\n\n      metadata: {\n        cardNumber: 'PfC8',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(38).resource(CardResource.SEED, 3).br;\n          b.effect('When you place a greenery tile, add 1 seed resource to this card.', (eb) => {\n            eb.greenery().startEffect.resource(CardResource.SEED);\n          }).br;\n          b.effect('When paying for a plant card, or the STANDARD GREENERY PROJECT, seeds here may be used as 5 Mâ‚¬ each.', (eb) => {\n            eb.tag(Tag.PLANT).slash().greenery().startEffect.resource(CardResource.SEED).equals().megacredits(5);\n          }).br;\n        }),\n        description: 'You start with 38Mâ‚¬ and 3 seeds on this card.',\n      },\n    });\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space) {\n    if (cardOwner.id !== activePlayer.id) {\n      return;\n    }\n    if (Board.isGreenerySpace(space)) {\n      cardOwner.addResourceTo(this, {log: true});\n    }\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Steelaris",
  "tags" : [ "building", "city" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 45,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Steelaris.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\nimport {Space} from '../../boards/Space';\nimport {TileType} from '../../../common/TileType';\nimport {GainStock} from '../../deferredActions/GainStock';\nimport {Priority} from '../../deferredActions/Priority';\nimport {Size} from '../../../common/cards/render/Size';\nimport {BoardType} from '../../boards/BoardType';\nimport {SpaceType} from '../../../common/boards/SpaceType';\nimport {Units} from '../../../common/Units';\n\nexport class Steelaris extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.STEELARIS,\n      tags: [Tag.BUILDING, Tag.CITY],\n      startingMegaCredits: 45,\n      behavior: {\n        stock: {steel: 1, plants: 1},\n      },\n\n      metadata: {\n        cardNumber: 'PfC9',\n        description: 'You start with 45 Mâ‚¬, 1 Steel and 1 Plant.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(45).steel(1).plants(1).br;\n          b.corpBox('effect', (ce) => {\n            ce.effect('When any city or special tile is placed ON MARS, gain 1 steel and 1 plant.', (eb) => {\n              eb.city({size: Size.SMALL, all}).slash().specialTile({size: Size.SMALL, all}).startEffect.steel(1).plants(1);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space, boardType: BoardType) {\n    const game = cardOwner.game;\n    // Does not apply to The Moon.\n    if (boardType !== BoardType.MARS) {\n      return;\n    }\n    if (space.spaceType === SpaceType.COLONY) {\n      return;\n    }\n    const tileType = space.tile?.tileType;\n    if (tileType === TileType.OCEAN || tileType === TileType.GREENERY) {\n      return;\n    }\n    game.defer(\n      new GainStock(cardOwner, Units.of({steel: 1, plants: 1}), {\n        cb: () => game.log(\n          '${0} gained 1 ${1} and 1 ${2} from ${3}',\n          (b) => b.player(cardOwner).string(Resource.STEEL).string(Resource.PLANTS).cardName(this.name)),\n      }),\n      cardOwner.id !== activePlayer.id ? Priority.OPPONENT_TRIGGER : undefined,\n    );\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Mars Maths",
  "tags" : [ "science" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 42,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/MarsMaths.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class MarsMaths extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.MARS_MATHS,\n      tags: [Tag.SCIENCE],\n      startingMegaCredits: 42,\n\n      firstAction: {\n        text: 'Draw 2 cards',\n        drawCard: {count: 2},\n      },\n\n      metadata: {\n        cardNumber: 'PfC10',\n        description: 'You start with 42 Mâ‚¬. As your first action, draw 2 cards',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(42).nbsp.cards(2).br;\n          b.effect('At the beginning of the Research phase, you draw 5 cards, but may STILL only buy 4 cards. If you are drafting, keep 2 cards for your first draft.', (eb) => {\n            eb.empty().startEffect.plus().cards(1).asterix();\n          }).br;\n          b.action('Take another two actions this turn.', (eb) => {\n            eb.empty().startAction.colon().nbsp.arrow().arrow();\n          });\n        }),\n      },\n    });\n  }\n\n  public canAct() {\n    return true;\n  }\n\n  public action(player: IPlayer) {\n    player.availableActionsThisRound += 2;\n    return undefined;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Mars Direct",
  "tags" : [ "mars" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 52,
  "compatibility" : [ "pathfinders" ],
  "sourceFile" : "src/server/cards/pathfinders/MarsDirect.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {IPlayer} from '../../IPlayer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\n// TODO(kberg): This card is actually different: it uses resources to track on this card, which\n// means this result can be changed by cards like CEO's Favorite Project.\n// It also means cards with a wild tag may impact this.\nexport class MarsDirect extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.MARS_DIRECT,\n      tags: [Tag.MARS],\n      startingMegaCredits: 52,\n\n      metadata: {\n        description: 'You start with 52 Mâ‚¬.',\n        cardNumber: 'PFC11',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(52).br;\n          b.corpBox('effect', (ce) => {\n            ce.effect('When you play a Mars tag, you pay 1 Mâ‚¬ less for each Mars tag you have.', (eb) => {\n              eb.tag(Tag.MARS).startEffect.megacredits(1).slash().tag(Tag.MARS);\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public override getCardDiscount(player: IPlayer, card: IProjectCard) {\n    if (card.tags.indexOf(Tag.MARS) === -1) {\n      return 0;\n    }\n    return player.tags.count(Tag.MARS);\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Martian Insurance Group",
  "tags" : [ "mars" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 42,
  "compatibility" : [ "pathfinders" ],
  "sourceFile" : "src/server/cards/pathfinders/MartianInsuranceGroup.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class MartianInsuranceGroup extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.MARTIAN_INSURANCE_GROUP,\n      tags: [Tag.MARS],\n      startingMegaCredits: 42,\n\n      behavior: {\n        production: {megacredits: 1},\n      },\n\n      metadata: {\n        cardNumber: 'PfC12',\n        description: 'You start with 42 Mâ‚¬ and 1 Mâ‚¬ production.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.megacredits(42).production((pb) => pb.megacredits(1));\n          b.corpBox('effect', (ce) => {\n            ce.effect('Whenever you play an event card, raise your Mâ‚¬ production 1 step.', (eb) => {\n              eb.tag(Tag.EVENT).startEffect.production((pb) => pb.megacredits(1));\n            });\n          });\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard): void {\n    if (player.isCorporation(this.name) && card.type === CardType.EVENT) {\n      player.production.add(Resource.MEGACREDITS, 1, {log: true});\n    }\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "SolBank",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Data",
  "startingMegaCredits" : 36,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/SolBank.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {IPlayer} from '../../IPlayer';\n\nexport class SolBank extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.SOLBANK,\n      startingMegaCredits: 36,\n      resourceType: CardResource.DATA,\n\n      metadata: {\n        cardNumber: 'PfC13',\n        description: 'You start with 36 Mâ‚¬',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(36).br;\n          b.effect('Whenever you spend Mâ‚¬ (or steel or titanium) add 1 data to this card.', (eb) =>\n            eb.minus().megacredits(1).slash().steel(1).slash().titanium(1).startEffect.resource(CardResource.DATA));\n          b.br;\n          b.effect('During the production phase convert each data from this card into 2Mâ‚¬ each.', (eb) => eb.resource(CardResource.DATA).asterix().startEffect.megacredits(1));\n        }),\n      },\n    });\n  }\n\n  // Behavior is in Pathfinders.addToSolBank.\n  public onProductionPhase(player: IPlayer): undefined {\n    player.megaCredits += this.resourceCount*2;\n    this.resourceCount = 0;\n    return undefined;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Bio-Sol",
  "tags" : [ "microbe" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Microbe",
  "startingMegaCredits" : 42,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Bio-Sol.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Aurorai",
  "tags" : [ "mars" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Data",
  "startingMegaCredits" : 33,
  "compatibility" : [ "pathfinders" ],
  "sourceFile" : "src/server/cards/pathfinders/Aurorai.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {Priority} from '../../deferredActions/Priority';\n\nexport class Aurorai extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.AURORAI,\n      tags: [Tag.MARS],\n      startingMegaCredits: 33,\n      resourceType: CardResource.DATA,\n\n      behavior: {\n        addResources: 5,\n      },\n\n      metadata: {\n        cardNumber: 'PfC15',\n        description: 'You start with 33 Mâ‚¬. and 5 data on this card',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(33).resource(CardResource.DATA, 2).br;\n          b.effect('Whenever you increase your terraform rating, add 1 data per step to ANY card.', (eb) => {\n            eb.tr(1).startEffect.resource(CardResource.DATA).asterix();\n          }).br;\n          b.effect('You can use data on this card as 3Mâ‚¬ each to pay for standard projects.', (eb) => {\n            eb.resource(CardResource.DATA).startEffect.megacredits(3).asterix().text('standard project');\n          });\n        }),\n      },\n    });\n  }\n\n  public onIncreaseTerraformRating(player: IPlayer, cardOwner: IPlayer, steps: number) {\n    if (player === cardOwner) {\n      player.game.defer(new AddResourcesToCard(player, CardResource.DATA, {count: steps}), Priority.GAIN_RESOURCE_OR_PRODUCTION);\n    }\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Collegium Copernicus",
  "tags" : [ "science", "earth" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Data",
  "startingMegaCredits" : 35,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/pathfinders/CollegiumCopernicus.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {ICorporationCard} from '../corporation/ICorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IActionCard, ICard} from '../ICard';\nimport {CardResource} from '../../../common/CardResource';\nimport {ColoniesHandler} from '../../colonies/ColoniesHandler';\nimport {SelectColony} from '../../inputs/SelectColony';\nimport {IColonyTrader} from '../../colonies/IColonyTrader';\nimport {IColony} from '../../colonies/IColony';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {message} from '../../logs/MessageBuilder';\n\nfunction tradeCost(player: IPlayer) {\n  return Math.max(0, 3 - player.colonies.tradeDiscount);\n}\nexport class CollegiumCopernicus extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.COLLEGIUM_COPERNICUS,\n      tags: [Tag.SCIENCE, Tag.EARTH],\n      startingMegaCredits: 35,\n      resourceType: CardResource.DATA,\n\n      behavior: {\n        addResourcesToAnyCard: {count: 1, type: CardResource.DATA},\n      },\n\n      firstAction: {\n        text: 'Draw 2 cards with a science tag',\n        drawCard: {count: 2, tag: Tag.SCIENCE},\n      },\n\n      metadata: {\n        cardNumber: 'PfC16',\n        description: 'You start with 35 Mâ‚¬. As your first action, draw 2 cards with a science tag.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.megacredits(35).cards(2, {secondaryTag: Tag.SCIENCE}).br;\n          b.effect('When you play a card with a science tag (including this) Add 1 data to ANY card.', (eb) => {\n            eb.tag(Tag.SCIENCE).startEffect.resource(CardResource.DATA).asterix();\n          }).br;\n          b.action('Spend 3 data from this card to trade.', (eb) => {\n            eb.resource(CardResource.DATA, 3).startAction.trade();\n          });\n        }),\n      },\n    });\n  }\n\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard) {\n    this.onCardPlayed(player, card);\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard): void {\n    if (player.tags.cardHasTag(card, Tag.SCIENCE) && player.isCorporation(this.name)) {\n      player.game.defer(new AddResourcesToCard(player, CardResource.DATA, {count: 1}));\n    }\n  }\n\n  public canAct(player: IPlayer) {\n    return player.colonies.canTrade() && this.resourceCount >= tradeCost(player);\n  }\n\n  public action(player: IPlayer) {\n    const game = player.game;\n    player.defer(\n      new SelectColony('Select colony tile to trade with', 'Select', ColoniesHandler.tradeableColonies(game))\n        .andThen((colony) => {\n          tradeWithColony(this, player, colony);\n          return undefined;\n        }),\n    );\n    return undefined;\n  }\n}\n\nexport function tradeWithColony(card: ICorporationCard, player: IPlayer, colony: IColony) {\n  const cost = tradeCost(player);\n  card.resourceCount -= cost;\n  player.game.log('${0} spent ${1} data from ${2} to trade with ${3}', (b) => b.player(player).number(cost).card(card).colony(colony));\n  colony.trade(player);\n}\nexport class TradeWithCollegiumCopernicus implements IColonyTrader {\n  private collegiumCopernicus: ICorporationCard | undefined;\n\n  constructor(private player: IPlayer) {\n    this.collegiumCopernicus = player.getCorporation(CardName.COLLEGIUM_COPERNICUS);\n  }\n\n  public canUse() {\n    return (this.collegiumCopernicus?.resourceCount ?? 0) >= tradeCost(this.player) &&\n      !this.player.getActionsThisGeneration().has(CardName.COLLEGIUM_COPERNICUS);\n  }\n\n  public optionText() {\n    return message('Pay ${0} data (use ${1} action)', (b) => b.number(tradeCost(this.player)).cardName(CardName.COLLEGIUM_COPERNICUS));\n  }\n\n  public trade(colony: IColony) {\n    this.player.addActionThisGeneration(CardName.COLLEGIUM_COPERNICUS);\n    if (this.collegiumCopernicus !== undefined) {\n      tradeWithColony(this.collegiumCopernicus, this.player, colony);\n    }\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Robin Haulings",
  "tags" : [ "mars", "venus" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Floater",
  "startingMegaCredits" : 45,
  "compatibility" : [ "venus", "pathfinders" ],
  "sourceFile" : "src/server/cards/pathfinders/RobinHaulings.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\nimport {digit} from '../Options';\nimport {IProjectCard} from '../IProjectCard';\nimport {MAX_OXYGEN_LEVEL, MAX_VENUS_SCALE} from '../../../common/constants';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\n\nexport class RobinHaulings extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.ROBIN_HAULINGS,\n      tags: [Tag.MARS, Tag.VENUS],\n      startingMegaCredits: 45,\n      resourceType: CardResource.FLOATER,\n\n      behavior: {\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: 'PfC17',\n        description: 'You start with 45 Mâ‚¬.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(45).br;\n          b.effect('Whenever you play a card with a Venus tag add 1 floater to ANY card.', (eb) => {\n            eb.tag(Tag.VENUS).startEffect.resource(CardResource.FLOATER).asterix();\n          });\n          b.br;\n          b.action('Remove 3 floaters from this card to raise Venus 1 step or raise oxygen 1 step', (ab) => {\n            ab.resource(CardResource.FLOATER, {amount: 3, digit}).startAction.venus(1).or().oxygen(1);\n          });\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    if (player.isCorporation(CardName.ROBIN_HAULINGS) && card.tags.includes(Tag.VENUS)) {\n      player.game.defer(new AddResourcesToCard(player, CardResource.FLOATER));\n    }\n  }\n\n  private canRaiseVenus(player: IPlayer) {\n    return player.game.getVenusScaleLevel() < MAX_VENUS_SCALE && player.canAfford({cost: 0, tr: {venus: 1}});\n  }\n\n  private canRaiseOxygen(player: IPlayer) {\n    return player.game.getOxygenLevel() < MAX_OXYGEN_LEVEL && player.canAfford({cost: 0, tr: {oxygen: 1}});\n  }\n\n  public canAct(player: IPlayer) {\n    if (this.resourceCount < 3) return false;\n    return this.canRaiseVenus(player) || this.canRaiseOxygen(player);\n  }\n\n  public action(player: IPlayer) {\n    const options = new OrOptions();\n    if (this.canRaiseVenus(player)) {\n      options.options.push(\n        new SelectOption('Spend 3 floaters to raise Venus 1 step')\n          .andThen(() => {\n            player.game.increaseVenusScaleLevel(player, 1);\n            this.resourceCount -= 3;\n            return undefined;\n          }));\n    }\n    if (this.canRaiseOxygen(player)) {\n      options.options.push(\n        new SelectOption('Spend 3 floaters to raise oxygen 1 step')\n          .andThen(() => {\n            player.game.increaseOxygenLevel(player, 1);\n            this.resourceCount -= 3;\n            return undefined;\n          }));\n    }\n\n    if (options.options.length === 0) {\n      return undefined;\n    }\n    if (options.options.length === 1) {\n      return options.options[0];\n    }\n    return options;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Odyssey",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 42,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/Odyssey.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IActionCard} from '../ICard';\nimport {Size} from '../../../common/cards/render/Size';\nimport {SelectProjectCardToPlay} from '../../inputs/SelectProjectCardToPlay';\n\nexport class Odyssey extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.ODYSSEY,\n      startingMegaCredits: 42,\n\n      metadata: {\n        cardNumber: 'PfC18',\n        description: 'You start with 42 Mâ‚¬.',\n        renderData: CardRenderer.builder((b) => {\n          b.br.br.br.br.br.br.megacredits(42).nbsp.nbsp.nbsp;\n          b.colon().cards(1, {secondaryTag: Tag.EVENT}).asterix().br;\n          b.text('(Effect: Your event cards stay face up, and their tags are in use as if those were automated (green) cards.)',\n            Size.TINY, false, false).br;\n          b.action('Pay for and play an event card you have already played that has a base cost of 16Mâ‚¬ or less (INCLUDING events that place special tiles,) after which discard that card.', (e) => {\n            e.empty().startAction.tag(Tag.EVENT).asterix().nbsp.text('â‰¤').nbsp.megacredits(16);\n          });\n        }),\n      },\n    });\n  }\n\n  // For Project Inspection\n  private checkLoops: number = 0;\n\n  public getCheckLoops(): number {\n    return this.checkLoops;\n  }\n\n\n  private availableEventCards(player: IPlayer) {\n    this.checkLoops++;\n    try {\n      const array = [];\n      for (const card of player.playedCards) {\n        // Special case Price Wars, which is not easy to work with.\n        if (card.name === CardName.PRICE_WARS) {\n          continue;\n        }\n        if (card.type === CardType.EVENT && card.cost <= 16) {\n          const details = player.canPlay(card);\n          if (details !== false) {\n            array.push({card, details});\n          }\n        }\n      }\n      return array;\n    } finally {\n      this.checkLoops--;\n    }\n  }\n\n  public canAct(player: IPlayer) {\n    return this.availableEventCards(player).length > 0;\n  }\n\n  public action(player: IPlayer) {\n    const eventCards = this.availableEventCards(player);\n    return new SelectProjectCardToPlay(player, eventCards, {action: 'discard'})\n      .andThen((card) => {\n        player.removedFromPlayCards.push(card);\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Gagarin Mobile Base",
  "tags" : [ "science" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 46,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/GagarinMobileBase.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {SpaceType} from '../../../common/boards/SpaceType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Space} from '../../boards/Space';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {IActionCard} from '../ICard';\nimport {BoardType} from '../../boards/BoardType';\nimport {Board} from '../../boards/Board';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class GagarinMobileBase extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.GAGARIN_MOBILE_BASE,\n      tags: [Tag.SCIENCE],\n      startingMegaCredits: 46,\n      initialActionText: 'Place Gagarin Mobile Base on ANY space ON MARS',\n\n      metadata: {\n        cardNumber: 'PfC19',\n        description: 'You start with 46 Mâ‚¬. As your first action, put Gagarin Mobile Base on ANY area on Mars. Collect the bonus.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(46).br;\n          b.action('Move the Base to ANY nearest empty area where it has not yet been. Collect the bonus.', (ab) =>\n            ab.empty().startAction.text('move').asterix());\n          b.br;\n          b.effect('When another player places a tile where the Base is, move the Base.', (eb) =>\n            eb.emptyTile().startEffect.text('move').asterix());\n          b.br;\n        }),\n      },\n    });\n  }\n\n  private closestSpaces(board: Board, availableSpaces: Array<Space>, space: Space): Array<Space> {\n    const visitedSpaces = new Set<Space>();\n\n    function searchSet(spaces: Set<Space>): Array<Space> {\n      if (spaces.size === 0) {\n        return [];\n      }\n      const adjacentSpaces = new Set(Array.from(spaces).map((s) => board.getAdjacentSpaces(s)).flat());\n      const sizeBefore = visitedSpaces.size;\n      adjacentSpaces.forEach((s) => visitedSpaces.add(s));\n      const sizeAfter = visitedSpaces.size;\n      if (sizeBefore === sizeAfter) {\n        return [];\n      }\n\n      const candidateSpaces = [...adjacentSpaces].filter((s) => availableSpaces.includes(s));\n      if (candidateSpaces.length > 0) {\n        return candidateSpaces;\n      }\n      return searchSet(adjacentSpaces);\n    }\n\n    visitedSpaces.add(space);\n    return searchSet(new Set([space]));\n  }\n\n  private availableSpaces(player: IPlayer) {\n    const board = player.game.board;\n    const visited = player.game.gagarinBase;\n    const availableSpaces = board.spaces\n      .filter((space) => space.spaceType !== SpaceType.COLONY)\n      .filter((space) => space.spaceType !== SpaceType.RESTRICTED)\n      .filter((space) => space.tile === undefined)\n      .filter((space) => !visited.includes(space.id));\n\n    if (visited[0] === undefined) {\n      return availableSpaces;\n    }\n    const currentSpace = board.getSpaceOrThrow(visited[0]);\n    return this.closestSpaces(board, availableSpaces, currentSpace);\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return this.availableSpaces(player).length > 0;\n  }\n\n  public action(player: IPlayer) {\n    const spaces = this.availableSpaces(player);\n    if (spaces.length > 0) {\n      return new SelectSpace(\n        message('Select new space for ${0}', (b) => b.card(this)), this.availableSpaces(player))\n        .andThen((space) => {\n          player.game.gagarinBase.unshift(space.id);\n          player.game.grantSpaceBonuses(player, space);\n          return undefined;\n        });\n    }\n    return undefined;\n  }\n\n  public initialAction(player: IPlayer) {\n    return this.action(player);\n  }\n\n  public onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space, boardType: BoardType) {\n    if (boardType === BoardType.MOON) {\n      return;\n    }\n    if (cardOwner === activePlayer) {\n      return;\n    }\n    if (space.id === activePlayer.game.gagarinBase[0]) {\n      cardOwner.defer(this.action(cardOwner));\n    }\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Mars Frontier Alliance",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 40,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/pathfinders/MarsFrontierAlliance.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../../server/IPlayer';\nimport {PlayerInput} from '../../../server/PlayerInput';\nimport {Turmoil} from '../../turmoil/Turmoil';\nimport {ChooseAlliedParty} from '../../../server/deferredActions/ChooseAlliedParty';\n\nexport class MarsFrontierAlliance extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.MARS_FRONTIER_ALLIANCE,\n      tags: [],\n      startingMegaCredits: 40,\n\n      metadata: {\n        cardNumber: 'PfC20',\n        description:\n          'You start with 40 Mâ‚¬. When you reveal this card, select any remaining political program tile (you may use its effect as a passive effect of your corporation or as ruling party this generation).',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(40).nbsp.policy().br;\n          b.effect(\n            'After new ruling party is chosen, place the political program tile of the second most popular party on this card (you may use its effect as a passive effect of your corporation or as ruling party this generation).',\n            (eb) => {\n              eb.empty().startEffect.plus().policy().asterix();\n            },\n          ).br;\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer): PlayerInput | undefined {\n    const game = player.game;\n    const turmoil = Turmoil.getTurmoil(game);\n\n    game.defer(new ChooseAlliedParty(player, turmoil.parties, (selectedParty) => {\n      player.setAlliedParty(selectedParty);\n    }));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Mind Set Mars",
  "tags" : [ ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Agenda",
  "startingMegaCredits" : 44,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/pathfinders/MindSetMars.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\nimport {CardResource} from '../../../common/CardResource';\nimport {IPlayer} from '../../IPlayer';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {SendDelegateToArea} from '../../deferredActions/SendDelegateToArea';\nimport {Turmoil} from '../../turmoil/Turmoil';\nimport {PlaceCityTile} from '../../deferredActions/PlaceCityTile';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class MindSetMars extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.MIND_SET_MARS,\n      startingMegaCredits: 44,\n      resourceType: CardResource.AGENDA,\n      behavior: {\n        addResources: 3,\n      },\n\n      metadata: {\n        cardNumber: 'PfC21',\n        description: 'You start with 44 Mâ‚¬ and 3 agenda resource to this card.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.megacredits(44).resource(CardResource.AGENDA).nbsp.tag(Tag.BUILDING).colon(Size.SMALL).resource(CardResource.AGENDA).br;\n          b.text('(Action: When you play a card with a building tag, add 1 agenda on this card.)', Size.SMALL, false, false).br;\n          b.resource(CardResource.AGENDA, {amount: 2, digit}).arrow(Size.SMALL).delegates(1).nbsp;\n          b.resource(CardResource.AGENDA, {amount: 5, digit}).arrow(Size.SMALL).city().br;\n          b.text('(Action: Spend 2 agenda resources to place 1 delegate in any party.)', Size.SMALL, false, false).br;\n          b.text('(Action: Spend 5 agenda resources to place a city tile on Mars.)', Size.SMALL, false, false);\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    if (player.game.getCardPlayerOrUndefined(this.name) !== player) return;\n    if (card.tags.includes(Tag.BUILDING)) {\n      player.addResourceTo(this, {qty: 1, log: true});\n    }\n  }\n\n  private canAddDelegate(player: IPlayer) {\n    const turmoil = Turmoil.getTurmoil(player.game);\n    return this.resourceCount >= 2 && turmoil.getAvailableDelegateCount(player) > 0;\n  }\n\n  private canAddCity(player: IPlayer) {\n    return this.resourceCount >= 5 && player.game.board.getAvailableSpacesForCity(player).length > 0;\n  }\n  public canAct(player: IPlayer) {\n    return this.canAddDelegate(player) || this.canAddCity(player);\n  }\n\n  public action(player: IPlayer) {\n    const options = new OrOptions();\n\n    if (this.canAddDelegate(player)) {\n      options.options.push(new SelectOption('Spend 2 agendas to add a delegate to any party').andThen(() => {\n        player.removeResourceFrom(this, 2);\n        player.game.defer(new SendDelegateToArea(player));\n        return undefined;\n      }));\n    }\n    if (this.canAddCity(player)) {\n      options.options.push(new SelectOption('Spend 5 agendas to place a city on Mars').andThen(() => {\n        player.removeResourceFrom(this, 5);\n        player.game.defer(new PlaceCityTile(player));\n        return undefined;\n      }));\n    }\n    if (options.options.length === 0) {\n      return undefined;\n    }\n    if (options.options.length === 1) {\n      return options.options[0];\n    }\n    return options;\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Habitat Marte",
  "tags" : [ "mars", "mars" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 42,
  "compatibility" : [ "pathfinders" ],
  "sourceFile" : "src/server/cards/pathfinders/HabitatMarte.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\n\nexport class HabitatMarte extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.HABITAT_MARTE,\n      tags: [Tag.MARS, Tag.MARS],\n      startingMegaCredits: 42,\n\n      firstAction: {\n        text: 'Draw 2 cards with a Mars tag',\n        drawCard: {count: 2, tag: Tag.MARS},\n      },\n\n      metadata: {\n        cardNumber: 'PfC22',\n        description: 'You start with 42 Mâ‚¬.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(42).nbsp.cards(2, {secondaryTag: Tag.MARS});\n          b.corpBox('effect', (ce) => {\n            ce.effect('Mars tags also count as science tags.', (eb) => {\n              eb.tag(Tag.MARS).startEffect.tag(Tag.SCIENCE);\n            });\n          });\n        }),\n      },\n    });\n  }\n  // Behavior in Player.getTagCount\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Adhai High Orbit Constructions",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Orbital",
  "startingMegaCredits" : 40,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/pathfinders/AdhaiHighOrbitConstructions.ts",
  "sourceCode" : "import {CorporationCard} from '../corporation/CorporationCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {IProjectCard} from '../IProjectCard';\nimport {isPlanetaryTag} from '../../pathfinders/PathfindersData';\nimport {Size} from '../../../common/cards/render/Size';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\n\nexport class AdhaiHighOrbitConstructions extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.ADHAI_HIGH_ORBIT_CONSTRUCTIONS,\n      tags: [Tag.SPACE],\n      startingMegaCredits: 40,\n      resourceType: CardResource.ORBITAL,\n\n      behavior: {\n        // This is the onCardPlayed effect.\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: 'PfC23',\n        description: 'You start with 40 Mâ‚¬.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(40).nbsp.nbsp.tag(Tag.SPACE, {secondaryTag: AltSecondaryTag.NO_PLANETARY_TAG}).colon().resource(CardResource.ORBITAL).br;\n          b.text('(Effect: Whenever you play a card with a space tag BUT NO PLANETARY TAG (including this) add 1 orbital on this card.)', Size.SMALL, false, false);\n          b.br;\n          b.effect('For every orbital on this card, cards with a space tag but with no planetary tag or the STANDARD COLONY PROJECT or TRADE ACTION costs 1Mâ‚¬ less.', (eb) => {\n            eb.tag(Tag.SPACE, {secondaryTag: AltSecondaryTag.NO_PLANETARY_TAG}).slash(Size.SMALL).colonies(1, {size: Size.SMALL}).slash(Size.SMALL).trade({size: Size.SMALL})\n              .startEffect\n              .minus().megacredits(1).text('/1').resource(CardResource.ORBITAL);\n          });\n        }),\n      },\n    });\n  }\n\n\n  private matchingTags(tags: Array<Tag>): boolean {\n    let spaceTag = false;\n    for (const tag of tags) {\n      if (tag === Tag.SPACE) spaceTag = true;\n      if (isPlanetaryTag(tag)) return false;\n    }\n    return spaceTag;\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    if (player.isCorporation(CardName.ADHAI_HIGH_ORBIT_CONSTRUCTIONS) && this.matchingTags(card.tags)) {\n      player.addResourceTo(this, 1);\n    }\n  }\n\n  // TODO(kberg): it's not possible to make this a cardDiscount type, which just means rendering is tricky.\n  public override getCardDiscount(player: IPlayer, card: IProjectCard) {\n    if (player.isCorporation(CardName.ADHAI_HIGH_ORBIT_CONSTRUCTIONS) && this.matchingTags(card.tags)) {\n      return Math.floor(this.resourceCount / 1);\n    } else {\n      return 0;\n    }\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Venus First",
  "tags" : [ "venus" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/pathfinders/VenusFirst.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class VenusFirst extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.VENUS_FIRST,\n      tags: [Tag.VENUS],\n\n      behavior: {\n        drawCard: {count: 2, tag: Tag.VENUS},\n        global: {venus: 2},\n      },\n\n      metadata: {\n        cardNumber: 'PfP01',\n        renderData: CardRenderer.builder((b) => {\n          b.venus(2).br.br;\n          b.cards(2, {secondaryTag: Tag.VENUS});\n        }),\n        description: 'Raise Venus 2 steps. Draw 2 Venus cards.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "Valuable Gases:Pathfinders",
  "tags" : [ "jovian", "venus" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/pathfinders/ValuableGases:Pathfinders.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "COÂ² Reducers",
  "tags" : [ "microbe", "venus" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/pathfinders/COÂ²Reducers.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Hydrogen Bombardment",
  "tags" : [ "space", "venus" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 6,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/pathfinders/HydrogenBombardment.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class HydrogenBombardment extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.HYDROGEN_BOMBARDMENT,\n      tags: [Tag.SPACE, Tag.VENUS],\n      behavior: {\n        production: {titanium: 1},\n        global: {venus: 1},\n        stock: {megacredits: 6},\n      },\n\n      metadata: {\n        cardNumber: 'PfP04',\n        renderData: CardRenderer.builder((b) => {\n          b.venus(1).br;\n          b.production((pb) => pb.titanium(1)).br;\n          b.megacredits(6);\n        }),\n        description: 'Increase the Venus scale 1 step. Increase your titanium production 1 step. Gain 6 Mâ‚¬.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Research Grant:Pathfinders",
  "tags" : [ "science", "science" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 14,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/ResearchGrant:Pathfinders.ts",
  "sourceCode" : ""
}, {
  "module" : "pathfinders",
  "name" : "Crew Training",
  "tags" : [ "clone", "clone" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "pathfinders" ],
  "sourceFile" : "src/server/cards/pathfinders/CrewTraining.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ICloneTagCard} from './ICloneTagCard';\nimport {DeclareCloneTag} from '../../pathfinders/DeclareCloneTag';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class CrewTraining extends PreludeCard implements ICloneTagCard {\n  constructor() {\n    super({\n      name: CardName.CREW_TRAINING,\n\n      behavior: {\n        tr: 2,\n      },\n\n      metadata: {\n        cardNumber: 'PfP06',\n        renderData: CardRenderer.builder((b) => {\n          b.planetaryTrack().text('2')\n            .tag(Tag.VENUS).or(Size.SMALL)\n            .tag(Tag.EARTH).or(Size.SMALL).br;\n          b.tag(Tag.MARS).or(Size.SMALL)\n            .tag(Tag.JOVIAN).or(Size.SMALL)\n            .tag(Tag.MOON).br;\n\n          b.tr(2);\n        }),\n        description: 'Choose a planet tag. This card counts as having 2 of that tag. ' +\n          'Raise the corresponding planetary track 2 steps. Gain 2 TR.',\n      },\n    });\n  }\n\n  public cloneTag: Tag = Tag.CLONE;\n\n  public override get tags(): Array<Tag> {\n    return [this.cloneTag, this.cloneTag];\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new DeclareCloneTag(player, this));\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Survey Mission",
  "tags" : [ "mars" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/SurveyMission.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {MarsBoard} from '../../boards/MarsBoard';\nimport {BoardType} from '../../boards/BoardType';\nimport {Space} from '../../boards/Space';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {LogHelper} from '../../LogHelper';\nimport {digit} from '../Options';\n\ntype Triplet = [Space, Space, Space];\nexport class SurveyMission extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.SURVEY_MISSION,\n      tags: [Tag.MARS],\n\n      behavior: {\n        stock: {steel: 5},\n      },\n\n      metadata: {\n        cardNumber: 'PfP07',\n        renderData: CardRenderer.builder((b) => {\n          b.steel(5, {digit});\n          b.br;\n          b.surveyMission();\n        }),\n        description: 'Gain 5 steel. Land-claim three non-reserved spaces in a triangle shape. Gain all placement bonuses. ' +\n          'Only you may place tiles there, and will gain placement bonuses again.',\n      },\n    });\n  }\n\n  private validTriplets(board: MarsBoard): Array<Triplet> {\n    const spaces = board.getNonReservedLandSpaces().filter((space) => {\n      return space.player === undefined && (space.tile === undefined || space.tile.protectedHazard === true);\n    });\n\n    const result: Array<Triplet> = [];\n\n    function validAdjacentSpace(s1: Space, s2: Space) {\n      // Ignore spaces before or above, those were covered earlier.\n      // This is not just an optimization but also prevents storing\n      // multiple triplets with the same spaces, but in a different order.\n      if (s2.id < s1.id) return false;\n      return spaces.includes(s2);\n    }\n\n    spaces.forEach((space) => {\n      const adjacentSpaces = board.getAdjacentSpaces(space).filter((adjacent) => validAdjacentSpace(space, adjacent));\n      for (let idx1 = 0; idx1 <= adjacentSpaces.length - 2; idx1++) {\n        const n1 = adjacentSpaces[idx1];\n        if (n1 === undefined) throw new Error('');\n        for (let idx2 = idx1 + 1; idx2 <= adjacentSpaces.length - 1; idx2++) {\n          const n2 = adjacentSpaces[idx2];\n          if (n2 === undefined) throw new Error('');\n          if (board.getAdjacentSpaces(n1).includes(n2)) {\n            result.push([space, n1, n2]);\n          }\n        }\n      }\n    });\n\n    return result;\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.validTriplets(player.game.board).length > 0;\n  }\n\n  private selectSpace(player: IPlayer, iteration: number, triplets: Array<Triplet>): SelectSpace {\n    const messages = [\n      'Select first space',\n      'Select second space',\n      'Select third space',\n    ];\n    const spaceSet: Set<Space> = new Set(triplets.flat());\n    const spaces = Array.from(spaceSet).filter((space) => space.player === undefined);\n    spaces.sort((s1, s2) => parseInt(s2.id) - parseInt(s1.id));\n    return new SelectSpace(messages[iteration], spaces)\n      .andThen((space) => {\n        space.player = player;\n        player.game.grantSpaceBonuses(player, space);\n        LogHelper.logBoardTileAction(player, space, 'claimed');\n        player.getCorporation(CardName.MINING_GUILD)?.onTilePlaced?.(player, player, space, BoardType.MARS);\n\n        if (iteration === 2) return undefined;\n\n        const revisedTriplets = triplets.filter((triplet) => {\n          return triplet[0].id === space.id ||\n          triplet[1].id === space.id ||\n          triplet[2].id === space.id;\n        });\n        if (revisedTriplets.length === 0) return undefined;\n\n        return this.selectSpace(player, iteration + 1, revisedTriplets);\n      });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const triplets = this.validTriplets(player.game.board);\n    return this.selectSpace(player, 0, triplets);\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Design Company",
  "tags" : [ "mars" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/DesignCompany.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class DesignCompany extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.DESIGN_COMPANY,\n      tags: [Tag.MARS],\n\n      behavior: {\n        production: {steel: 1},\n        drawCard: {count: 3, tag: Tag.BUILDING},\n      },\n\n      metadata: {\n        cardNumber: 'PfP08',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.steel(1)).br;\n          b.cards(3, {secondaryTag: Tag.BUILDING});\n        }),\n        description: 'Increase your steel production 1 step. Draw 3 cards with a building tag.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Personal Agenda",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/PersonalAgenda.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\n\nexport class PersonalAgenda extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.PERSONAL_AGENDA,\n\n      behavior: {\n        production: {megacredits: 3},\n      },\n\n      metadata: {\n        cardNumber: 'PfP10',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(3)).br;\n          // TODO(kberg): allow more than one secondary tag.\n          b.cards(3, {secondaryTag: Tag.EVENT}).asterix();\n        }),\n        description: 'Increase your Mâ‚¬ production 3 steps. Draw 3 event cards that do not have a space tag.',\n      },\n    });\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.drawCard(3, {\n      include: (card) => {\n        return card.type === CardType.EVENT &&\n          (card.tags.includes(Tag.SPACE) === false);\n      }});\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Vital Colony",
  "tags" : [ "mars", "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/pathfinders/VitalColony.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {BuildColony} from '../../deferredActions/BuildColony';\n\nexport class VitalColony extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.VITAL_COLONY,\n      tags: [Tag.MARS, Tag.SPACE],\n\n      metadata: {\n        cardNumber: 'PfP11',\n        renderData: CardRenderer.builder((b) => {\n          b.colonies().text('2x bonus');\n        }),\n        description: 'Place a colony. Receive the placement bonus twice.',\n      },\n    });\n  }\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(\n      new BuildColony(player, {giveBonusTwice: true}));\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Deep Space Operations",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/pathfinders/DeepSpaceOperations.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\n\nexport class DeepSpaceOperations extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.DEEP_SPACE_OPERATIONS,\n      tags: [Tag.SPACE],\n\n      behavior: {\n        stock: {titanium: 4},\n        drawCard: {count: 2, tag: Tag.SPACE, type: CardType.EVENT},\n      },\n\n      metadata: {\n        cardNumber: 'PfP12',\n        renderData: CardRenderer.builder((b) => {\n          b.titanium(4).br;\n          b.cards(2, {secondaryTag: Tag.EVENT}).super((sb) => sb.tag(Tag.SPACE));\n        }),\n        description: 'Gain 4 titanium. Draw 2 event cards with a space tag.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "pathfinders",
  "name" : "Experienced Martians",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "turmoil", "pathfinders" ],
  "sourceFile" : "src/server/cards/pathfinders/ExperiencedMartians.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class ExperiencedMartians extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.EXPERIENCED_MARTIANS,\n\n      behavior: {\n        production: {megacredits: 2},\n        drawCard: {count: 2, tag: Tag.MARS},\n        turmoil: {sendDelegates: {count: 1}},\n      },\n\n      metadata: {\n        cardNumber: 'PfP13',\n        renderData: CardRenderer.builder((b) => {\n          b.delegates(1).cards(1, {secondaryTag: Tag.MARS}).cards(1, {secondaryTag: Tag.MARS}).production((pb) => pb.megacredits(2));\n        }),\n        description: 'Place 1 delegate in any party. Draw 2 cards with a Mars tag. Increase your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "pathfinders",
  "name" : "The New Space Race",
  "tags" : [ "science", "earth" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 12,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/pathfinders/TheNewSpaceRace.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IProjectCard} from '../IProjectCard';\nimport {IPlayer} from '../../IPlayer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IGame} from '../../IGame';\nimport {Turmoil} from '../../turmoil/Turmoil';\nimport {ChooseRulingPartyDeferred} from '../../turmoil/ChooseRulingPartyDeferred';\n\nexport class TheNewSpaceRace extends PreludeCard implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.THE_NEW_SPACE_RACE,\n      tags: [Tag.SCIENCE, Tag.EARTH],\n\n      behavior: {\n        stock: {megacredits: 12},\n      },\n\n      metadata: {\n        cardNumber: 'PfP14',\n        renderData: CardRenderer.builder((b) => {\n          b.firstPlayer().rulingParty().megacredits(12).br;\n        }),\n        description: 'REVEALED BEFORE ANY OTHER PRELUDE. You become starting player for the game. Choose and set a ruling policy for the first generation. Gain 12 Mâ‚¬.',\n      },\n    });\n  }\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    game.overrideFirstPlayer(player);\n    Turmoil.ifTurmoil((player.game), (turmoil) => {\n      player.game.defer(new ChooseRulingPartyDeferred(player, turmoil));\n    });\n\n    return undefined;\n  }\n\n  public static potentiallyChangeFirstPlayer(game: IGame) {\n    const [cardHolder, card] = game.getCardHolder(CardName.THE_NEW_SPACE_RACE);\n    if (cardHolder !== undefined && card !== undefined) {\n      game.log('${0} has ${1}, which is played before any other Prelude and makes them first player.', (b) => b.player(cardHolder).card(card));\n      cardHolder.playCard(card);\n    }\n  }\n}\n"
}, {
  "module" : "ceo",
  "name" : "Co-leadership",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Co-leadership.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Apollo",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/ceo/Apollo.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Asimov",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Asimov.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Bjorn",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Bjorn.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Caesar",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "ares" ],
  "sourceFile" : "src/server/cards/ceo/Caesar.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Clarke",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Clarke.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Duncan",
  "tags" : [ ],
  "victoryPoints" : "special",
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Duncan.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Ender",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Ender.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Faraday",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Faraday.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Floyd",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Floyd.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Gaia",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "ares" ],
  "sourceFile" : "src/server/cards/ceo/Gaia.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Gordon",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Gordon.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Greta",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Greta.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "HAL 9000",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/HAL9000.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Ingrid",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Ingrid.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Jansson",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Jansson.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Karen",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "prelude" ],
  "sourceFile" : "src/server/cards/ceo/Karen.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Lowell",
  "tags" : [ "wild" ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Lowell.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Maria",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/ceo/Maria.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Musk",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Musk.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Naomi",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/ceo/Naomi.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Neil",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "moon" ],
  "sourceFile" : "src/server/cards/ceo/Neil.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Oscar",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/ceo/Oscar.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Petra",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/ceo/Petra.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Quill",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/ceo/Quill.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Rogers",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/ceo/Rogers.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Ryu",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Ryu.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Shara",
  "tags" : [ "clone", "clone" ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "pathfinders" ],
  "sourceFile" : "src/server/cards/ceo/Shara.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Stefan",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Stefan.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Tate",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Tate.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Ulrich",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/Ulrich.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Van Allen",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/ceo/VanAllen.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Will",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/ceo/Will.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Xavier",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "prelude" ],
  "sourceFile" : "src/server/cards/ceo/Xavier.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Xu",
  "tags" : [ "venus" ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/ceo/Xu.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "Yvonne",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/ceo/Yvonne.ts",
  "sourceCode" : ""
}, {
  "module" : "ceo",
  "name" : "UselessPieceOfTrash",
  "tags" : [ ],
  "cost" : 0,
  "type" : "ceo",
  "requirements" : [ ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/ceo/UselessPieceOfTrash.ts",
  "sourceCode" : ""
}, {
  "module" : "starwars",
  "name" : "Trade Embargo (I)",
  "tags" : [ "space" ],
  "cost" : 4,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/starwars/TradeEmbargo(I).ts",
  "sourceCode" : ""
}, {
  "module" : "starwars",
  "name" : "Clone Troopers (II)",
  "tags" : [ "science" ],
  "victoryPoints" : {
    "resourcesHere" : { }
  },
  "cost" : 12,
  "type" : "active",
  "requirements" : [ {
    "oceans" : 6,
    "count" : 6
  } ],
  "resourceType" : "Clone Trooper",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/starwars/CloneTroopers(II).ts",
  "sourceCode" : ""
}, {
  "module" : "starwars",
  "name" : "Behold The Emperor! (III)",
  "tags" : [ "earth" ],
  "cost" : 10,
  "type" : "event",
  "requirements" : [ {
    "chairman" : 1
  } ],
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/starwars/BeholdTheEmperor!(III).ts",
  "sourceCode" : ""
}, {
  "module" : "starwars",
  "name" : "Tosche Station (IV)",
  "tags" : [ "power", "plant" ],
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/starwars/ToscheStation(IV).ts",
  "sourceCode" : ""
}, {
  "module" : "starwars",
  "name" : "Cloud City (V)",
  "tags" : [ "venus" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ {
    "venus" : 6,
    "count" : 6
  } ],
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/starwars/CloudCity(V).ts",
  "sourceCode" : ""
}, {
  "module" : "starwars",
  "name" : "Forest Moon (VI)",
  "tags" : [ "plant", "animal" ],
  "victoryPoints" : 1,
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ {
    "greeneries" : 4,
    "all" : true,
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/starwars/ForestMoon(VI).ts",
  "sourceCode" : ""
}, {
  "module" : "starwars",
  "name" : "Takonda Castle (VII)",
  "tags" : [ "power", "plant" ],
  "cost" : 2,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/starwars/TakondaCastle(VII).ts",
  "sourceCode" : ""
}, {
  "module" : "starwars",
  "name" : "Tool with the First Order (VIII)",
  "tags" : [ "space" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/starwars/ToolwiththeFirstOrder(VIII).ts",
  "sourceCode" : ""
}, {
  "module" : "starwars",
  "name" : "Rey ... Skywalker?! (IX)",
  "tags" : [ "building" ],
  "victoryPoints" : -2,
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/starwars/Rey...Skywalker?!(IX).ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Geologist Team",
  "tags" : [ "mars", "science" ],
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/GeologistTeam.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {ActionCard} from '../ActionCard';\nimport {all} from '../Options';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\n\nexport class GeologistTeam extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.GEOLOGIST_TEAM,\n      cost: 6,\n      tags: [Tag.MARS, Tag.SCIENCE],\n\n      action: {\n        underworld: {identify: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U01',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Identify 1 underground resource.',\n            (ab) => ab.empty().startAction.identify(1));\n          b.br;\n          b.effect('When ANY player identifies an underground resource that depicts an ocean, YOU gain 1 TR.',\n            (eb) => eb.identify(1, {all}).oceans(1).asterix().startEffect.tr(1));\n        }),\n      },\n    });\n  }\n\n  public onIdentification(_identifyingPlayer: IPlayer | undefined, cardOwner: IPlayer, space: Space) {\n    if (space.undergroundResources === 'ocean') {\n      if (cardOwner.canAfford({cost: 0, tr: {tr: 1}})) {\n        cardOwner.increaseTerraformRating(1, {log: true});\n      }\n    }\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Geoscan Satellite",
  "tags" : [ "science", "space" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/GeoscanSatellite.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {IPlayer} from '../../IPlayer';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {IdentifySpacesDeferred} from '../../underworld/IdentifySpacesDeferred';\n\nexport class GeoscanSatellite extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.GEOSCAN_SATELLITE,\n      cost: 6,\n      tags: [Tag.SCIENCE, Tag.SPACE],\n\n      behavior: {\n        addResourcesToAnyCard: {count: 2, type: CardResource.DATA},\n      },\n\n      metadata: {\n        cardNumber: 'U02',\n        renderData: CardRenderer.builder((b) => {\n          b.resource(CardResource.DATA, 2).geoscan();\n        }),\n        description: 'Place 2 data on any card. Pick a space on the board. Identify the underground resource in that space and in all adjacent spaces.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return UnderworldExpansion.identifiableSpaces(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(\n      new IdentifySpacesDeferred(player, 1).andThen(([space]) => {\n        for (const adjacentSpace of player.game.board.getAdjacentSpaces(space)) {\n          UnderworldExpansion.identify(player.game, adjacentSpace, player);\n        }\n      }),\n    );\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Tunnel Boring Machine",
  "tags" : [ "building" ],
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/TunnelBoringMachine.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {digit} from '../Options';\n\nexport class TunnelBoringMachine extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.TUNNEL_BORING_MACHINE,\n      tags: [Tag.BUILDING],\n      cost: 10,\n\n      action: {\n        spend: {energy: 3},\n        underworld: {excavate: 2},\n      },\n\n      metadata: {\n        cardNumber: 'U03',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Pay 3 energy to excavate 2 underground resources',\n            (ab) => ab.energy(3, {digit}).startAction.excavate(2));\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Underground Railway",
  "tags" : [ "building" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/UndergroundRailway.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {digit} from '../Options';\n\nexport class UndergroundRailway extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.UNDERGROUND_RAILWAY,\n      cost: 12,\n      tags: [Tag.BUILDING],\n\n      behavior: {\n        production: {energy: -1},\n        tr: {underworld: {excavationMarkers: {}}, per: 4},\n      },\n\n      metadata: {\n        cardNumber: 'U04',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.minus().energy(1)).br;\n          b.tr(1).slash().excavate(4, {digit});\n        }),\n        description: 'Decrease your energy production 1 step. Gain 1 TR for every 4 excavation markers you own.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Gaia City",
  "tags" : [ "mars", "building", "city" ],
  "cost" : 18,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/GaiaCity.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {PlaceCityTile} from '../../deferredActions/PlaceCityTile';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class GaiaCity extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.GAIA_CITY,\n      type: CardType.AUTOMATED,\n      cost: 18,\n      tags: [Tag.MARS, Tag.BUILDING, Tag.CITY],\n\n      behavior: {production: {energy: -1, megacredits: 2}},\n\n      metadata: {\n        cardNumber: 'U05',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.minus().energy(1).megacredits(2)).br;\n          b.city().super((b) => b.excavate(1)).asterix().text('Placement Bonus x2');\n        }),\n        description: 'Reduce your energy production one step and increase your Mâ‚¬ production 2 steps. ' +\n        'Place a city in a space with ANY player\\'s excavation marker. ' +\n        'Its placement bonus is doubled (including adjacencies.)',\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer) {\n    const availableSpaceForCity = player.game.board.getAvailableSpacesForCity(\n      player, {cost: player.getCardCost(this)});\n    return availableSpaceForCity.filter((space) => space.excavator !== undefined);\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.availableSpaces(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlaceCityTile(player, {\n      spaces: this.availableSpaces(player),\n    })).andThen((space) => {\n      if (space) {\n        player.game.grantPlacementBonuses(player, space);\n      }\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Deepnuking",
  "tags" : [ ],
  "victoryPoints" : -1,
  "cost" : 8,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Deepnuking.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all} from '../Options';\n\nexport class Deepnuking extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.DEEPNUKING,\n      cost: 8,\n      victoryPoints: -1,\n\n      behavior: {\n        underworld: {excavate: 2},\n        removeAnyPlants: 3,\n      },\n\n      metadata: {\n        cardNumber: 'U06',\n        renderData: CardRenderer.builder((b) => {\n          b.excavate(2).minus().plants(3, {all});\n        }),\n        description: 'Excavate 2 underground resources. Remove up to 3 plants from any player.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Old World Mafia",
  "tags" : [ "earth" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/OldWorldMafia.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class OldWorldMafia extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.OLD_WORLD_MAFIA,\n      cost: 11,\n      tags: [Tag.EARTH],\n\n      behavior: {\n        underworld: {corruption: {tag: Tag.EARTH, per: 2}},\n      },\n\n      metadata: {\n        cardNumber: 'U07',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption(1).slash().tag(Tag.EARTH, 2);\n        }),\n        description: 'Gain 1 corruption for every 2 Earth tags you have, including this.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Nightclubs",
  "tags" : [ "building" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ {
    "cities" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Nightclubs.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class Nightclubs extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.NIGHTCLUBS,\n      cost: 11,\n      tags: [Tag.BUILDING],\n\n      requirements: {cities: 1},\n\n      behavior: {\n        production: {megacredits: 2},\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U08',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption(1).production((pb) => pb.megacredits(2));\n        }),\n        description: 'Requires that you own a city in play. Gain 1 corruption and increase your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Reckless Detonation",
  "tags" : [ ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ {
    "corruption" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/RecklessDetonation.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all, digit} from '../Options';\nimport {IPlayer} from '../../IPlayer';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {Resource} from '../../../common/Resource';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {message} from '../../logs/MessageBuilder';\n\nexport class RecklessDetonation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.RECKLESS_DETONATION,\n      cost: 1,\n\n      requirements: {corruption: 2},\n\n      behavior: {\n        underworld: {excavate: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U09',\n        renderData: CardRenderer.builder((b) => {\n          b.excavate(1).minus().steel(3, {digit, all}).asterix().or().titanium(2, {digit, all}).asterix();\n        }),\n        description: 'Requires 2 corruption. Excavate an underground resource. Remove up to 3 steel or 2 titanium from another player.',\n      },\n    });\n  }\n\n  private title(amount: number, type: string, target: IPlayer) {\n    return message('Remove ${0} ${1} from ${2}', (b) => b.number(amount).string(type).player(target));\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    if (player.game.isSoloMode()) return undefined;\n\n    const availablePlayerTargets = player.game.getPlayers().filter((p) => p.id !== player.id);\n    const availableActions = new OrOptions();\n\n    availablePlayerTargets.forEach((target) => {\n      if (target.titanium > 0 && !target.alloysAreProtected()) {\n        const amountRemoved = Math.min(2, target.titanium);\n        const optionTitle = this.title(amountRemoved, 'titanium', target);\n        availableActions.options.push(new SelectOption(optionTitle).andThen(() => {\n          target.maybeBlockAttack(player, (proceed) => {\n            if (proceed) {\n              target.stock.deduct(Resource.TITANIUM, 2, {log: true, from: player});\n            }\n            return undefined;\n          });\n          return undefined;\n        }));\n      }\n\n      if (target.steel > 0 && !target.alloysAreProtected()) {\n        const amountRemoved = Math.min(3, target.steel);\n        const optionTitle = this.title(amountRemoved, 'steel', target);\n        availableActions.options.push(new SelectOption(optionTitle).andThen(() => {\n          target.maybeBlockAttack(player, (proceed) => {\n            if (proceed) {\n              target.stock.deduct(Resource.STEEL, 3, {log: true, from: player});\n            }\n            return undefined;\n          });\n          return undefined;\n        }));\n      }\n    });\n\n    if (availableActions.options.length > 0) {\n      availableActions.options.push(new SelectOption('Do not remove resource').andThen(() => {\n        return undefined;\n      }));\n      return availableActions;\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Off-World Tax Haven",
  "tags" : [ "earth", "space" ],
  "victoryPoints" : -1,
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "corruption" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Off-WorldTaxHaven.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Subnautic Pirates",
  "tags" : [ ],
  "victoryPoints" : -1,
  "cost" : 3,
  "type" : "event",
  "requirements" : [ {
    "excavation" : 1,
    "count" : 1
  }, {
    "corruption" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/SubnauticPirates.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {Resource} from '../../../common/Resource';\n\nexport class SubnauticPirates extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.SUBNAUTIC_PIRATES,\n      type: CardType.EVENT,\n      cost: 3,\n\n      requirements: [{excavation: 1}, {corruption: 1}],\n      victoryPoints: -1,\n\n      metadata: {\n        cardNumber: 'U11',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(1).excavate().asterix().colon().text('STEAL').megacredits(6);\n        }),\n        description: 'Requires 1 excavation marker and 1 corruption. Pick an ocean tile ' +\n        'that has your excavation marker on it. Steal 6 Mâ‚¬ from each other player that ' +\n        'owns a tile adjacent to that ocean. This can be blocked by corruption.',\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer) {\n    return player.game.board.getOceanSpaces().filter((space) => space.excavator === player);\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.availableSpaces(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    return new SelectSpace('Select an ocean space you have excavated', this.availableSpaces(player))\n      .andThen((space) => {\n        const adjacentSpaces = player.game.board.getAdjacentSpaces(space);\n        const set = new Set<IPlayer>();\n        for (const space of adjacentSpaces) {\n          if (space.player !== undefined && space.player !== player) {\n            set.add(space.player);\n          }\n        }\n\n        set.forEach((target) => {\n          target.maybeBlockAttack(player, (proceed) => {\n            if (proceed) {\n              target.stock.steal(Resource.MEGACREDITS, 6, player);\n            }\n            return undefined;\n          });\n        });\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Fabricated Scandal",
  "tags" : [ ],
  "cost" : 15,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/FabricatedScandal.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {all} from '../Options';\nimport {IPlayer} from '../../IPlayer';\n\nexport class FabricatedScandal extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.FABRICATED_SCANDAL,\n      type: CardType.EVENT,\n      cost: 15,\n\n      behavior: {\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U13',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption().br;\n          b.text('most').tr(1, {all}).colon().minus().tr(1).br;\n          b.text('least').tr(1, {all}).colon().plus().tr(1).br;\n        }),\n        description: 'Gain 1 corruption. The players with the highest TR lose 1 TR. ' +\n          'Then the players with the lowest TR gain 1 TR, if possible.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    const highestTR = Math.max(...game.getPlayers().map(((p) => p.getTerraformRating())));\n    game.getPlayers().forEach((p) => {\n      if (p.getTerraformRating() === highestTR) {\n        p.decreaseTerraformRating(1, {log: true});\n      }\n    });\n\n    const lowestTR = Math.min(...game.getPlayers().map(((p) => p.getTerraformRating())));\n    game.getPlayers().forEach((p) => {\n      if (p.getTerraformRating() === lowestTR && player.canAfford({cost: 0, tr: {tr: 1}})) {\n        p.increaseTerraformRating(1, {log: true});\n      }\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Labor Trafficking",
  "tags" : [ "space" ],
  "victoryPoints" : -2,
  "cost" : 3,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/LaborTrafficking.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {ICard} from '../ICard';\nimport {IStandardProjectCard} from '../IStandardProjectCard';\n\nexport class LaborTrafficking extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.LABOR_TRAFFICKING,\n      type: CardType.ACTIVE,\n      cost: 3,\n      tags: [Tag.SPACE],\n      victoryPoints: -2,\n\n      metadata: {\n        cardNumber: 'U14',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('The first standard project action you take each generation, ' +\n              'except selling patents, costs 6 Mâ‚¬ less.', (eb) =>\n            eb.text('FIRST').plate('Standard projects').asterix().startEffect.megacredits(-6));\n        }),\n      },\n    });\n  }\n\n  public data: {generation: number} = {generation: -1};\n\n  onStandardProject(player: IPlayer, project: ICard): void {\n    if (project.name !== CardName.SELL_PATENTS_STANDARD_PROJECT) {\n      this.data.generation = player.game.generation;\n    }\n  }\n\n  public getStandardProjectDiscount(player: IPlayer, card: IStandardProjectCard): number {\n    if (card.name !== CardName.SELL_PATENTS_STANDARD_PROJECT) {\n      if (this.data.generation !== player.game.generation) {\n        return 6;\n      }\n    }\n    return 0;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Subterranean Sea",
  "tags" : [ "building" ],
  "cost" : 10,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/SubterraneanSea.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {PlaceOceanTile} from '../../deferredActions/PlaceOceanTile';\n\nexport class SubterraneanSea extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.SUBTERRANEAN_SEA,\n      type: CardType.AUTOMATED,\n      cost: 10,\n      tags: [Tag.BUILDING],\n\n      tr: {oceans: 1},\n\n      metadata: {\n        cardNumber: 'U15',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(1).excavate().asterix();\n        }),\n        description: 'Place an ocean tile ON AN AREA NOT RESERVED FOR OCEAN where you have an excavation marker.',\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer) {\n    const availableSpcesOnLand = player.game.board.getAvailableSpacesOnLand(\n      player, {\n        cost: player.getCardCost(this),\n        tr: {oceans: 1},\n      });\n    return availableSpcesOnLand.filter((space) => space.excavator === player);\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    if (!player.game.canAddOcean()) {\n      this.warnings.add('maxoceans');\n    }\n    return this.availableSpaces(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlaceOceanTile(player, {\n      spaces: this.availableSpaces(player),\n    }));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Forest Tunnels",
  "tags" : [ "plant" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "excavation" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/ForestTunnels.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class ForestTunnels extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.FOREST_TUNNELS,\n      tags: [Tag.PLANT],\n      cost: 7,\n\n      requirements: {excavation: 1},\n\n      behavior: {\n        stock: {plants: {underworld: {excavationMarkers: {}}}},\n      },\n\n      metadata: {\n        cardNumber: 'U16',\n        renderData: CardRenderer.builder((b) => {\n          b.plants(1).slash().excavate(1);\n        }),\n        description: 'Requires an excavation marker. Gain 1 plant for every excavation marker you have.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Man-made Volcano",
  "tags" : [ "power" ],
  "cost" : 26,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Man-madeVolcano.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Tunneling Subcontractor",
  "tags" : [ ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/TunnelingSubcontractor.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class TunnelingSubcontractor extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.TUNNELING_SUBCONTRACTOR,\n      cost: 9,\n\n      behavior: {\n        underworld: {corruption: 1, excavate: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U18',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption(1).excavate(1);\n        }),\n        description: 'Gain 1 corruption. Excavate an underground resource.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Underground Amusement Park",
  "tags" : [ "building" ],
  "victoryPoints" : 1,
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ {
    "excavation" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/UndergroundAmusementPark.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class UndergroundAmusementPark extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.UNDERGROUND_AMUSEMENT_PARK,\n      tags: [Tag.BUILDING],\n      cost: 5,\n      victoryPoints: 1,\n\n      requirements: {excavation: 1},\n\n      behavior: {\n        production: {megacredits: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U19',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1));\n        }),\n        description: 'Requires an excavation marker. Increase your Mâ‚¬ production 1 step.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Casino",
  "tags" : [ "building" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ {
    "cities" : 1,
    "all" : true,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Casino.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {all} from '../Options';\n\nexport class Casino extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.CASINO,\n      tags: [Tag.BUILDING],\n      cost: 12,\n\n      requirements: {cities: 1, all},\n\n      behavior: {\n        production: {megacredits: 2},\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U20',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption();\n          b.production((pb) => pb.megacredits(2));\n        }),\n        description: 'Requires at least 1 city tile in play. Gain 1 corruption. Increase your Mâ‚¬ production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Imported Heavy Machinery",
  "tags" : [ "earth", "space" ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/ImportedHeavyMachinery.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class ImportedHeavyMachinery extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.IMPORTED_HEAVY_MACHINERY,\n      tags: [Tag.EARTH, Tag.SPACE],\n      cost: 9,\n\n      behavior: {\n        underworld: {excavate: 2},\n      },\n\n      metadata: {\n        cardNumber: 'U21',\n        renderData: CardRenderer.builder((b) => {\n          b.excavate(2);\n        }),\n        description: 'Excavate 2 underground resources.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Microprobing Technology",
  "tags" : [ "science" ],
  "cost" : 7,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/MicroprobingTechnology.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {digit} from '../Options';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class MicroprobingTechnology extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.MICROPROBING_TECHNOLOGY,\n      tags: [Tag.SCIENCE],\n      cost: 7,\n\n      requirements: {tag: Tag.SCIENCE, count: 1},\n\n      behavior: {\n        stock: {plants: 3},\n        addResourcesToAnyCard: {count: 2, type: CardResource.DATA},\n        underworld: {identify: 3},\n      },\n\n      metadata: {\n        cardNumber: 'U22',\n        renderData: CardRenderer.builder((b) => {\n          b.plants(3, {digit}).resource(CardResource.DATA, {amount: 2, digit}).identify(3, {digit});\n        }),\n        description: 'Requires 1 science tag. Gain 3 plants. Add 2 data to any card. Identify 3 underground resources.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Search for Life Underground",
  "tags" : [ "mars", "science" ],
  "victoryPoints" : "special",
  "cost" : 6,
  "type" : "active",
  "requirements" : [ {
    "temperature" : -18,
    "max" : true,
    "count" : -18
  } ],
  "resourceType" : "Science",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/SearchforLifeUnderground.ts",
  "sourceCode" : "import {IActionCard} from '../ICard';\nimport {IProjectCard} from '../IProjectCard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardRenderDynamicVictoryPoints} from '../render/CardRenderDynamicVictoryPoints';\nimport {max} from '../Options';\nimport {IdentifySpacesDeferred} from '../../underworld/IdentifySpacesDeferred';\nimport {undergroundResourceTokenDescription} from '../../../common/underworld/UndergroundResourceToken';\nimport {TITLES} from '../../inputs/titles';\n\n// TODO(kberg): Copies a lot of Search For Life.\nexport class SearchforLifeUnderground extends Card implements IActionCard, IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SEARCH_FOR_LIFE_UNDERGROUND,\n      tags: [Tag.MARS, Tag.SCIENCE],\n      cost: 6,\n\n      resourceType: CardResource.SCIENCE,\n      victoryPoints: 'special',\n\n      requirements: {temperature: -18, max},\n      metadata: {\n        cardNumber: 'U23',\n        description: 'Temperature must -18Â° C or colder.',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 Mâ‚¬ to identify an underground resource. If it depicts at least 1 microbe, add a science resource here.', (eb) => {\n            eb.megacredits(1).startAction.identify().nbsp.text(',').resource(CardResource.MICROBE).asterix().colon().nbsp.resource(CardResource.SCIENCE);\n          }).br;\n          b.vpText('3 VPs if you have one or more science resources here.');\n        }),\n        victoryPoints: CardRenderDynamicVictoryPoints.searchForLife(),\n      },\n    });\n  }\n\n  public override getVictoryPoints() {\n    if (this.resourceCount > 0) {\n      return 3;\n    }\n    return 0;\n  }\n  public canAct(player: IPlayer): boolean {\n    return player.canAfford(1);\n  }\n  public action(player: IPlayer) {\n    player.game.defer(new SelectPaymentDeferred(player, 1, {title: TITLES.payForCardAction(this.name)}))\n      .andThen(() => {\n        const identify = new IdentifySpacesDeferred(player, 1);\n        player.game.defer(identify);\n        identify.andThen(([space]) => {\n          const undergroundResources = space.undergroundResources;\n          if (undergroundResources === undefined) {\n            player.game.log('${0} had no underground resources to discard', (b) => b.player(player));\n            return;\n          }\n          player.game.log('${0} revealed and discarded ${1}', (b) => b.player(player).string(undergroundResourceTokenDescription[undergroundResources]));\n          if (['microbe1', 'microbe2', 'microbe1pertemp'].includes(undergroundResources)) {\n            player.addResourceTo(this, 1);\n            player.game.log('${0} found life!', (b) => b.player(player));\n          }\n        });\n      });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Geothermal Network",
  "tags" : [ "mars", "building" ],
  "victoryPoints" : 1,
  "cost" : 14,
  "type" : "automated",
  "requirements" : [ {
    "excavation" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/GeothermalNetwork.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class GeothermalNetwork extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.GEOTHERMAL_NETWORK,\n      tags: [Tag.MARS, Tag.BUILDING],\n      cost: 14,\n\n      requirements: {excavation: 3},\n\n      behavior: {\n        production: {heat: 3},\n      },\n\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'U24',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.heat(3));\n        }),\n        description: 'Requires 3 excavation markers. Increase your heat production 3 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Global Audit",
  "tags" : [ "earth" ],
  "cost" : 2,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/GlobalAudit.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class GlobalAudit extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.GLOBAL_AUDIT,\n      type: CardType.EVENT,\n      cost: 2,\n      tags: [Tag.EARTH],\n\n      metadata: {\n        cardNumber: 'U25',\n        renderData: CardRenderer.builder((b) => {\n          b.text('0').corruption(1).colon().tr(1);\n        }),\n        description: 'Every player with 0 corruption gains 1 TR, if possible.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    for (const p of player.game.getPlayers()) {\n      if (p.underworldData.corruption === 0 && player.canAfford({cost: 0, tr: {tr: 1}})) {\n        p.increaseTerraformRating(1, {log: true});\n      }\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Patent Manipulation",
  "tags" : [ ],
  "victoryPoints" : -2,
  "cost" : 7,
  "type" : "event",
  "requirements" : [ {
    "corruption" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/PatentManipulation.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {isSpecialTile} from '../../boards/Board';\nimport {inplaceRemove} from '../../../common/utils/utils';\n\nexport class PatentManipulation extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.PATENT_MANIPULATION,\n      cost: 7,\n\n      requirements: {corruption: 1},\n      victoryPoints: -2,\n\n      metadata: {\n        cardNumber: 'U26',\n        renderData: CardRenderer.builder((b) => {\n          b.cards(1).asterix(); // TODO(kberg): add altsecondarytag.green, and show both blue and green tags.\n        }),\n        description: 'RETURN 1 OF YOUR PLAYED GREEN OR BLUE CARDS TO YOUR HAND. IT MAY NOT BE A CARD THAT PLACES SPECIAL TILES OR RETURNS PLAYED CARDS TO YOUR HAND.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.getCards(player).length > 0;\n  }\n\n  private getCards(player: IPlayer): ReadonlyArray<IProjectCard> {\n    return player.playedCards.filter((card) => {\n      if (card.type !== CardType.AUTOMATED && card.type !== CardType.ACTIVE) {\n        return false;\n      }\n      if (card.name === CardName.ASTRA_MECHANICA) {\n        return false;\n      }\n      if (card.tilesBuilt.some(isSpecialTile)) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  // TODO(kberg): much of this card is a duplicate of Astra Mechanica.\n  public override bespokePlay(player: IPlayer) {\n    const candidates = this.getCards(player);\n    if (candidates.length === 0) {\n      player.game.log('${0} had no collectable green or blue project cards', (b) => b.player(player));\n      return undefined;\n    }\n    return new SelectCard(\n      'Select 1 card to return to your hand',\n      'Select',\n      candidates)\n      .andThen(\n        (cards) => {\n          for (const card of cards) {\n            inplaceRemove(player.playedCards, card);\n            card.resourceCount = 0;\n            player.cardsInHand.push(card);\n            card.onDiscard?.(player);\n            player.game.log('${0} returned ${1} to their hand', (b) => b.player(player).card(card));\n          }\n          return undefined;\n        });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Cave City",
  "tags" : [ "mars", "building", "city" ],
  "cost" : 14,
  "type" : "automated",
  "requirements" : [ {
    "excavation" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/CaveCity.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {PlaceCityTile} from '../../deferredActions/PlaceCityTile';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class CaveCity extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.CAVE_CITY,\n      type: CardType.AUTOMATED,\n      cost: 14,\n      tags: [Tag.MARS, Tag.BUILDING, Tag.CITY],\n\n      requirements: {excavation: 1},\n\n      behavior: {production: {megacredits: 1}},\n\n      metadata: {\n        cardNumber: 'U27',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1)).br;\n          b.city().excavate().asterix();\n        }),\n        description: 'Requires 1 excavation marker. Increase your Mâ‚¬ production 1 step. ' +\n        'Place a city in a space where YOU have an excavation marker. ' +\n        'Regular placement restrictions still apply.',\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer) {\n    const availableSpaceForCity = player.game.board.getAvailableSpacesForCity(\n      player, {cost: player.getCardCost(this)});\n    return availableSpaceForCity.filter((space) => space.excavator === player);\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.availableSpaces(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlaceCityTile(player, {spaces: this.availableSpaces(player)}));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Underground Smuggling Ring",
  "tags" : [ ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "excavation" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/UndergroundSmugglingRing.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {digit} from '../Options';\n\nexport class UndergroundSmugglingRing extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.UNDERGROUND_SMUGGLING_RING,\n      cost: 8,\n\n      requirements: {excavation: 1},\n\n      behavior: {\n        underworld: {corruption: 1},\n        standardResource: 2,\n      },\n\n      metadata: {\n        cardNumber: 'U28',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption(1).wild(2, {digit}).asterix();\n        }),\n        description: 'Requires an excavation marker. Gain 1 corruption and 2 of the same standard resource.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Deepmining",
  "tags" : [ "building" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Deepmining.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {SpaceBonus} from '../../../common/boards/SpaceBonus';\nimport {MiningCard} from '../base/MiningCard';\n\nexport class Deepmining extends MiningCard {\n  protected readonly title = 'Select an identified space with a steel or titanium bonus';\n  protected override readonly placeTile = false;\n\n  constructor() {\n    super(\n      CardName.DEEPMINING,\n      11,\n      {\n        cardNumber: 'U29',\n        renderData: CardRenderer.builder((b) => {\n          b.excavate(1).asterix().br;\n          b.production((pb) => pb.steel(1).or().titanium(1)).asterix();\n        }),\n        description: 'Excavate an IDENTIFIED underground resource ANYWHERE ON MARS with a steel or titanium placement bonus. ' +\n        'Increase that production 1 step.',\n      });\n  }\n\n  public override getAvailableSpaces(player: IPlayer): ReadonlyArray<Space> {\n    return UnderworldExpansion.identifiedSpaces(player.game)\n      .filter((space) => space.excavator === undefined)\n      .filter((space) => space.bonus.includes(SpaceBonus.STEEL) || space.bonus.includes(SpaceBonus.TITANIUM));\n  }\n\n  protected override spaceSelected(player: IPlayer, space: Space) {\n    UnderworldExpansion.excavate(player, space);\n    super.spaceSelected(player, space);\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Behemoth Excavator",
  "tags" : [ "building" ],
  "cost" : 13,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/BehemothExcavator.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {digit} from '../Options';\n\nexport class BehemothExcavator extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.BEHEMOTH_EXCAVATOR,\n      tags: [Tag.BUILDING],\n      cost: 13,\n\n      behavior: {\n        underworld: {excavate: 3},\n      },\n\n      metadata: {\n        cardNumber: 'U30',\n        renderData: CardRenderer.builder((b) => {\n          b.excavate(3, {digit});\n        }),\n        description: 'Excavate 3 underground resources.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Lobbying Network",
  "tags" : [ "earth" ],
  "cost" : 5,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/LobbyingNetwork.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class LobbyingNetwork extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.LOBBYING_NETWORK,\n      tags: [Tag.EARTH],\n      cost: 5,\n\n      behavior: {\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U31',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption(1);\n        }),\n        description: 'Gain 1 corruption.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Concession Rights",
  "tags" : [ "mars" ],
  "victoryPoints" : -1,
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "earth"
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/ConcessionRights.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class ConcessionRights extends Card implements IProjectCard {\n  public generationUsed: number = -1;\n\n  constructor() {\n    super({\n      name: CardName.CONCESSION_RIGHTS,\n      type: CardType.AUTOMATED,\n      cost: 8,\n      tags: [Tag.MARS],\n      requirements: {tag: Tag.EARTH},\n      victoryPoints: -1,\n\n      behavior: {\n        underworld: {\n          markThisGeneration: {},\n          excavate: 1,\n          corruption: 1,\n        },\n      },\n\n      metadata: {\n        cardNumber: 'U32',\n        renderData: CardRenderer.builder((b) => {\n          b.excavate().emptyTile().asterix().nbsp.excavate().corruption();\n        }),\n        description: 'Requires 1 Earth tag. Until the end of this generation, ' +\n        'you can excavate ignoring placement restrictions. Excavate 1 underground resource. Gain 1 corruption.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Orbital Laser Drill",
  "tags" : [ "science", "space" ],
  "victoryPoints" : 1,
  "cost" : 15,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/OrbitalLaserDrill.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class OrbitalLaserDrill extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ORBITAL_LASER_DRILL,\n      tags: [Tag.SCIENCE, Tag.SPACE],\n      cost: 15,\n\n      requirements: {tag: Tag.SCIENCE, count: 2},\n      victoryPoints: 1,\n\n      behavior: {\n        underworld: {excavate: {count: 2, ignorePlacementRestrictions: true}},\n      },\n\n      metadata: {\n        cardNumber: 'U33',\n        renderData: CardRenderer.builder((b) => {\n          b.excavate(2);\n        }),\n        description: 'Requires 2 science tags. Excavate 2 underground resources, IGNORING PLACEMENT RESTRICTIONS.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Grey Market Exploitation",
  "tags" : [ "earth" ],
  "cost" : 4,
  "type" : "active",
  "requirements" : [ {
    "corruption" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/GreyMarketExploitation.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {ActionCard} from '../ActionCard';\nimport {digit} from '../Options';\n\nexport class GreyMarketExploitation extends ActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.GREY_MARKET_EXPLOITATION,\n      tags: [Tag.EARTH],\n      cost: 4,\n\n      requirements: {corruption: 2},\n\n      action: {\n        or: {\n          behaviors: [\n            {\n              spend: {megacredits: 1},\n              standardResource: 1,\n              title: 'Spend 1 Mâ‚¬ to gain 1 standard resource.',\n            },\n            {\n              spend: {corruption: 1},\n              standardResource: 3,\n              title: 'Spend 1 corruption to gain 3 of the same standard resource.',\n            },\n          ],\n          autoSelect: true,\n        },\n      },\n\n      metadata: {\n\n        cardNumber: 'U34',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 Mâ‚¬ to gain 1 standard resource.',\n            (ab) => ab.megacredits(1).startAction.wild(1).asterix()).br;\n          b.action('Spend 1 corruption to gain 3 of the same standard resource.',\n            (ab) => ab.or().corruption(1).startAction.wild(3, {digit}).asterix()).br;\n        }),\n        description: 'Requires 2 corruption.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Excavator Leasing",
  "tags" : [ "mars", "building" ],
  "cost" : 8,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/ExcavatorLeasing.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {all} from '../Options';\n\nexport class ExcavatorLeasing extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.EXCAVATOR_LEASING,\n      tags: [Tag.MARS, Tag.BUILDING],\n      cost: 8,\n\n      metadata: {\n        cardNumber: 'U35',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('The excavate standard project costs 1 Mâ‚¬ less for all players.',\n            (eb) => eb.excavate(1, {all}).startEffect.minus().megacredits(1)).br;\n          b.effect('When any player excavates underground resources, you gain 1 Mâ‚¬ per excavation.',\n            (eb) => eb.excavate(1, {all}).startEffect.megacredits(1)).br;\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Landfill",
  "tags" : [ "building" ],
  "victoryPoints" : -2,
  "cost" : 2,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Landfill.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Units} from '../../../common/Units';\n\nexport class Landfill extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.LANDFILL,\n      tags: [Tag.BUILDING],\n      cost: 2,\n\n      victoryPoints: -2,\n\n      metadata: {\n        cardNumber: 'U36',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(1, {text: '?'})).asterix();\n        }),\n        description: 'Increase your Mâ‚¬ production 1 step for each different TYPE of production ' +\n          'you have at least 1 step of.',\n      },\n    });\n  }\n\n  public productionBox(player: IPlayer) {\n    const count = Units.keys.filter((type) => player.production[type] > 0).length;\n    return Units.of({megacredits: count});\n  }\n\n\n  override bespokePlay(player: IPlayer) {\n    player.production.adjust(this.productionBox(player), {log: true});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Narrative Spin",
  "tags" : [ "earth" ],
  "victoryPoints" : -1,
  "cost" : 5,
  "type" : "event",
  "requirements" : [ {
    "tag" : "earth",
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/NarrativeSpin.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class NarrativeSpin extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.NARRATIVE_SPIN,\n      type: CardType.EVENT,\n      cost: 5,\n      tags: [Tag.EARTH],\n\n      behavior: {\n        underworld: {corruption: 2},\n      },\n\n      requirements: {tag: Tag.EARTH, count: 1},\n      victoryPoints: -1,\n\n      metadata: {\n        cardNumber: 'U37',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption(2);\n        }),\n        description: 'Requires 1 Earth tag. Gain 2 corruption.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Private Investigator",
  "tags" : [ ],
  "victoryPoints" : "special",
  "cost" : 8,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/PrivateInvestigator.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {CardRenderDynamicVictoryPoints} from '../render/CardRenderDynamicVictoryPoints';\nimport {IPlayer} from '../../IPlayer';\nimport {SelectPlayer} from '../../inputs/SelectPlayer';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class PrivateInvestigator extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.PRIVATE_INVESTIGATOR,\n      type: CardType.EVENT,\n      cost: 8,\n      victoryPoints: 'special',\n\n      behavior: {\n        tr: 1,\n      },\n\n      metadata: {\n        cardNumber: 'U38',\n        renderData: CardRenderer.builder((b) => {\n          b.text('TARGET A PLAYER WITH MORE CORRUPTION THAN YOU.', Size.SMALL, true).br;\n          b.text('PLACE THIS CARD FACE DOWN IN THAT PLAYER\\'S PROJECT CARD PILE.', Size.SMALL, true).br;\n          b.tr(1);\n        }),\n        description: 'Gain 1 TR.',\n        victoryPoints: CardRenderDynamicVictoryPoints.any(-1),\n      },\n    });\n  }\n\n  private targets(player: IPlayer) {\n    return player.game.getPlayers().filter((p) => p.underworldData.corruption > player.underworldData.corruption);\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.targets(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    return new SelectPlayer(this.targets(player), 'Select player to investigate', 'investigate')\n      .andThen((investigatedPlayer) => {\n        investigatedPlayer.playedCards.push(this);\n        return undefined;\n      });\n  }\n\n  public override getVictoryPoints() {\n    return -1;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Corporate Blackmail",
  "tags" : [ ],
  "victoryPoints" : -2,
  "cost" : 2,
  "type" : "event",
  "requirements" : [ {
    "corruption" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/CorporateBlackmail.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {SelectPlayer} from '../../inputs/SelectPlayer';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {Resource} from '../../../common/Resource';\nimport {message} from '../../../server/logs/MessageBuilder';\nimport {Size} from '../../../common/cards/render/Size';\nimport {all} from '../Options';\n\n\nexport class CorporateBlackmail extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.CORPORATE_BLACKMAIL,\n      type: CardType.EVENT,\n      cost: 2,\n      victoryPoints: -2,\n\n      requirements: {corruption: 1},\n\n      metadata: {\n        cardNumber: 'U39',\n        renderData: CardRenderer.builder((b) => {\n          b.text('PAYS YOU', Size.SMALL).megacredits(10, {all}).or().minus().corruption(2).br;\n          b.text('THIS CANNOT BE BLOCKED BY CORRUPTION', Size.SMALL).br;\n        }),\n        description: 'Requires 1 corruption. Target a player that has at least 2 corruption. ' +\n          'Unless that player pays you 10 Mâ‚¬, they lose 2 corruption.',\n      },\n    });\n  }\n\n\n  private targets(player: IPlayer) {\n    return player.getOpponents().filter((p) => p.underworldData.corruption >= 2);\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return player.game.isSoloMode() || this.targets(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    if (player.game.isSoloMode()) {\n      player.stock.add(Resource.MEGACREDITS, 10);\n      player.game.log('${0} blackmailed the neutral player and was paid 10 Mâ‚¬.', (b) => b.player(player));\n      return undefined;\n    }\n    function corruptionConsequence(blackmailedPlayer: IPlayer) {\n      UnderworldExpansion.loseCorruption(blackmailedPlayer, 2);\n      player.game.log('${0} blackmailed ${1} who lost 2 corruption.', (b) => b.player(player).player(blackmailedPlayer));\n    }\n\n    return new SelectPlayer(this.targets(player), 'Select player to blackmail', 'blackmail')\n      .andThen((blackmailedPlayer: IPlayer) => {\n        if (blackmailedPlayer.megaCredits < 10) {\n          corruptionConsequence(blackmailedPlayer);\n          return undefined;\n        } else {\n          const orOptions = new OrOptions(\n            new SelectOption(message('Pay ${0} 10 Mâ‚¬', (b) => b.player(player)), 'Pay 10 Mâ‚¬')\n              .andThen(() => {\n                blackmailedPlayer.stock.steal(Resource.MEGACREDITS, 10, player);\n                player.game.log('${0} blackmailed ${1} and was paid 10 Mâ‚¬.', (b) => b.player(player).player(blackmailedPlayer));\n                return undefined;\n              }),\n            new SelectOption('Lose 2 corruption', 'Lose 2 corruption')\n              .andThen(() => {\n                corruptionConsequence(blackmailedPlayer);\n                return undefined;\n              }));\n          blackmailedPlayer.defer(orOptions);\n        }\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Scapegoat",
  "tags" : [ ],
  "cost" : 5,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Scapegoat.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class Scapegoat extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.SCAPEGOAT,\n      type: CardType.EVENT,\n      cost: 5,\n\n      behavior: {\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U40',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption(1);\n        }),\n        description: 'Gain 1 corruption.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Friends in High Places",
  "tags" : [ "earth" ],
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "tag" : "earth",
    "count" : 1
  }, {
    "corruption" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/FriendsinHighPlaces.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Microgravimetry",
  "tags" : [ "power", "science" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 4
  },
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Microgravimetry.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {SelectAmount} from '../../inputs/SelectAmount';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CardResource} from '../../../common/CardResource';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {IdentifySpacesDeferred} from '../../underworld/IdentifySpacesDeferred';\n\nexport class Microgravimetry extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MICROGRAVIMETRY,\n      tags: [Tag.POWER, Tag.SCIENCE],\n      cost: 5,\n      resourceType: CardResource.DATA,\n      victoryPoints: {resourcesHere: {}, per: 4},\n\n      metadata: {\n        cardNumber: 'U42',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend any amount of energy to identify that many underground resources on the board ' +\n            'and put the same number of data on this card.', (eb) => {\n            eb.text('X').energy(1).startAction.text('X').identify(1).resource(CardResource.DATA);\n          });\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.energy > 0 && UnderworldExpansion.identifiableSpaces(player).length > 0;\n  }\n\n  public action(player: IPlayer) {\n    return new SelectAmount(\n      'Select amount of energy to spend', undefined, 1, player.energy)\n      .andThen((amount) => {\n        player.stock.deduct(Resource.ENERGY, amount);\n        player.game.log('${0} spent ${1} energy', (b) => b.player(player).number(amount));\n        player.addResourceTo(this, {qty: amount, log: true});\n        player.game.defer(new IdentifySpacesDeferred(player, amount));\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Stem Field Subsidies",
  "tags" : [ "science" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/StemFieldSubsidies.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {Card} from '../Card';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {IdentifySpacesDeferred} from '../../underworld/IdentifySpacesDeferred';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\n\nexport class StemFieldSubsidies extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.STEM_FIELD_SUBSIDIES,\n      cost: 10,\n      tags: [Tag.SCIENCE],\n      victoryPoints: {resourcesHere: {}, per: 3},\n      resourceType: CardResource.DATA,\n\n      metadata: {\n        cardNumber: 'U43',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Whenever you play a science tag (including this), add 1 data to ANY card and identify an underground resource.',\n            (eb) => eb.tag(Tag.SCIENCE).startEffect.resource(CardResource.DATA).asterix().identify(1));\n        }),\n        description: '1 VP per 3 data resources on this card.',\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    const count = player.tags.cardTagCount(card, Tag.SCIENCE);\n    this.onScienceTagAdded(player, count);\n  }\n  public onColonyAddedToLeavitt(player: IPlayer): void {\n    this.onScienceTagAdded(player, 1);\n  }\n  public onScienceTagAdded(player: IPlayer, count: number) {\n    if (count > 0) {\n      player.game.defer(new IdentifySpacesDeferred(player, count));\n    }\n    for (let idx = 0; idx < count; idx++) {\n      player.game.defer(new AddResourcesToCard(player, CardResource.DATA));\n    }\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Titan Manufacturing Colony",
  "tags" : [ "jovian", "space", "building" ],
  "cost" : 18,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Tool",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/TitanManufacturingColony.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {ActionCard} from '../ActionCard';\nimport {IPlayer} from '../../IPlayer';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class TitanManufacturingColony extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.TITAN_MANUFACTURING_COLONY,\n      cost: 18,\n      tags: [Tag.JOVIAN, Tag.SPACE, Tag.BUILDING],\n      resourceType: CardResource.TOOL,\n\n      action: {\n        spend: {resourcesHere: 1},\n        underworld: {excavate: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U44',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Whenever you play a Jovian tag, (including this one), add 1 tool resource on this card.',\n            (ab) => ab.tag(Tag.JOVIAN).startEffect.resource(CardResource.TOOL)).br;\n          b.action('Spend 1 tool resource on this card to excavate an underground resource.',\n            (ab) => ab.resource(CardResource.TOOL).startAction.excavate(1));\n        }),\n      },\n    });\n  }\n\n  onCardPlayed(player: IPlayer, card: IProjectCard): undefined {\n    const count = card.tags.filter((tag) => tag === Tag.JOVIAN).length;\n    player.addResourceTo(this, {qty: count, log: true});\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Robot Moles",
  "tags" : [ "mars" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 6,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/RobotMoles.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardType} from '../../../common/cards/CardType';\nimport {ActionCard} from '../ActionCard';\n\nexport class RobotMoles extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.ROBOT_MOLES,\n      cost: 6,\n      tags: [Tag.MARS],\n      victoryPoints: {resourcesHere: {}, per: 3},\n      resourceType: CardResource.DATA,\n\n      action: {\n        spend: {steel: 1},\n        addResources: 1,\n        underworld: {identify: 2},\n      },\n\n      metadata: {\n        cardNumber: 'U45',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 steel to add 1 data to this card and identify 2 underground resources.',\n            (ab) => ab.steel(1).startAction.resource(CardResource.DATA).identify(2));\n        }),\n        description: '1 VP per 3 data resources on this card.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Mining Market Insider",
  "tags" : [ "earth" ],
  "cost" : 5,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/MiningMarketInsider.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {ActionCard} from '../ActionCard';\nimport {all, digit} from '../Options';\nimport {IPlayer} from '../../IPlayer';\nimport {sum} from '../../../common/utils/utils';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class MiningMarketInsider extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MINING_MARKET_INSIDER,\n      cost: 5,\n      tags: [Tag.EARTH],\n      resourceType: CardResource.DATA,\n\n      action: {\n        spend: {resourcesHere: 4},\n        drawCard: 1,\n      },\n\n      metadata: {\n        cardNumber: 'U46',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('After any player identifies 1 or more underground spaces (at once), add 1 data resource to this card.',\n            (ab) => ab.identify(1, {all}).startEffect.resource(CardResource.DATA)).br;\n          b.action('Spend 4 data resources on this card to draw a card.',\n            (ab) => ab.resource(CardResource.DATA, {amount: 4, digit}).startAction.cards(1));\n        }),\n      },\n    });\n  }\n\n  // Behavior is similar in Demetron labs\n  // This doesn't need to be serialized. It ensures this is only evaluated once per action.\n  // When the server restarts, the player has to take an action anyway.\n  private lastActionId = -1;\n  public onIdentification(identifyingPlayer: IPlayer, cardOwner: IPlayer) {\n    const actionId = sum(identifyingPlayer.game.getPlayers().map((p) => p.actionsTakenThisGame));\n    if (this.lastActionId !== actionId) {\n      cardOwner.addResourceTo(this);\n      this.lastActionId = actionId;\n    }\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Server Sabotage",
  "tags" : [ ],
  "cost" : 7,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/ServerSabotage.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {all, digit} from '../Options';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {RemoveResourcesFromCard} from '../../deferredActions/RemoveResourcesFromCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {cancelled} from '../Options';\nexport class ServerSabotage extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.SERVER_SABOTAGE,\n      cost: 7,\n\n      behavior: {\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U47',\n        renderData: CardRenderer.builder((b) => {\n          // TODO(kberg): Use icon.\n          b.corruption(1).minus().resource(CardResource.DATA, {amount: 2, digit, all}).br.text('ALL').undergroundResources(1, {cancelled});\n        }),\n        description: 'Gain 1 corruption. Remove up to 2 data fromany player. Remove all unclaimed underground resources ' +\n          'from the board back into the pile. Their spaces can be identified again.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    if (player.game.isSoloMode()) {\n      return true;\n    }\n    return RemoveResourcesFromCard.getAvailableTargetCards(player, CardResource.DATA).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    game.defer(new RemoveResourcesFromCard(player, CardResource.DATA, 2));\n    if (game.underworldData === undefined) {\n      return;\n    }\n    UnderworldExpansion.removeAllUnclaimedTokens(player.game);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Space Wargames",
  "tags" : [ "jovian", "space" ],
  "victoryPoints" : {
    "tag" : "jovian"
  },
  "cost" : 25,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Fighter",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/SpaceWargames.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardType} from '../../../common/cards/CardType';\nimport {ActionCard} from '../ActionCard';\nimport {digit} from '../Options';\n\nexport class SpaceWargames extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SPACE_WARGAMES,\n      cost: 25,\n      tags: [Tag.JOVIAN, Tag.SPACE],\n      victoryPoints: {tag: Tag.JOVIAN},\n      resourceType: CardResource.FIGHTER,\n\n      behavior: {\n        addResources: 1,\n      },\n\n      action: {\n        or: {\n          behaviors: [\n            {\n              spend: {titanium: 1},\n              addResources: 1,\n              title: 'Spend 1 titanium to add 1 fighter resource to this card.',\n            },\n            {\n              spend: {resourcesHere: 1},\n              stock: {megacredits: {start: 1, resourcesHere: {}, each: 3}},\n              title: 'Spend 1 fighter resource on this card to gain 3 Mâ‚¬ for each fighter on this card, including the fighter.',\n            },\n          ],\n          autoSelect: true,\n        },\n      },\n\n      metadata: {\n        cardNumber: 'U48',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 titanium to gain 1 fighter resource to this card.',\n            (ab) => ab.titanium(1).startAction.resource(CardResource.FIGHTER)).br;\n          b.action('Spend 1 fighter resource on this card to gain 3 Mâ‚¬ for each fighter resource on this card INCLUDING THE PAID FIGHTER.',\n            (ab) => ab.or().resource(CardResource.FIGHTER).startAction.megacredits(3, {digit}).slash().resource(CardResource.FIGHTER).asterix()).br;\n          b.resource(CardResource.FIGHTER);\n        }),\n        description: 'Put 1 fighter resource on this card. 1VP for each Jovian tag you have.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Private Military Contractor",
  "tags" : [ "jovian", "space" ],
  "cost" : 18,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Fighter",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/PrivateMilitaryContractor.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardType} from '../../../common/cards/CardType';\nimport {ActionCard} from '../ActionCard';\n\nexport class PrivateMilitaryContractor extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.PRIVATE_MILITARY_CONTRACTOR,\n      cost: 18,\n      tags: [Tag.JOVIAN, Tag.SPACE],\n      resourceType: CardResource.FIGHTER,\n\n      behavior: {\n        addResources: 1,\n      },\n\n      action: {\n        spend: {titanium: 1},\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: 'U49',\n        renderData: CardRenderer.builder((b) => {\n          b.effect(\n            'When blocking damage from other players, you can use fighters here as if they were corruption ' +\n            'resources. You cannot use them for score bribing or collusion.',\n            (eb) => eb.corruptionShield().startEffect.resource(CardResource.FIGHTER).equals().corruption().asterix()).br;\n          b.action('Spend 1 titanium to add 1 fighter resource to this card.',\n            (ab) => ab.titanium(1).startAction.resource(CardResource.FIGHTER)).br;\n          b.resource(CardResource.FIGHTER);\n        }),\n        description: 'Add 1 fighter resource to this card.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Space Privateers",
  "tags" : [ "space" ],
  "victoryPoints" : -2,
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "corruption" : 3,
    "count" : 3
  } ],
  "resourceType" : "Fighter",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/SpacePrivateers.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Card} from '../Card';\nimport {all} from '../Options';\nimport {IActionCard} from '../ICard';\nimport {IPlayer} from '../../IPlayer';\nimport {PlayerInput} from '../../PlayerInput';\nimport {Resource} from '../../../common/Resource';\n\nexport class SpacePrivateers extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.SPACE_PRIVATEERS,\n      cost: 10,\n      tags: [Tag.SPACE],\n      resourceType: CardResource.FIGHTER,\n      victoryPoints: -2,\n      requirements: {corruption: 3},\n\n      behavior: {\n        addResources: 3,\n      },\n\n      metadata: {\n        cardNumber: 'U50',\n        renderData: CardRenderer.builder((b) => {\n          b.action('If there is at least 1 fighter on this card, steal 2 Mâ‚¬ from EACH OTHER player.',\n            (ab) => ab.empty().startAction.resource(CardResource.FIGHTER).asterix().colon().text('STEAL').megacredits(2, {all})).br;\n          b.effect(\n            'If 1 or more targets block this with corruption, remove 1 fighter from here.',\n            (eb) => eb.corruptionShield().startEffect.minus().resource(CardResource.FIGHTER)).br;\n          b.plainText('(Solo: Gain 2 Mâ‚¬ and remove 1 fighter from this card.)').br;\n          b.resource(CardResource.FIGHTER, 3);\n        }),\n        description: 'Requires 3 corruption. Put 3 fighter resources on this card.',\n      },\n    });\n  }\n  public data = {\n    action: 0,\n    rejected: false,\n  };\n\n  canAct(): boolean {\n    return this.resourceCount > 0;\n  }\n  action(player: IPlayer): PlayerInput | undefined {\n    if (player.game.isSoloMode()) {\n      player.stock.add(Resource.MEGACREDITS, 2, {log: true});\n      this.resourceCount--;\n      player.resolveInsuranceInSoloGame();\n      return undefined;\n    }\n\n    // TODO(kberg): Attacker should decide attack order.\n\n    // If a player is Mons Insurance, this probably won't go in preferred player order.\n    // TODO(kberg): devise a Mons Insurance solution.\n    let blocked = false;\n\n    const targets = player.getOpponents();\n    const waitingFor = new Set(targets);\n    for (const target of targets) {\n      target.maybeBlockAttack(player, (proceed) => {\n        if (proceed) {\n          target.stock.steal(Resource.MEGACREDITS, 2, player, {log: true});\n          target.resolveInsurance();\n        } else {\n          blocked = true;\n        }\n        waitingFor.delete(target);\n        if (waitingFor.size === 0 && blocked) {\n          player.removeResourceFrom(this, 1, {log: true});\n        }\n        return undefined;\n      });\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Personal Spacecruiser",
  "tags" : [ "space" ],
  "cost" : 15,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Fighter",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/PersonalSpacecruiser.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {Card} from '../Card';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class PersonalSpacecruiser extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.PERSONAL_SPACECRUISER,\n      cost: 15,\n      tags: [Tag.SPACE],\n      resourceType: CardResource.FIGHTER,\n\n      behavior: {\n        addResources: 1,\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U51',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('During the production phase, if there is at least 1 fighter resource on this card, ' +\n            'gain 2 Mâ‚¬ for each corruption resource you have.',\n          (eb) => eb.resource(CardResource.FIGHTER).startEffect.megacredits(2).slash().corruption().asterix).br;\n          b.resource(CardResource.FIGHTER).corruption(1).br;\n        }),\n        description: 'Put 1 fighter resource on this card. Gain 1 corruption.',\n      },\n    });\n  }\n  public onProductionPhase(player: IPlayer) {\n    if (this.resourceCount > 0) {\n      player.megaCredits += (2 * player.underworldData.corruption);\n    }\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Hyperspace Drive Prototype",
  "tags" : [ "science", "space" ],
  "cost" : 11,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/HyperspaceDrivePrototype.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {CardResource} from '../../../common/CardResource';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\n\nexport class HyperspaceDrivePrototype extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.HYPERSPACE_DRIVE_PROTOTYPE,\n      cost: 11,\n      tags: [Tag.SCIENCE, Tag.SPACE],\n\n      requirements: {tag: Tag.SCIENCE, count: 3},\n\n      metadata: {\n        cardNumber: 'U52',\n        renderData: CardRenderer.builder((b) => {\n          b.resource(CardResource.FIGHTER).or().titanium(1).asterix().br;\n          b.resource(CardResource.SCIENCE).or().tr(1).asterix().br;\n        }),\n        description: 'Requires that 3 science tags. ' +\n        'Put a fighter resource on a card you own, or gain 1 titanium if you have no suitable card. ' +\n        'Put a science resource on a card you own, or gain 1 TR if you have no suitable card.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const fighterCards = player.getResourceCards(CardResource.FIGHTER);\n    if (fighterCards.length > 0) {\n      player.game.defer(new AddResourcesToCard(player, CardResource.FIGHTER));\n    } else {\n      player.game.log('${0} has no fighter resource cards and gained 1 titanium.', (b) => b.player(player));\n      player.stock.titanium += 1;\n    }\n    const scienceCards = player.getResourceCards(CardResource.SCIENCE);\n    if (scienceCards.length > 0) {\n      player.game.defer(new AddResourcesToCard(player, CardResource.SCIENCE));\n    } else {\n      player.game.log('${0} has no science cards and gained 1 TR.', (b) => b.player(player));\n      player.increaseTerraformRating();\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Star Vegas",
  "tags" : [ "space", "city" ],
  "cost" : 32,
  "type" : "automated",
  "requirements" : [ {
    "cities" : 3,
    "all" : true,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/StarVegas.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {SpaceName} from '../../SpaceName';\nimport {PlaceCityTile} from '../../deferredActions/PlaceCityTile';\nimport {Space} from '../../boards/Space';\nimport {Resource} from '../../../common/Resource';\nimport {all} from '../Options';\n\nconst SPACE_CITIES = [\n  SpaceName.GANYMEDE_COLONY,\n  SpaceName.PHOBOS_SPACE_HAVEN,\n  SpaceName.STANFORD_TORUS,\n  SpaceName.LUNA_METROPOLIS,\n  SpaceName.DAWN_CITY,\n  SpaceName.STRATOPOLIS,\n  SpaceName.MAXWELL_BASE,\n  SpaceName.CERES_SPACEPORT,\n  SpaceName.DYSON_SCREENS,\n  SpaceName.LUNAR_EMBASSY,\n  SpaceName.VENERA_BASE,\n  // MARTIAN_TRANSHIPMENT_STATION,\n] as const;\n\ntype SpaceCity = typeof SPACE_CITIES[number];\nconst spaceCityNames: Record<SpaceCity, CardName> = {\n  [SpaceName.GANYMEDE_COLONY]: CardName.GANYMEDE_COLONY,\n  [SpaceName.PHOBOS_SPACE_HAVEN]: CardName.PHOBOS_SPACE_HAVEN,\n  [SpaceName.STANFORD_TORUS]: CardName.STANFORD_TORUS,\n  [SpaceName.LUNA_METROPOLIS]: CardName.LUNA_METROPOLIS,\n  [SpaceName.DAWN_CITY]: CardName.DAWN_CITY,\n  [SpaceName.STRATOPOLIS]: CardName.STRATOPOLIS,\n  [SpaceName.MAXWELL_BASE]: CardName.MAXWELL_BASE,\n  [SpaceName.CERES_SPACEPORT]: CardName.CERES_SPACEPORT,\n  [SpaceName.DYSON_SCREENS]: CardName.DYSON_SCREENS,\n  [SpaceName.LUNAR_EMBASSY]: CardName.LUNAR_EMBASSY,\n  [SpaceName.VENERA_BASE]: CardName.VENERA_BASE,\n} as const;\n\n\nexport class StarVegas extends Card {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.STAR_VEGAS,\n      cost: 32,\n      tags: [Tag.SPACE, Tag.CITY],\n      requirements: {cities: 3, all: true},\n\n      behavior: {\n        underworld: {\n          corruption: 2,\n        },\n      },\n\n      metadata: {\n        cardNumber: 'U53',\n        renderData: CardRenderer.builder((b) => {\n          b.city().asterix().corruption(2).br;\n          b.production((pb) => pb.megacredits(1).slash().city({all}));\n        }),\n        description: 'Requires any 3 cities in play. Place a city on a space reserved for a different space city. ' +\n        'Gain 2 corruption. Increase your Mâ‚¬ production one step for each city in play.',\n      },\n    });\n  }\n\n  private eligibleSpaces(player: IPlayer): ReadonlyArray<Space> {\n    const spaces = [];\n    for (const spaceId of SPACE_CITIES) {\n      try {\n        const space = player.game.board.getSpaceOrThrow(spaceId);\n        if (space.tile === undefined) {\n          spaces.push(space);\n        }\n      } catch (err) {\n        // This occurs with invalid spaces.\n      }\n    }\n    return spaces;\n  }\n\n  override bespokeCanPlay(player: IPlayer) {\n    return this.eligibleSpaces(player).length > 0;\n  }\n\n  override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    game.defer(new PlaceCityTile(player, {spaces: this.eligibleSpaces(player)})).andThen((space) => {\n      if (space !== undefined) {\n        const id = space.id as SpaceCity;\n        game.log('${0} placed ${1} on ${2}', (b) => b.player(player).cardName(this.name).string(spaceCityNames[id] ?? 'unknown'));\n        player.production.add(Resource.MEGACREDITS, (game.board.getCities()).length, {log: true});\n        if (space.tile !== undefined) { // Should not happen\n          space.tile.card = this.name;\n        }\n      }\n    });\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Private Resorts",
  "tags" : [ "building" ],
  "cost" : 6,
  "type" : "automated",
  "requirements" : [ {
    "oceans" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/PrivateResorts.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {Resource} from '../../../common/Resource';\n\nexport class PrivateResorts extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.PRIVATE_RESORTS,\n      type: CardType.AUTOMATED,\n      cost: 6,\n      tags: [Tag.BUILDING],\n\n      requirements: {oceans: 3},\n\n      behavior: {\n        production: {heat: -1},\n        underworld: {markThisGeneration: {}},\n      },\n\n      metadata: {\n        cardNumber: 'U54',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().production((pb) => pb.heat(1)).br;\n          b.megacredits(12).asterix().corruption(1).asterix();\n        }),\n        description: 'Requires 3 oceans. Reduce your heat production 1 step. ' +\n          'At the end of this generation only, during the production phase, gain 12 Mâ‚¬ and 1 corruption.',\n      },\n    });\n  }\n\n  public generationUsed: number = -1;\n\n  public onProductionPhase(player: IPlayer) {\n    if (this.generationUsed === player.game.generation) {\n      player.stock.add(Resource.MEGACREDITS, 12);\n      UnderworldExpansion.gainCorruption(player, 1);\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Earthquake Machine",
  "tags" : [ "science" ],
  "cost" : 15,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/EarthquakeMachine.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {all} from '../Options';\nimport {ExcavateSpaceDeferred} from '../../underworld/ExcavateSpaceDeferred';\n\nexport class EarthquakeMachine extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.EARTHQUAKE_MACHINE,\n      tags: [Tag.SCIENCE],\n      cost: 15,\n      requirements: {tag: Tag.SCIENCE, count: 2},\n\n      behavior: {\n        decreaseAnyProduction: {type: Resource.PLANTS, count: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U55',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 energy to excavate an underground resource on any space on Mars that has no tile on it.',\n            (ab) => ab.energy(1).startAction.excavate(1).asterix());\n          b.br;\n          b.production((pb) => pb.minus().plants(1, {all})).br;\n          b.plainText('Requires 2 science tags. Decrease any plant production 1 step');\n        }),\n      },\n    });\n  }\n\n  public canAct(player: IPlayer): boolean {\n    return player.energy > 0 && UnderworldExpansion.excavatableSpaces(player).length > 0;\n  }\n\n  public action(player: IPlayer) {\n    player.stock.deduct(Resource.ENERGY, 1);\n    const spaces = UnderworldExpansion.excavatableSpaces(player, true).filter((space) => space.tile === undefined);\n    player.game.defer(new ExcavateSpaceDeferred(player, spaces));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Micro-Geodesics",
  "tags" : [ "plant", "microbe" ],
  "cost" : 8,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Micro-Geodesics.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Neutrinograph",
  "tags" : [ "science" ],
  "victoryPoints" : 2,
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 4
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Neutrinograph.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {cancelled, digit} from '../Options';\n\nexport class Neutrinograph extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.NEUTRINOGRAPH,\n      tags: [Tag.SCIENCE],\n      cost: 10,\n\n      requirements: {tag: Tag.SCIENCE, count: 4},\n      victoryPoints: 2,\n\n      behavior: {\n        underworld: {identify: 2},\n      },\n\n      metadata: {\n        cardNumber: 'U57',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('When identifying underground resources EXCEPT by placing a tile or excavating, ' +\n          'you can re-identify spaces that already have an unclaimed token. ' +\n          'When you do, replace that token with a new one.', (eb) => {\n            eb.identify().startEffect.undergroundResources(1, {cancelled}).asterix();\n          }).br;\n          b.identify(2, {digit}).br;\n        }),\n        description: 'Requires 4 science tags. Identify 2 underground resources.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Soil Export",
  "tags" : [ "jovian", "venus", "space" ],
  "victoryPoints" : -1,
  "cost" : 7,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/SoilExport.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\n\nexport class SoilExport extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.SOIL_EXPORT,\n      type: CardType.EVENT,\n      cost: 7,\n      tags: [Tag.JOVIAN, Tag.VENUS, Tag.SPACE],\n      victoryPoints: -1,\n\n      behavior: {\n        underworld: {\n          excavate: 1,\n          markThisGeneration: {},\n        },\n      },\n\n\n      metadata: {\n        cardNumber: 'U58',\n        renderData: CardRenderer.builder((b) => {\n          b.excavate().br;\n          b.plainText('Excavate an underground resource.').br;\n          b.megacredits(12).asterix().br;\n          b.plainText('At the end of this generation only, during the production phase, gain 12 Mâ‚¬.');\n        }),\n      },\n    });\n  }\n\n  public generationUsed: number = -1;\n\n  public onProductionPhase(player: IPlayer) {\n    if (this.generationUsed === player.game.generation) {\n      player.stock.add(Resource.MEGACREDITS, 12);\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Artesian Aquifer",
  "tags" : [ "building" ],
  "cost" : 16,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/ArtesianAquifer.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {PlaceOceanTile} from '../../deferredActions/PlaceOceanTile';\n\nexport class ArtesianAquifer extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.ARTESIAN_AQUIFER,\n      tags: [Tag.BUILDING],\n      cost: 16,\n\n      metadata: {\n        cardNumber: 'U59',\n        renderData: CardRenderer.builder((b) => {\n          b.oceans(1).excavate().asterix();\n        }),\n        description: 'Place an ocean, then excavate the underground resource in its space, if possible.',\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer) {\n    return player.game.board.getAvailableSpacesForOcean(player).filter((space) => space.excavator === undefined);\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return player.game.canAddOcean() && this.availableSpaces(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const action = new PlaceOceanTile(player, {spaces: this.availableSpaces(player)})\n      .andThen((space) => {\n        UnderworldExpansion.excavate(player, space);\n      });\n    player.game.defer(action);\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Chemical Factory",
  "tags" : [ "building" ],
  "cost" : 18,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/ChemicalFactory.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {ActionCard} from '../ActionCard';\n\nexport class ChemicalFactory extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.CHEMICAL_FACTORY,\n      cost: 18,\n      tags: [Tag.BUILDING],\n\n      action: {\n        spend: {plants: 1},\n        underworld: {excavate: 1},\n      },\n\n      behavior: {\n        underworld: {corruption: 2},\n      },\n\n      metadata: {\n        cardNumber: 'U60',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 plant to excavate an underground resource.',\n            (ab) => ab.plants(1).startAction.excavate(1));\n          b.br;\n          b.corruption(2);\n        }),\n        description: 'Gain 2 corruption.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Corporate Theft",
  "tags" : [ ],
  "cost" : 10,
  "type" : "event",
  "requirements" : [ {
    "corruption" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/CorporateTheft.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {RemoveResourcesFromCard} from '../../deferredActions/RemoveResourcesFromCard';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\n\nexport class CorporateTheft extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.CORPORATE_THEFT,\n      type: CardType.EVENT,\n      cost: 10,\n\n      requirements: {corruption: 2},\n\n      metadata: {\n        cardNumber: 'U61',\n        renderData: CardRenderer.builder((b) => {\n          b.text('STEAL').wild(1).corruption().asterix();\n        }),\n        description: 'Requires 2 corruption. Remove 1 resource from a card belonging to a different player. ' +\n          'Then, if you have a card that can hold it, put it on such a card. ' +\n          // 'If target paid corruption to block this, you gain that corruption.',\n          'If the target blocked this, you gain 1 corruption. ' +\n          'NOTE: Do not use in single player games.',\n      },\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    if (player.game.isSoloMode()) {\n      return false;\n    }\n    return RemoveResourcesFromCard.getAvailableTargetCards(player, undefined, 'opponents').length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    game.defer(new RemoveResourcesFromCard(player, undefined, 1, {source: 'opponents', blockable: true, autoselect: false})).andThen((response) => {\n      if (response.proceed && response.card !== undefined) {\n        const type = response.card.resourceType;\n        if (player.getResourceCards(type).length > 0) {\n          game.defer(new AddResourcesToCard(player, type, {log: true}));\n        }\n      } else {\n        // This is almost right beacuse it's not clear the player used a fighter to block the steal.\n        UnderworldExpansion.gainCorruption(player, 1, {log: true});\n      }\n    });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Underground Research Center",
  "tags" : [ "building" ],
  "cost" : 18,
  "type" : "automated",
  "requirements" : [ {
    "excavation" : 5,
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/UndergroundResearchCenter.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {ALL_TAGS, Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {Units} from '../../../common/Units';\nimport {inplaceRemove} from '../../../common/utils/utils';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {Priority} from '../../deferredActions/Priority';\n\nexport class UndergroundResearchCenter extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.UNDERGROUND_RESEARCH_CENTER,\n      tags: [Tag.BUILDING],\n      cost: 18,\n\n      requirements: {excavation: 5},\n\n      metadata: {\n        cardNumber: 'U62',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.minus().energy(1)).excavate().cards(2).asterix();\n        }),\n\n        description: 'Requires 5 excavation markers. Decrease your energy production 1 step. ' +\n        'Excavate an underground resource. Choose a tag that is not the wild tag or clone tag. ' +\n        'Draw 2 cards with that tag.',\n      },\n    });\n  }\n\n  private excavatableSpacesWithEnergyProduction(player: IPlayer) {\n    return UnderworldExpansion.excavatableSpaces(player).filter(\n      (space) => space.undergroundResources === 'energy1production');\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    if (player.production.energy > 0) {\n      return true;\n    }\n    if (this.excavatableSpacesWithEnergyProduction(player).length > 0) {\n      this.warnings.add('underworldMustExcavateEnergy');\n      return true;\n    }\n    return false;\n  }\n\n  private chooseTagsAndDraw(player: IPlayer) {\n    const tags = [...ALL_TAGS];\n    inplaceRemove(tags, Tag.WILD);\n    inplaceRemove(tags, Tag.CLONE);\n\n    const options = tags.map((tag) => {\n      return new SelectOption(tag).andThen(() => {\n        player.drawCard(2, {tag: tag});\n        return undefined;\n      });\n    });\n    return new OrOptions(...options);\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const spaces = player.production.energy > 0 ?\n      UnderworldExpansion.excavatableSpaces(player) :\n      this.excavatableSpacesWithEnergyProduction(player);\n\n    return new SelectSpace('Select space to excavate', spaces)\n      .andThen((space) => {\n        UnderworldExpansion.excavate(player, space);\n        // Energy production is granted immediately, so in case this player can only do this because there's energy production on the board, it's now theirs.\n        player.production.adjust(Units.of({energy: -1}));\n        player.defer(this.chooseTagsAndDraw(player), Priority.DRAW_CARDS);\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Price Wars",
  "tags" : [ ],
  "victoryPoints" : -1,
  "cost" : 1,
  "type" : "event",
  "requirements" : [ {
    "corruption" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/PriceWars.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {all} from '../Options';\n\nexport class PriceWars extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.PRICE_WARS,\n      type: CardType.EVENT,\n      cost: 1,\n\n      requirements: {corruption: 2},\n      victoryPoints: -1,\n\n      behavior: {\n        underworld: {markThisGeneration: {}},\n      },\n\n      metadata: {\n        cardNumber: 'U63',\n        hasExternalHelp: true,\n        renderData: CardRenderer.builder((b) => {\n          b.steel(1).titanium(1).colon().plus().megacredits(1).asterix().br;\n          b.steel(1, {all}).titanium(1, {all}).colon().minus().megacredits(1, {all}).asterix().br;\n        }),\n        description: 'Requires 2 corruption. Until the end of this generation, ' +\n          'your steel and titanium are worth 1 more Mâ‚¬ each, ' +\n          'and steel and titanium for other players is worth 1 Mâ‚¬ less.',\n      },\n    });\n  }\n\n  public generationUsed: number | undefined = undefined;\n\n  private increase(player: IPlayer) {\n    for (const p of player.game.getPlayersInGenerationOrder()) {\n      if (p === player) {\n        p.increaseSteelValue();\n        p.increaseTitaniumValue();\n      } else {\n        p.decreaseSteelValue();\n        p.decreaseTitaniumValue();\n      }\n    }\n  }\n\n  private decrease(player: IPlayer) {\n    for (const p of player.game.getPlayersInGenerationOrder()) {\n      if (p === player) {\n        p.decreaseSteelValue();\n        p.decreaseTitaniumValue();\n      } else {\n        p.increaseSteelValue();\n        p.increaseTitaniumValue();\n      }\n    }\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    this.increase(player);\n    player.game.log('${0} is in effect for the rest of this generation.', (b) => b.card(this));\n    player.game.log('Steel and titanium are worth 1 Mâ‚¬ less, except for ${0}, whose steel and titanium are worth 1 Mâ‚¬ more.', (b) => b.player(player));\n    return undefined;\n  }\n\n  public onProductionPhase(player: IPlayer) {\n    if (this.generationUsed === player.game.generation) {\n      this.decrease(player);\n    }\n    return undefined;\n  }\n\n  // Warning: this is not Playwrights/Odyssey compatible because once the card is discarded, it's not effective anymore.\n  // TODO(kberg): When making this card work with P/O, remove the code in those cards that disallows them.\n  public override onDiscard(player: IPlayer) {\n    this.decrease(player);\n    this.generationUsed = undefined;\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Anti-trust Crackdown",
  "tags" : [ "earth" ],
  "victoryPoints" : 2,
  "cost" : 22,
  "type" : "event",
  "requirements" : [ {
    "corruption" : 0,
    "max" : true,
    "count" : 0
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Anti-trustCrackdown.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Monopoly",
  "tags" : [ ],
  "victoryPoints" : -2,
  "cost" : 12,
  "type" : "event",
  "requirements" : [ {
    "corruption" : 3,
    "count" : 3
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Monopoly.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {SelectResource} from '../../inputs/SelectResource';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {all} from '../Options';\nimport {Units} from '../../../common/Units';\n\nexport class Monopoly extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.MONOPOLY,\n      cost: 12,\n      requirements: {corruption: 3},\n      victoryPoints: -2,\n\n      metadata: {\n        cardNumber: 'U65',\n        renderData: CardRenderer.builder((b) => {\n          b.text('STEAL').production((pb) => pb.wild(1, {all})).br;\n        }),\n        description: 'Requires 3 corruption. Choose a standard production type. ' +\n          'Steal up to 1 unit of that production from EACH OTHER player. They can block this with corruption.',\n      },\n    });\n  }\n\n  private availableProductions(player: IPlayer): Array<keyof Units> {\n    const targets = player.getOpponents();\n    return Units.keys.filter((unit) => {\n      const resource = Units.ResourceMap[unit];\n      return targets.some((target) => target.canHaveProductionReduced(resource, 1, player));\n    });\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.availableProductions(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    return new SelectResource(\n      'Select which resource type to steal from all other players.',\n      this.availableProductions(player))\n      .andThen((unitKey) => {\n        const resource = Units.ResourceMap[unitKey];\n        if (player.game.isSoloMode()) {\n          player.production.add(resource, 1, {log: true});\n          player.resolveInsuranceInSoloGame();\n          return undefined;\n        }\n        for (const target of player.getOpponents()) {\n          if (target.canHaveProductionReduced(resource, 1, player)) {\n            target.maybeBlockAttack(player, (proceed: boolean) => {\n              if (proceed) {\n                target.production.add(resource, -1, {log: true, from: player, stealing: true});\n                player.production.add(resource, 1, {log: false});\n                target.resolveInsurance();\n              }\n              return undefined;\n            });\n          }\n        }\n        return undefined;\n      });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Staged Protests",
  "tags" : [ ],
  "cost" : 6,
  "type" : "event",
  "requirements" : [ {
    "corruption" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/StagedProtests.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class StagedProtests extends Card implements IProjectCard {\n  public generationUsed: number = -1;\n\n  constructor() {\n    super({\n      name: CardName.STAGED_PROTESTS,\n      type: CardType.EVENT,\n      cost: 6,\n\n      requirements: {corruption: 1},\n\n      behavior: {\n        underworld: {\n          corruption: 1,\n          markThisGeneration: {},\n        },\n      },\n\n      metadata: {\n        cardNumber: 'U66',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption(1).br;\n          // TODO(kberg): replace with award().slash.milestone() when award and milestone can be stacked.\n          b.plate('Awards and Milestones').colon().megacredits(8).asterix();\n        }),\n        description: 'Requires 1 corruption. Gain 1 corruption. Until the end of this generation, milestones and awards cost +8 Mâ‚¬.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Plant Tax",
  "tags" : [ "mars" ],
  "cost" : 7,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/PlantTax.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {RemoveResources} from '../../deferredActions/RemoveResources';\nimport {Resource} from '../../../common/Resource';\nimport {all} from '../Options';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class PlantTax extends Card implements IProjectCard {\n  public generationUsed: number = -1;\n\n  constructor() {\n    super({\n      name: CardName.PLANT_TAX,\n      type: CardType.EVENT,\n      cost: 7,\n      tags: [Tag.MARS],\n\n      behavior: {\n        underworld: {markThisGeneration: {}},\n      },\n\n      metadata: {\n        cardNumber: 'U67',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().plants(2, {all}).asterix().corruption().asterix();\n        }),\n        description: 'ALL players lose 2 plants. Players can block this with corruption. Gain 1 corruption DURING THE PRODUCTION PHASE OF THIS GENERATION.',\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    for (const target of game.getPlayers()) {\n      game.defer(new RemoveResources(target, player, Resource.PLANTS, 2));\n    }\n    return undefined;\n  }\n\n  public onProductionPhase(player: IPlayer) {\n    if (this.generationUsed === player.game.generation) {\n      UnderworldExpansion.gainCorruption(player, 1, {log: true});\n    }\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Infrastructure Overload",
  "tags" : [ "power" ],
  "victoryPoints" : -1,
  "cost" : 3,
  "type" : "event",
  "requirements" : [ {
    "corruption" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/InfrastructureOverload.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {all} from '../Options';\nimport {Resource} from '../../../common/Resource';\n\nexport class InfrastructureOverload extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.INFRASTRUCTURE_OVERLOAD,\n      type: CardType.EVENT,\n      cost: 3,\n      tags: [Tag.POWER],\n\n      requirements: {corruption: 2},\n\n      victoryPoints: -1,\n\n      behavior: {\n        decreaseAnyProduction: {count: 2, type: Resource.ENERGY},\n      },\n\n      metadata: {\n        cardNumber: 'U68',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.text('-2').energy(1, {all}));\n        }),\n        description: 'Requires 2 corruption. Reduce any energy production 2 steps.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Crater Survey",
  "tags" : [ "mars" ],
  "cost" : 5,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/CraterSurvey.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {digit} from '../Options';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class CraterSurvey extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.CRATER_SURVEY,\n      type: CardType.EVENT,\n      cost: 5,\n      tags: [Tag.MARS],\n\n      behavior: {\n        addResourcesToAnyCard: {count: 2, type: CardResource.DATA},\n        underworld: {identify: 4},\n      },\n\n      metadata: {\n        cardNumber: 'U69',\n        renderData: CardRenderer.builder((b) => {\n          b.resource(CardResource.DATA, 2).asterix().identify(4, {digit});\n        }),\n        description: 'Add 2 data resources to ANOTHER card. Identify 4 underground resources.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Induced Tremor",
  "tags" : [ ],
  "cost" : 6,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/InducedTremor.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {cancelled} from '../Options';\nimport {ExcavateSpaceDeferred} from '../../underworld/ExcavateSpaceDeferred';\nimport {Space} from '../../boards/Space';\nimport {SelectSpace} from '../../inputs/SelectSpace';\n\nexport class InducedTremor extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.EVENT,\n      name: CardName.INDUCED_TREMOR,\n      cost: 6,\n\n      metadata: {\n        cardNumber: 'U70',\n        renderData: CardRenderer.builder((b) => {\n          b.excavate().undergroundResources(1, {cancelled}).asterix();\n        }),\n        description: 'Excavate an underground resource, then pick an adjacent space with an unclaimed resource token. ' +\n          'Remove that token. The space can be identified again.',\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer) {\n    return UnderworldExpansion.excavatableSpaces(player).filter((space) => {\n      return player.game.board.getAdjacentSpaces(space).some((s) => this.eligibleNeighbor(s));\n    });\n  }\n\n  private eligibleNeighbor(space: Space) {\n    return space.undergroundResources === undefined || space.excavator === undefined;\n  }\n\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    return this.availableSpaces(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const game = player.game;\n    game.defer(\n      new ExcavateSpaceDeferred(player, this.availableSpaces(player)).andThen((space) => {\n        const eligibleNeighbors = game.board.getAdjacentSpaces(space).filter((s) => this.eligibleNeighbor(s));\n        player.defer(new SelectSpace('Select unclaimed resource token to remove', eligibleNeighbors).andThen((s) => {\n          UnderworldExpansion.removeUnclaimedToken(game, s);\n          return undefined;\n        }));\n      }));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Underground Habitat",
  "tags" : [ "mars", "building", "plant" ],
  "cost" : 12,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/UndergroundHabitat.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class UndergroundHabitat extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.UNDERGROUND_HABITAT,\n      cost: 12,\n      tags: [Tag.MARS, Tag.BUILDING, Tag.PLANT],\n\n      behavior: {\n        production: {plants: 1},\n        addResourcesToAnyCard: {count: 1, type: CardResource.ANIMAL, autoSelect: true},\n        underworld: {excavate: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U71',\n        renderData: CardRenderer.builder((b) => {\n          b.excavate(1).production((pb) => pb.plants(1)).resource(CardResource.ANIMAL).asterix();\n        }),\n        description: 'Excavate an underground resource. Increase your plant production 1 step. Add 1 animal on another card.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Underground Shelters",
  "tags" : [ "mars", "building" ],
  "victoryPoints" : "special",
  "cost" : 14,
  "type" : "automated",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/UndergroundShelters.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardRenderDynamicVictoryPoints} from '../render/CardRenderDynamicVictoryPoints';\nimport {IPlayer} from '../../IPlayer';\nimport {sum} from '../../../common/utils/utils';\n\nexport class UndergroundShelters extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.UNDERGROUND_SHELTERS,\n      cost: 14,\n      tags: [Tag.MARS, Tag.BUILDING],\n      victoryPoints: 'special',\n\n      behavior: {\n        underworld: {excavate: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U72',\n        // TODO(kberg): Custom VP icon.\n        victoryPoints: CardRenderDynamicVictoryPoints.undergroundShelters(),\n        renderData: CardRenderer.builder((b) => {\n          b.excavate(1);\n        }),\n        description: 'Excavate an underground resource. At the end of the game, your cities score 1 VP per 3 excavation markers YOU have in that city space and adjacent spaces.',\n      },\n    });\n  }\n\n  public override getVictoryPoints(player: IPlayer): number {\n    const cities = player.game.board.getCities(player);\n    const counts = cities.map((city) => {\n      return [city, ...player.game.board.getAdjacentSpaces(city)].filter((space) => space.excavator === player).length;\n    });\n    const vps = counts.map((count) => Math.floor(count / 3));\n    return sum(vps);\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Volunteer Mining Initiative",
  "tags" : [ "mars" ],
  "cost" : 12,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/VolunteerMiningInitiative.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {all} from '../Options';\n\nexport class VolunteerMiningInitiative extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.VOLUNTEER_MINING_INITIATIVE,\n      type: CardType.EVENT,\n      cost: 12,\n      tags: [Tag.MARS],\n\n      behavior: {\n        underworld: {excavate: {count: {cities: {}, all: true, per: 3}}},\n      },\n\n      metadata: {\n        cardNumber: 'U73',\n        renderData: CardRenderer.builder((b) => {\n          b.excavate(1).slash().text('3').city({all});\n        }),\n        description: 'Excavate 1 underground resource for every 3 cities in play.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Nanofoundry",
  "tags" : [ "power", "science" ],
  "victoryPoints" : 2,
  "cost" : 18,
  "type" : "automated",
  "requirements" : [ {
    "tag" : "science",
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Nanofoundry.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {digit} from '../Options';\n\nexport class Nanofoundry extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.NANOFOUNDRY,\n      type: CardType.AUTOMATED,\n      cost: 18,\n      tags: [Tag.POWER, Tag.SCIENCE],\n      victoryPoints: 2,\n\n      requirements: {tag: Tag.SCIENCE, count: 2},\n\n      behavior: {\n        production: {energy: -5},\n        drawCard: {count: {tag: Tag.POWER}},\n      },\n\n      metadata: {\n        cardNumber: 'U74',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.minus().energy(5, {digit})).cards(1).slash().tag(Tag.POWER);\n        }),\n        description: 'Requires 2 science tags. Reduce your energy production 5 steps. ' +\n          'Draw 1 card for every power tag you have, including this.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Battery Factory",
  "tags" : [ "power", "building" ],
  "cost" : 8,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/BatteryFactory.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {ActionCard} from '../ActionCard';\n\nexport class BatteryFactory extends ActionCard implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.BATTERY_FACTORY,\n      cost: 8,\n      tags: [Tag.POWER, Tag.BUILDING],\n\n      action: {\n        spend: {energy: 1},\n        stock: {megacredits: {tag: Tag.POWER}},\n      },\n\n      metadata: {\n        cardNumber: 'U75',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 1 energy to gain 1 Mâ‚¬ for each power tag you have.',\n            (ab) => ab.energy(1).startAction.megacredits(1).slash().tag(Tag.POWER));\n        }),\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Voltaic Metallurgy",
  "tags" : [ "science", "power" ],
  "cost" : 8,
  "type" : "active",
  "requirements" : [ {
    "tag" : "science",
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/VoltaicMetallurgy.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IActionCard} from '../ICard';\nimport {SelectAmount} from '../../inputs/SelectAmount';\nimport {message} from '../../logs/MessageBuilder';\nimport {Resource} from '../../../common/Resource';\n\nexport class VoltaicMetallurgy extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      name: CardName.VOLTAIC_METALLURGY,\n      type: CardType.ACTIVE,\n      cost: 8,\n      tags: [Tag.SCIENCE, Tag.POWER],\n\n      requirements: {tag: Tag.SCIENCE, count: 1},\n\n      metadata: {\n        cardNumber: 'U76',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend any number of steel to gain the same amount of titanium (max is the number of power tags you have.)', (ab) => {\n            ab.text('X').steel(1, {secondaryTag: Tag.POWER}).startAction.text('X').titanium(1);\n          });\n        }),\n        description: 'Requires 1 science tag.',\n      },\n    });\n  }\n\n  public canAct(player: IPlayer) {\n    return player.tags.count(Tag.POWER) > 0 && player.stock.steel > 0;\n  }\n\n  public action(player: IPlayer) {\n    const max = Math.min(player.tags.count(Tag.POWER), player.stock.steel);\n    return new SelectAmount(\n      message('Select up to ${1} steel to convert to titanium', (b) => b.number(max)),\n      'Convert Steel', 1, max, false)\n      .andThen((amount) => {\n        player.stock.deduct(Resource.STEEL, amount);\n        player.stock.add(Resource.TITANIUM, amount);\n        player.game.log('${0} converted ${1} units of steel to titanium.', (b) => b.player(player).number(amount));\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Public Spaceline",
  "tags" : [ "earth", "earth", "jovian", "jovian", "venus", "venus", "mars", "mars" ],
  "cost" : 18,
  "type" : "active",
  "requirements" : [ {
    "tag" : "space",
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/PublicSpaceline.ts",
  "sourceCode" : "import {IProjectCard} from '../IProjectCard';\nimport {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class PublicSpaceline extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.PUBLIC_SPACELINE,\n      cost: 18,\n      tags: [Tag.EARTH, Tag.EARTH, Tag.JOVIAN, Tag.JOVIAN, Tag.VENUS, Tag.VENUS, Tag.MARS, Tag.MARS],\n\n      requirements: {tag: Tag.SPACE, count: 5},\n\n      behavior: {\n        production: {megacredits: 2},\n      },\n\n      metadata: {\n        cardNumber: 'U77',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.megacredits(2)).br;\n          b.plainText('Increase your Mâ‚¬ production 2 steps').br;\n          b.tag(Tag.EARTH).tag(Tag.EARTH).tag(Tag.JOVIAN).tag(Tag.JOVIAN).br;\n          b.tag(Tag.VENUS).tag(Tag.VENUS).tag(Tag.MARS).tag(Tag.MARS);\n        }),\n        description: 'Requires 5 space tags. This card has 2 Earth tags, 2 Jovian tags, 2 Venus tags, and 2 Mars tags.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Martian Express",
  "tags" : [ "mars" ],
  "victoryPoints" : 1,
  "cost" : 5,
  "type" : "active",
  "requirements" : [ {
    "cities" : 1,
    "all" : true,
    "count" : 1
  } ],
  "resourceType" : "Ware",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/MartianExpress.ts",
  "sourceCode" : "import {Card} from '../Card';\nimport {CardType} from '../../../common/cards/CardType';\nimport {IPlayer} from '../../IPlayer';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Resource} from '../../../common/Resource';\nimport {IActionCard} from '../ICard';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class MartianExpress extends Card implements IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.MARTIAN_EXPRESS,\n      cost: 5,\n      tags: [Tag.MARS],\n      victoryPoints: 1,\n      requirements: {cities: 1, all: true},\n      resourceType: CardResource.WARE,\n\n      metadata: {\n        cardNumber: 'U78',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('This card can receive any resource that can be placed on ANY card. Resources placed here get converted to wares resources.',\n            (ab) => ab.wild(1).asterix().startEffect.resource(CardResource.WARE)).br;\n          b.action('Remove all wares from here and gain 1 Mâ‚¬ for each ware removed.',\n            (ab) => ab.text('x').resource(CardResource.WARE).startAction.text('x').megacredits(1));\n        }),\n        description: 'Requires 1 city in play.',\n      },\n    });\n  }\n\n  canAct(): boolean {\n    return this.resourceCount > 0;\n  }\n\n  action(player: IPlayer): undefined {\n    const count = this.resourceCount;\n    player.stock.add(Resource.MEGACREDITS, count);\n    this.resourceCount = 0;\n    player.game.log('${0} used the ${1} action to convert ${2} wares into ${2} Mâ‚¬',\n      (b) => b.player(player).card(this).number(count));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Expedition Vehicles",
  "tags" : [ "science" ],
  "victoryPoints" : 1,
  "cost" : 10,
  "type" : "active",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/ExpeditionVehicles.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {isHazardTileType} from '../../../common/AresTileType';\nimport {BoardType} from '../../boards/BoardType';\nimport {MoonExpansion} from '../../moon/MoonExpansion';\n\nexport class ExpeditionVehicles extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.EXPEDITION_VEHICLES,\n      type: CardType.ACTIVE,\n      cost: 10,\n      tags: [Tag.SCIENCE],\n\n      victoryPoints: 1,\n\n      metadata: {\n        cardNumber: 'U79',\n        renderData: CardRenderer.builder((b) => {\n          b.effect(\n            'After you place a tile (on Mars or in space) that has no adjacent tiles, draw a card.',\n            (eb) => eb.emptyTile().asterix().startEffect.cards(1)).br;\n        }),\n      },\n    });\n  }\n\n  onTilePlaced(cardOwner: IPlayer, activePlayer: IPlayer, space: Space, boardType: BoardType) {\n    if (cardOwner === activePlayer) {\n      const game = activePlayer.game;\n      const board = boardType === BoardType.MARS ? game.board : MoonExpansion.moonData(game).moon;\n      const adjacentSpacesWithTiles = board.getAdjacentSpaces(space)\n        .filter((space) => {\n          return space.tile !== undefined && !isHazardTileType(space.tile.tileType);\n        });\n      if (adjacentSpacesWithTiles.length === 0) {\n        cardOwner.drawCard(1);\n      }\n    }\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Cut-throat Budgeting",
  "tags" : [ ],
  "victoryPoints" : -2,
  "cost" : 2,
  "type" : "event",
  "requirements" : [ {
    "corruption" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Cut-throatBudgeting.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Geological Survey:underworld",
  "tags" : [ "mars", "science" ],
  "cost" : 2,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/GeologicalSurvey:underworld.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Research & Development Hub",
  "tags" : [ "science", "building" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 14,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Data",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Research&DevelopmentHub.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Planetary Rights Buyout",
  "tags" : [ ],
  "victoryPoints" : -3,
  "cost" : 28,
  "type" : "event",
  "requirements" : [ {
    "corruption" : 5,
    "count" : 5
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/PlanetaryRightsBuyout.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\n\nexport class PlanetaryRightsBuyout extends Card implements IProjectCard {\n  constructor() {\n    super({\n      name: CardName.PLANETARY_RIGHTS_BUYOUT,\n      type: CardType.EVENT,\n      cost: 28,\n\n      requirements: {corruption: 5},\n      behavior: {tr: 7},\n      victoryPoints: -3,\n\n      metadata: {\n        cardNumber: 'U85',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(7);\n        }),\n        description: 'Requires 5 corruption. Gain 7 TR',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Investigative Journalism",
  "tags" : [ "earth" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 2
  },
  "cost" : 3,
  "type" : "active",
  "requirements" : [ ],
  "resourceType" : "Journalism",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/InvestigativeJournalism.ts",
  "sourceCode" : "import {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardType} from '../../../common/cards/CardType';\nimport {Card} from '../Card';\nimport {IActionCard} from '../ICard';\nimport {CardResource} from '../../../common/CardResource';\nimport {IPlayer} from '../../IPlayer';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\nimport {SelectPlayer} from '../../inputs/SelectPlayer';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {TITLES} from '../../inputs/titles';\n\nexport class InvestigativeJournalism extends Card implements IProjectCard, IActionCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.INVESTIGATIVE_JOURNALISM,\n      cost: 3,\n      tags: [Tag.EARTH],\n      resourceType: CardResource.JOURNALISM,\n      victoryPoints: {resourcesHere: {}, per: 2},\n\n      behavior: {\n        production: {megacredits: -2},\n      },\n\n      metadata: {\n        cardNumber: 'U87',\n        renderData: CardRenderer.builder((b) => {\n          b.action('Spend 5 Mâ‚¬ and remove 1 corruption from ANOTHER player with more corruption than you to add 1 journalism resource on this card.',\n            (ab) => ab.megacredits(5).corruption(1).asterix().startAction.resource(CardResource.JOURNALISM)).br;\n          b.production((pb) => pb.megacredits(-2));\n        }),\n        description: 'Decrease your Mâ‚¬ production 2 steps. 1 VP per 2 journalism resources on this card.',\n      },\n    });\n  }\n\n  public canAct(player: IPlayer) {\n    return player.canAfford(5) && player.game.getPlayers().some((p) => p.underworldData.corruption > player.underworldData.corruption);\n  }\n\n  public action(player: IPlayer) {\n    player.game.defer(new SelectPaymentDeferred(player, 5, {title: TITLES.payForCardAction(this.name)}))\n      .andThen(() => {\n        const moreCorruptPlayers = player.game.getPlayers().filter((p) => p.underworldData.corruption > player.underworldData.corruption);\n        player.defer(new SelectPlayer(moreCorruptPlayers, 'Select player to lose 1 corruption', 'Select player')\n          .andThen((target) => {\n            UnderworldExpansion.loseCorruption(target, 1, {log: true});\n            player.addResourceTo(this, 1);\n            return undefined;\n          }));\n      });\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Whales",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : 1
  },
  "cost" : 10,
  "type" : "active",
  "requirements" : [ {
    "oceans" : 6,
    "count" : 6
  } ],
  "resourceType" : "Animal",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Whales.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {Size} from '../../../common/cards/render/Size';\n\nexport class Whales extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.WHALES,\n      cost: 10,\n      tags: [Tag.ANIMAL],\n      resourceType: CardResource.ANIMAL,\n      victoryPoints: {resourcesHere: 1},\n      requirements: {oceans: 6},\n\n      metadata: {\n        cardNumber: 'U88',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Whenever you would gain an ocean when there are already 9 oceans on the board, add an animal to this card',\n            (b) => b.oceans(1).text('(9)', Size.SMALL, true).startEffect.resource(CardResource.ANIMAL));\n        }),\n        description: 'Requires 6 oceans. 1 VP for each animal on this card.',\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Guerilla Ecologists",
  "tags" : [ "plant" ],
  "cost" : 9,
  "type" : "automated",
  "requirements" : [ {
    "corruption" : 1,
    "count" : 1
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/GuerillaEcologists.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {digit} from '../Options';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {SelectSpace} from '../../inputs/SelectSpace';\n\nexport class GuerillaEcologists extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.AUTOMATED,\n      name: CardName.GUERILLA_ECOLOGISTS,\n      cost: 9,\n      tags: [Tag.PLANT],\n\n      requirements: {corruption: 1},\n\n      metadata: {\n        cardNumber: 'U89',\n        renderData: CardRenderer.builder((b) => {\n          b.minus().plants(4, {digit}).greenery().asterix();\n        }),\n        // description: 'Requires 1 corruption and that you lose 4 plants. Place a greenery tile IGNORING ADJACENCY RESTRICTIONS.',\n        description: 'Requires 1 corruption. Spend 4 plants to place a greenery tile IGNORING ADJACENCY RESTRICTIONS.',\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer): ReadonlyArray<Space> {\n    return player.game.board.getAvailableSpacesOnLand(player);\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    if (player.plants >= 4 || (player.plants >= 3 && player.cardIsInEffect(CardName.VIRAL_ENHANCERS))) {\n      return this.availableSpaces(player).length > 0;\n    }\n    return false;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    const availableSpaces = this.availableSpaces(player);\n    if (availableSpaces.length === 0) {\n      return undefined;\n    }\n\n    player.plants -= 4; // This temporarily breaks things if the player only has 3, but Viral Enhancers makes up for it.\n    return new SelectSpace('Select space for greenery tile', availableSpaces)\n      .andThen((space) => {\n        player.game.addGreenery(player, space);\n        return undefined;\n      });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Thiolava Vents",
  "tags" : [ "microbe" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 13,
  "type" : "active",
  "requirements" : [ {
    "oceans" : 1,
    "count" : 1
  } ],
  "resourceType" : "Microbe",
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/ThiolavaVents.ts",
  "sourceCode" : "import {CardType} from '../../../common/cards/CardType';\nimport {IProjectCard} from '../IProjectCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Card} from '../Card';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardResource} from '../../../common/CardResource';\nimport {IPlayer} from '../../IPlayer';\nimport {Resource} from '../../../common/Resource';\n\nexport class ThiolavaVents extends Card implements IProjectCard {\n  constructor() {\n    super({\n      type: CardType.ACTIVE,\n      name: CardName.THIOLAVA_VENTS,\n      cost: 13,\n      tags: [Tag.MICROBE],\n      resourceType: CardResource.MICROBE,\n\n      requirements: {oceans: 1},\n\n      victoryPoints: {resourcesHere: {}, per: 3},\n\n      behavior: {\n        production: {heat: 2},\n        addResources: 2, // This is the \"includes this\".\n      },\n\n      metadata: {\n        cardNumber: 'U90',\n        renderData: CardRenderer.builder((b) => {\n          b.effect('Each time you increase your heat production, including this, put 1 microbe on this card.',\n            (eb) => eb.production((pb) => pb.heat(1)).startEffect.resource(CardResource.MICROBE));\n          b.br;\n          b.production((pb) => pb.heat(2));\n        }),\n        description: 'Requires an ocean. Increase your heat production 2 steps. ' +\n          '1 VP per 3 microbes on this card.',\n      },\n    });\n  }\n\n  public onProductionGain(player: IPlayer, resource: Resource, amount: number) {\n    if (amount <= 0 || resource !== Resource.HEAT) {\n      return;\n    }\n    player.addResourceTo(this, {qty: amount, log: true});\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Hackers:u",
  "tags" : [ ],
  "victoryPoints" : -1,
  "cost" : 3,
  "type" : "automated",
  "requirements" : [ {
    "corruption" : 2,
    "count" : 2
  } ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Hackers:u.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Hired Raiders:u",
  "tags" : [ ],
  "cost" : 1,
  "type" : "event",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/HiredRaiders:u.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Hadesphere",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 36,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Hadesphere.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActiveCorporationCard} from '../corporation/CorporationCard';\nimport {digit} from '../Options';\n\nexport class Hadesphere extends ActiveCorporationCard {\n  constructor() {\n    super({\n      name: CardName.HADESPHERE,\n      tags: [Tag.BUILDING],\n      startingMegaCredits: 36,\n\n      behavior: {\n        stock: {steel: 5},\n      },\n\n      action: {\n        underworld: {excavate: 1},\n      },\n\n      firstAction: {\n        text: 'Identify any 3 underground resources on Mars.',\n        underworld: {\n          identify: 3,\n        },\n      },\n\n      metadata: {\n        cardNumber: 'UC01',\n        description: 'You start with 36 Mâ‚¬ and 5 steel. As your first action, identify any 3 underground resources on Mars.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(36).steel(5, {digit}).identify(3, {digit}).br;\n          b.corpBox('action', (ce) => {\n            ce.action('Excavate an underground resource.', (ab) => {\n              ab.empty().startAction.excavate(1);\n            });\n          });\n        }),\n      },\n    });\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Demetron Labs",
  "tags" : [ "science" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Data",
  "startingMegaCredits" : 45,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/DemetronLabs.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {SpaceType} from '../../../common/boards/SpaceType';\nimport {IActionCard} from '../ICard';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {LogHelper} from '../../LogHelper';\nimport {digit} from '../Options';\nimport {sum} from '../../../common/utils/utils';\nimport {Space} from '../../boards/Space';\nimport {CardResource} from '../../../common/CardResource';\nimport {AddResourcesToCard} from '../../deferredActions/AddResourcesToCard';\n\nexport class DemetronLabs extends CorporationCard implements IActionCard {\n  constructor() {\n    super({\n      name: CardName.DEMETRON_LABS,\n      tags: [Tag.SCIENCE],\n      startingMegaCredits: 45,\n      resourceType: CardResource.DATA,\n\n      behavior: {\n        addResources: 3,\n      },\n\n      metadata: {\n        cardNumber: 'UC02',\n        description: 'You start with 45 Mâ‚¬ and 3 data on this card.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(45).resource(CardResource.DATA, 3);\n          b.br;\n          b.effect('After you identify 1 or more underground resources in a single action ' +\n            'EXCEPT BY EXCAVATING, put 1 data on ANY card',\n          (eb) => eb.text('X').identify().asterix().startEffect.resource(CardResource.DATA).asterix());\n          b.br;\n          b.action('Spend 3 data here and pick a space on Mars with no tile. ' +\n            'Gain its placement bonus, and no adjacency bonuses.',\n          (ab) => ab.resource(CardResource.DATA, {amount: 3, digit}).startAction.text('Placement Bonus').asterix());\n        }),\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer) {\n    return player.game.board.spaces\n      .filter((space) => space.spaceType !== SpaceType.COLONY && space.tile === undefined);\n  }\n\n  public canAct(player: IPlayer) {\n    return this.resourceCount >= 3 && this.availableSpaces(player).length > 0;\n  }\n\n  public action(player: IPlayer) {\n    player.removeResourceFrom(this, 3);\n    return new SelectSpace(\n      'Select a space to gain its placement bonus',\n      this.availableSpaces(player))\n      .andThen((space) => {\n        LogHelper.logBoardTileAction(player, space, 'selected');\n        player.game.grantSpaceBonuses(player, space);\n        return undefined;\n      });\n  }\n\n  // Behavior is similar in Mining Market Insider.\n  // This doesn't need to be serialized. It ensures this is only evaluated once per action.\n  // When the server restarts, the player has to take an action anyway.\n  private lastActionId = -1;\n  public onIdentification(identifyingPlayer: IPlayer | undefined, cardOwner: IPlayer, _space: Space, fromExcavate: boolean) {\n    if (identifyingPlayer !== cardOwner || fromExcavate === true) {\n      return;\n    }\n    const actionId = sum(identifyingPlayer.game.getPlayers().map((p) => p.actionsTakenThisGame));\n    if (this.lastActionId !== actionId) {\n      cardOwner.game.defer(new AddResourcesToCard(cardOwner, CardResource.DATA));\n      this.lastActionId = actionId;\n    }\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Jenson-Boyle & Co",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 46,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Jenson-Boyle&Co.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Henkei Genetics",
  "tags" : [ "microbe" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 47,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/HenkeiGenetics.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActiveCorporationCard} from '../corporation/CorporationCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {IPlayer} from '../../IPlayer';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class HenkeiGenetics extends ActiveCorporationCard {\n  constructor() {\n    super({\n      name: CardName.HENKEI_GENETICS,\n      tags: [Tag.MICROBE],\n      startingMegaCredits: 47,\n\n      behavior: {\n        underworld: {corruption: 1},\n      },\n\n      action: {\n        spend: {corruption: 1},\n        drawCard: {count: 1, tag: Tag.MICROBE},\n      },\n\n      metadata: {\n        cardNumber: 'UC04',\n        description: 'You start with 47 Mâ‚¬ and 1 corruption.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(47).corruption(1).br;\n          b.effect('After you play a microbe card that can hold microbes, add 2 microbes to it.', (eb) => {\n            eb.tag(Tag.MICROBE).startEffect.resource(CardResource.MICROBE, 2);\n          }).br;\n          b.action('Pay 1 corruption to draw a card with a microbe tag.', (ab) => {\n            ab.corruption(1).startAction.cards(1, {secondaryTag: Tag.MICROBE});\n          });\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    if (!player.isCorporation(this.name)) {\n      return;\n    }\n    if (card.resourceType === CardResource.MICROBE && card.tags.includes(Tag.MICROBE)) {\n      player.addResourceTo(card, {qty: 2, log: true});\n    }\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Arborist Collective",
  "tags" : [ "plant" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Activist",
  "startingMegaCredits" : 36,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/ArboristCollective.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardType} from '../../../common/cards/CardType';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActiveCorporationCard} from '../corporation/CorporationCard';\nimport {digit} from '../Options';\nimport {CardResource} from '../../../common/CardResource';\nimport {IPlayer} from '../../IPlayer';\nimport {IProjectCard} from '../IProjectCard';\n\nexport class ArboristCollective extends ActiveCorporationCard {\n  constructor() {\n    super({\n      name: CardName.ARBORIST_COLLECTIVE,\n      tags: [Tag.PLANT],\n      startingMegaCredits: 36,\n      resourceType: CardResource.ACTIVIST,\n\n      behavior: {\n        production: {plants: 1},\n        stock: {plants: 3},\n      },\n\n      action: {\n        spend: {resourcesHere: 2},\n        stock: {plants: 2},\n        production: {plants: 1},\n      },\n\n      metadata: {\n        cardNumber: 'UC05',\n        description: 'You start with 36 Mâ‚¬, 3 plants and 1 plant production.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(36).plants(3, {digit}).production((pb) => pb.plants(1)).br;\n          b.effect('After you play an event card with a base cost of 14 or less, put an activist resource on this card.', (eb) => {\n            eb.text('â‰¤').megacredits(14, {secondaryTag: Tag.EVENT}).startEffect.resource(CardResource.ACTIVIST);\n          }).br;\n          b.action('Spend 2 activists here to increase your plant production 1 step and gain 2 plants.', (ab) => {\n            ab.text('2').resource(CardResource.ACTIVIST).startAction.plants(2).production((pb) => pb.plants(1));\n          });\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: IProjectCard) {\n    if (!player.isCorporation(this.name)) {\n      return;\n    }\n    if (card.type === CardType.EVENT && card.cost <= 14) {\n      player.addResourceTo(this, {qty: 1, log: true});\n    }\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Kingdom of Tauraro",
  "tags" : [ "mars" ],
  "victoryPoints" : -2,
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 50,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/KingdomofTauraro.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {all} from '../Options';\nimport {Resource} from '../../../common/Resource';\n\nexport class KingdomofTauraro extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.KINGDOM_OF_TAURARO,\n      tags: [Tag.MARS],\n      startingMegaCredits: 50,\n      victoryPoints: -2,\n\n      behavior: {\n        production: {megacredits: 6},\n      },\n\n      firstAction: {\n        text: 'Place a city.',\n        city: {},\n      },\n\n      metadata: {\n        cardNumber: 'UC06',\n        description: 'You start with 50 Mâ‚¬ and 6 Mâ‚¬ production. All opponents gain 2 Mâ‚¬ production. As your first action, place a city.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(50).production((pb) => pb.megacredits(6)).production((pb) => pb.megacredits(2, {all})).city().br;\n          b.plainText('(Effect: You may place cities adjacent to other cities. You must always place cities adjacent to tiles you already own, if possible.)');\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    for (const opponent of player.getOpponents()) {\n      opponent.production.add(Resource.MEGACREDITS, 2, {log: true});\n    }\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Aeron Genomics",
  "tags" : [ "animal" ],
  "victoryPoints" : {
    "resourcesHere" : { },
    "per" : 3
  },
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Animal",
  "startingMegaCredits" : 35,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/AeronGenomics.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ActiveCorporationCard} from '../corporation/CorporationCard';\nimport {digit} from '../Options';\nimport {CardResource} from '../../../common/CardResource';\nimport {IPlayer} from '../../IPlayer';\nimport {SimpleDeferredAction} from '../../deferredActions/DeferredAction';\nimport {SelectCard} from '../../inputs/SelectCard';\nimport {Space} from '../../boards/Space';\nimport {SelectPaymentDeferred} from '../../deferredActions/SelectPaymentDeferred';\n\nexport class AeronGenomics extends ActiveCorporationCard {\n  constructor() {\n    super({\n      name: CardName.AERON_GENOMICS,\n      tags: [Tag.ANIMAL],\n      startingMegaCredits: 35,\n      resourceType: CardResource.ANIMAL,\n\n      victoryPoints: {resourcesHere: {}, per: 3},\n\n      behavior: {\n        stock: {steel: 5},\n        addResources: 1,\n      },\n\n      metadata: {\n        cardNumber: 'UC07',\n        description: 'You start with 35 Mâ‚¬, 5 steel, and 1 animal resource on this card. 1 VP per 3 animals on this card.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(35).steel(5, {digit}).resource(CardResource.ANIMAL).br;\n          b.effect('After you excavate an underground resource, put an animal on this card.', (eb) => {\n            eb.excavate(1).startEffect.resource(CardResource.ANIMAL);\n          }).br;\n          b.action('Spend 1 Mâ‚¬ to move an animal from here to another card.', (ab) => {\n            ab.megacredits(1).resource(CardResource.ANIMAL).startAction.resource(CardResource.ANIMAL).asterix();\n          });\n        }),\n      },\n    });\n  }\n\n  onExcavation(player: IPlayer, _space: Space) {\n    player.addResourceTo(this, {qty: 1, log: true});\n  }\n\n  public override canAct(player: IPlayer): boolean {\n    if (!player.canAfford(1)) {\n      return false;\n    }\n    // >1 because this player already has Aeron Genomics.\n    return this.resourceCount > 0 && player.getResourceCards(this.resourceType).length > 1;\n  }\n\n  public override action(player: IPlayer) {\n    player.game.defer(new SimpleDeferredAction(\n      player,\n      () => {\n        const resourceCards = player.getResourceCards(this.resourceType).filter((card) => card.name !== this.name);\n\n        if (resourceCards.length === 0) {\n          return undefined;\n        }\n\n        if (resourceCards.length === 1 && player.canAfford(1)) {\n          player.game.defer(new SelectPaymentDeferred(player, 1, {title: 'Select how to pay for action'}))\n            .andThen(() => {\n              this.resourceCount--;\n              player.addResourceTo(resourceCards[0], 1);\n              player.game.log('${0} moved 1 animal from ${1} to ${2}.', (b) => b.player(player).card(this).card(resourceCards[0]));\n            });\n          return undefined;\n        }\n\n        return new SelectCard(\n          'Select card to add 1 animal',\n          'Add animal',\n          resourceCards)\n          .andThen(([card]) => {\n            this.resourceCount--;\n            player.addResourceTo(card, 1);\n            player.game.log('${0} moved 1 animal from ${1} to ${2}.', (b) => b.player(player).card(this).card(resourceCards[0]));\n            return undefined;\n          });\n      },\n    ));\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Keplertec",
  "tags" : [ "jovian", "space" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Fighter",
  "startingMegaCredits" : 33,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Keplertec.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {ActiveCorporationCard} from '../corporation/CorporationCard';\nimport {CardResource} from '../../../common/CardResource';\nimport {digit} from '../Options';\nimport {ICard} from '../ICard';\nimport {UndergroundResourceToken} from '../../../common/underworld/UndergroundResourceToken';\nimport {UnderworldExpansion} from '../../../server/underworld/UnderworldExpansion';\nimport {OrOptions} from '../../inputs/OrOptions';\nimport {SelectOption} from '../../inputs/SelectOption';\nimport {SimpleDeferredAction} from '../../deferredActions/DeferredAction';\n\nexport class Keplertec extends ActiveCorporationCard {\n  constructor() {\n    super({\n      name: CardName.KEPLERTEC,\n      tags: [Tag.JOVIAN, Tag.SPACE],\n      startingMegaCredits: 33,\n      resourceType: CardResource.FIGHTER,\n\n      behavior: {\n        stock: {titanium: 3},\n        production: {titanium: 1},\n      },\n\n      action: {\n        spend: {titanium: 1},\n        addResourcesToAnyCard: {\n          count: 1,\n          autoSelect: true,\n          mustHaveCard: true,\n          type: CardResource.FIGHTER,\n        },\n      },\n\n      metadata: {\n        cardNumber: 'UC08',\n        description: 'You start with 33 Mâ‚¬, 3 titanium, and 1 titanium production.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(33).titanium(3, {digit}).production((pb) => pb.titanium(1)).br;\n          b.action('Spend 1 titanium to put a fighter resource on ANY card.', (ab) => {\n            ab.titanium(1).startAction.resource(CardResource.FIGHTER).asterix();\n          }).br;\n          b.effect('When you place a fighter resource on this card, draw 4 random underground resource tokens. ' +\n            'Pick one of them and claim the reward on it. Then shuffle the tokens back into the pile.', (eb) => {\n            eb.resource(CardResource.FIGHTER).startEffect.undergroundResources(1, {text: '?'}).asterix();\n          }).br;\n        }),\n      },\n    });\n  }\n\n  effect(player: IPlayer, idx: number) {\n    const game = player.game;\n    if (game.underworldData === undefined) {\n      return;\n    }\n    const tokens: Array<UndergroundResourceToken> = [];\n    for (let i = 0; i < 4; i++) {\n      const token = UnderworldExpansion.drawExcavationToken(game);\n      tokens.push(token);\n    }\n\n    const orOptions = new OrOptions();\n    for (const token of tokens) {\n      orOptions.options.push(new SelectOption(token).andThen(() => {\n        UnderworldExpansion.grant(player, token);\n        UnderworldExpansion.addTokens(game, tokens);\n        if (idx > 1) {\n          game.defer(new SimpleDeferredAction(player, () => {\n            return this.effect(player, idx - 1);\n          }));\n        }\n        return undefined;\n      }));\n    }\n    return orOptions;\n  }\n\n  onResourceAdded(player: IPlayer, card: ICard, count: number) {\n    if (card === this) {\n      player.defer(this.effect(player, count));\n    }\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Voltagon",
  "tags" : [ "science", "power" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 38,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/underworld/Voltagon.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {IPlayer} from '../../IPlayer';\nimport {Space} from '../../boards/Space';\nimport {ActiveCorporationCard} from '../corporation/CorporationCard';\nimport {Resource} from '../../../common/Resource';\n\nexport class Voltagon extends ActiveCorporationCard {\n  constructor() {\n    super({\n      name: CardName.VOLTAGON,\n      tags: [Tag.SCIENCE, Tag.POWER],\n      startingMegaCredits: 38,\n\n      behavior: {\n        production: {energy: 1},\n      },\n\n      action: {\n        or: {\n          behaviors: [\n            {\n              spend: {energy: 8},\n              global: {oxygen: 1},\n              title: 'Spend 8 energy to increase oxygen 1 step.',\n              log: '${player} spent 8 energy to increase oxygen 1 step.',\n            },\n            {\n              spend: {energy: 8},\n              global: {venus: 1},\n              title: 'Spend 8 energy to increase Venus 1 step.',\n              log: '${player} spent 8 energy to increase Venus 1 step.',\n            },\n          ],\n        },\n      },\n\n      metadata: {\n        cardNumber: 'UC09',\n        description: 'You start with 38 Mâ‚¬ and 1 energy production.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(38).production((pb) => pb.energy(1)).br;\n          b.effect('After you excavate an underground resource, gain 2 energy.', (eb) => {\n            eb.excavate(1).startEffect.energy(2);\n          }).br;\n          b.action('Spend 8 energy to increase oxygen or Venus 1 step.', (ab) => {\n            ab.energy(8).startAction.oxygen(1).or().venus(1);\n          });\n        }),\n      },\n    });\n  }\n\n  onExcavation(player: IPlayer, _space: Space) {\n    player.stock.add(Resource.ENERGY, 2, {log: true});\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Anubis Securities",
  "tags" : [ "mars" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "startingMegaCredits" : 42,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/AnubisSecurities.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {CorporationCard} from '../corporation/CorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {PlayProjectCard} from '../../deferredActions/PlayProjectCard';\nimport {Resource} from '../../../common/Resource';\nimport {all} from '../Options';\nimport {Size} from '../../../common/cards/render/Size';\nimport {Priority} from '../../deferredActions/Priority';\n\nexport class AnubisSecurities extends CorporationCard {\n  constructor() {\n    super({\n      name: CardName.ANUBIS_SECURITIES,\n      tags: [Tag.MARS],\n      startingMegaCredits: 42,\n      initialActionText: 'Play a card, ignoring global requirements',\n\n      metadata: {\n        cardNumber: 'UC11',\n        description: 'You start with 42 Mâ‚¬. As your first action, play a card ignoring global requirements.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(42).projectRequirements().br;\n          b.effect('When any player increases their TR by 1, they gain 2 Mâ‚¬.', (eb) => {\n            eb.tr(1, {all}).startEffect.megacredits(2, {all});\n          }).br;\n          b.text('-X').corruption(1).megacredits(1, {text: '6X'}).asterix().br;\n          b.text('Y').corruption(1, {all}).colon().plainText('PAYS').megacredits(1, {text: 'Y'}).or(Size.TINY).tr(1, {size: Size.TINY}).asterix().br;\n          b.plainText('(At the end of the production phase, discard all your corruption and gain 6 Mâ‚¬ for each unit discarded. ' +\n            'Then, each player must pay you 1 Mâ‚¬ per unit of corruption they have. If no one has any, gain 1 TR instead.)').br;\n        }),\n      },\n    });\n  }\n\n  private inInitialAction = false;\n\n  public override getGlobalParameterRequirementBonus(_player: IPlayer): number {\n    if (this.inInitialAction === true) {\n      // Magic number high enough to always ignore requirements.\n      return 50;\n    }\n    return 0;\n  }\n\n  public initialAction(player: IPlayer) {\n    this.inInitialAction = true;\n    player.game.defer(new PlayProjectCard(player).andThen(() => {\n      this.inInitialAction = false;\n    }));\n    return undefined;\n  }\n\n  public onIncreaseTerraformRating(player: IPlayer, _cardOwner: IPlayer, steps: number) {\n    const money = steps * 2;\n    player.stock.add(Resource.MEGACREDITS, money);\n    player.game.log('${0} gained ${1} Mâ‚¬ from the ${2} corp effect', (b) => b.player(player).number(money).card(this));\n  }\n\n  public onProductionPhase(player: IPlayer) {\n    player.defer(() => {\n      const corruption = player.underworldData.corruption;\n      const money = corruption * 6;\n      if (money > 0) {\n        player.stock.megacredits += money;\n        player.game.log('${0} discarded ${1} corruption and gained ${2} Mâ‚¬', (b) => b.player(player).number(corruption).number(money));\n        player.underworldData.corruption = 0;\n      }\n\n      let anyCorruptOpponents = false;\n      for (const opponent of player.game.getPlayersInGenerationOrder()) {\n        if (opponent === player) {\n          continue;\n        }\n        const corruption = opponent.underworldData.corruption;\n        if (corruption > 0) {\n          anyCorruptOpponents = true;\n          opponent.stock.steal(Resource.MEGACREDITS, corruption, player, {log: false});\n          player.game.log('${0} was paid ${1} Mâ‚¬ from ${2}', (b) => b.player(player).number(corruption).player(opponent));\n        }\n      }\n      if (!anyCorruptOpponents) {\n        player.increaseTerraformRating(1);\n        player.game.log('${0} gained 1 TR since no opponent had any corruption', (b) => b.player(player));\n      }\n      return undefined;\n    }, Priority.BACK_OF_THE_LINE);\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Hecate Speditions",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "corporation",
  "requirements" : [ ],
  "resourceType" : "Supply Chain",
  "startingMegaCredits" : 38,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/underworld/HecateSpeditions.ts",
  "sourceCode" : "import {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ICorporationCard} from '../corporation/ICorporationCard';\nimport {IPlayer} from '../../IPlayer';\nimport {ActiveCorporationCard} from '../corporation/CorporationCard';\nimport {Size} from '../../../common/cards/render/Size';\nimport {ICard} from '../ICard';\nimport {isPlanetaryTag} from '../../pathfinders/PathfindersData';\nimport {IColonyTrader} from '../../colonies/IColonyTrader';\nimport {message} from '../../logs/MessageBuilder';\nimport {IColony} from '../../colonies/IColony';\nimport {CardResource} from '../../../common/CardResource';\nimport {digit} from '../Options';\n\nfunction tradeCost(player: IPlayer) {\n  return Math.max(1, 2 - player.colonies.tradeDiscount);\n}\n\nexport class HecateSpeditions extends ActiveCorporationCard {\n  constructor() {\n    super({\n      name: CardName.HECATE_SPEDITIONS,\n      tags: [Tag.EARTH],\n      startingMegaCredits: 38,\n      resourceType: CardResource.SUPPLY_CHAIN,\n\n      behavior: {\n        addResources: 1,\n      },\n\n      firstAction: {\n        colonies: {buildColony: {}},\n        text: 'Place a colony',\n      },\n\n      action: {\n        spend: {resourcesHere: 5},\n        colonies: {addTradeFleet: 1},\n      },\n\n      metadata: {\n        cardNumber: 'U12',\n        description: 'You start with 38 Mâ‚¬. As your first action, place a colony.',\n        renderData: CardRenderer.builder((b) => {\n          b.br;\n          b.megacredits(38).colonies().br;\n          b.effect('When you play an Earth, Mars, Venus, Moon, or Jovian tag, including this, put 1 supply chain resource on this card.',\n            (eb) => eb.tag(Tag.EARTH).tag(Tag.MARS).tag(Tag.VENUS).tag(Tag.MOON).tag(Tag.JOVIAN).startEffect.resource(CardResource.SUPPLY_CHAIN));\n          b.br;\n          b.resource(CardResource.SUPPLY_CHAIN, {amount: 2, digit}).colon().trade({size: Size.SMALL}).nbsp;\n          b.resource(CardResource.SUPPLY_CHAIN, {amount: 5, digit}).arrow(Size.SMALL).tradeFleet().br;\n          b.plainText('(Effect: Spend 2 supply chain resources (min. 1) to trade.) ' +\n            '(Action: Spend 5 supply chain resources to gain a trade fleet.)');\n        }),\n      },\n    });\n  }\n\n  public onCardPlayed(player: IPlayer, card: ICard) {\n    if (!player.isCorporation(this.name)) {\n      return;\n    }\n    const count = card.tags.filter((tag) => isPlanetaryTag(tag)).length;\n    player.addResourceTo(this, {qty: count, log: true, logZero: false});\n  }\n\n  public onCorpCardPlayed(player: IPlayer, card: ICorporationCard) {\n    this.onCardPlayed(player, card);\n  }\n}\n\n// TODO(kberg): I this pattern has occurred enough times that this can be reduced.\nexport class TradeWithHectateSpeditions implements IColonyTrader {\n  private hectateSpeditions: ICorporationCard | undefined;\n\n  constructor(private player: IPlayer) {\n    this.hectateSpeditions = player.getCorporation(CardName.HECATE_SPEDITIONS);\n  }\n\n  public canUse() {\n    return (this.hectateSpeditions?.resourceCount ?? 0) >= tradeCost(this.player) &&\n      !this.player.getActionsThisGeneration().has(CardName.HECATE_SPEDITIONS);\n  }\n\n  public optionText() {\n    return message('Pay ${0} ${1} resources (use ${2} action)', (b) => b.number(tradeCost(this.player)).string('supply chain').cardName(CardName.HECATE_SPEDITIONS));\n  }\n\n  private tradeWithColony(card: ICorporationCard, player: IPlayer, colony: IColony) {\n    const cost = tradeCost(player);\n    card.resourceCount -= cost;\n    player.game.log('${0} spent ${1} ${2} from ${3} to trade with ${4}',\n      (b) => b.player(player).number(cost).string('supply chain resources').card(card).colony(colony));\n    colony.trade(player);\n  }\n\n  public trade(colony: IColony) {\n    if (this.hectateSpeditions !== undefined) {\n      this.tradeWithColony(this.hectateSpeditions, this.player, colony);\n    }\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Free Trade Port",
  "tags" : [ "earth", "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/underworld/FreeTradePort.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class FreeTradePort extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.FREE_TRADE_PORT,\n      tags: [Tag.EARTH, Tag.SPACE],\n\n      behavior: {\n        colonies: {buildColony: {}},\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'UP01',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption().colonies();\n        }),\n        description: 'Gain 1 corruption. Place a colony.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Investor Plaza",
  "tags" : [ "earth", "city" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/InvestorPlaza.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class InvestorPlaza extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.INVESTOR_PLAZA,\n      tags: [Tag.EARTH, Tag.CITY],\n\n      behavior: {\n        city: {},\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'UP02',\n        renderData: CardRenderer.builder((b) => {\n          b.city().corruption();\n        }),\n        description: 'Place a city and gain 1 corruption.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Inherited Fortune",
  "tags" : [ "earth" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 10,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/InheritedFortune.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class InheritedFortune extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.INHERITED_FORTUNE,\n      tags: [Tag.EARTH],\n\n      behavior: {\n        production: {megacredits: 1},\n        stock: {megacredits: 10},\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'UP03',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption().megacredits(10).production((pb) => pb.megacredits(1));\n        }),\n        description: 'Gain 1 corruption and 10 Mâ‚¬. Increase your Mâ‚¬ production 1 step.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Tunneling Operation",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/TunnelingOperation.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class TunnelingOperation extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.TUNNELING_OPERATION,\n      tags: [Tag.BUILDING],\n\n      behavior: {\n        underworld: {identify: 1, excavate: 2},\n        production: {steel: 2},\n      },\n\n      metadata: {\n        cardNumber: 'UP05',\n        renderData: CardRenderer.builder((b) => {\n          b.identify(1).excavate(2).production((pb) => pb.steel(2));\n        }),\n        description: 'Identify 1 underground resource. Then excavate 2 underground resources. Increase your steel production 2 steps.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Geological Expertise",
  "tags" : [ ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/GeologicalExpertise.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {digit} from '../Options';\n\nexport class GeologicalExpertise extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.GEOLOGICAL_EXPERTISE,\n\n      behavior: {\n        drawCard: {tag: Tag.SCIENCE, count: 2},\n        underworld: {identify: 4},\n      },\n\n      metadata: {\n        cardNumber: 'UP06',\n        renderData: CardRenderer.builder((b) => {\n          b.identify(4, {digit}).cards(2, {secondaryTag: Tag.SCIENCE});\n        }),\n        description: 'Identify 4 underground resources. Draw 2 cards with science tags.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Underground Settlement",
  "tags" : [ "city", "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/UndergroundSettlement.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {PlaceCityTile} from '../../deferredActions/PlaceCityTile';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {intersection} from '../../../common/utils/utils';\n\nexport class UndergroundSettlement extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.UNDERGROUND_SETTLEMENT,\n      tags: [Tag.CITY, Tag.BUILDING],\n\n      metadata: {\n        cardNumber: 'UP07',\n        renderData: CardRenderer.builder((b) => {\n          b.city().excavate().asterix();\n        }),\n        description: 'Place a city tile. Then excavate the underground resource in its space.',\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer) {\n    return intersection(\n      player.game.board.getAvailableSpacesForCity(player),\n      UnderworldExpansion.excavatableSpaces(player));\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    return this.availableSpaces(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlaceCityTile(player, {\n      spaces: this.availableSpaces(player),\n    })).andThen((space) => {\n      if (space) {\n        UnderworldExpansion.excavate(player, space);\n      }\n    });\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Ganymede Trading Company",
  "tags" : [ "jovian", "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/underworld/GanymedeTradingCompany.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class GanymedeTradingCompany extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.GANYMEDE_TRADING_COMPANY,\n      tags: [Tag.JOVIAN, Tag.SPACE],\n\n      behavior: {\n        stock: {titanium: 3},\n        colonies: {addTradeFleet: 1},\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'UP08',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption().titanium(3).tradeFleet();\n        }),\n        description: 'Gain 1 corruption, 3 titanium, and a trade fleet.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Central Reservoir",
  "tags" : [ "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/CentralReservoir.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\nimport {intersection} from '../../../common/utils/utils';\nimport {PlaceOceanTile} from '../../deferredActions/PlaceOceanTile';\n\nexport class CentralReservoir extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.CENTRAL_RESERVOIR,\n      tags: [Tag.BUILDING],\n\n      behavior: {tr: 1},\n\n      metadata: {\n        cardNumber: 'UP09',\n        renderData: CardRenderer.builder((b) => {\n          b.tr(1).oceans(1).asterix().excavate().asterix();\n        }),\n        description: 'Gain 1 TR. Place an ocean tile ON AN AREA NOT RESERVED FOR OCEAN. ' +\n          'Then excavate the underground resource in that space.',\n      },\n    });\n  }\n\n  private availableSpaces(player: IPlayer) {\n    return intersection(\n      player.game.board.getAvailableSpacesOnLand(player),\n      UnderworldExpansion.excavatableSpaces(player));\n  }\n\n  public override bespokeCanPlay(player: IPlayer) {\n    if (!player.game.canAddOcean()) {\n      this.warnings.add('maxoceans');\n    }\n    return this.availableSpaces(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlaceOceanTile(player, {\n      spaces: this.availableSpaces(player),\n    })).andThen((space) => {\n      UnderworldExpansion.excavate(player, space);\n    });\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Battery Shipment",
  "tags" : [ "power" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/BatteryShipment.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class BatteryShipment extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.BATTERY_SHIPMENT,\n      tags: [Tag.POWER],\n\n      behavior: {\n        stock: {energy: 12},\n        production: {energy: 2},\n      },\n\n      metadata: {\n        cardNumber: 'UP10',\n        renderData: CardRenderer.builder((b) => {\n          b.energy(12).production((pb) => pb.energy(2));\n        }),\n        description: 'Gain 12 energy. Increase your energy production 2 steps.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Deepwater Dome",
  "tags" : [ "plant", "building" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/DeepwaterDome.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {IPlayer} from '../../IPlayer';\nimport {intersection} from '../../../common/utils/utils';\nimport {PlaceOceanTile} from '../../deferredActions/PlaceOceanTile';\nimport {Space} from '../../boards/Space';\nimport {SelectSpace} from '../../inputs/SelectSpace';\nimport {LogHelper} from '../../LogHelper';\nimport {UnderworldExpansion} from '../../underworld/UnderworldExpansion';\n\nexport class DeepwaterDome extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.DEEPWATER_DOME,\n      tags: [Tag.PLANT, Tag.BUILDING],\n\n      behavior: {\n        production: {plants: 1},\n      },\n\n      metadata: {\n        cardNumber: 'UP11',\n        renderData: CardRenderer.builder((b) => {\n          b.production((pb) => pb.plants(1));\n          b.oceans(1).emptyTile().identify().asterix();\n        }),\n        description: 'Increase your plant production 1 step. Place an ocean. ' +\n        'Then place a player cube on an adjacent unreserved space. ' +\n        'Only you may place a tile there. Identify the underground resources in both spaces.',\n      },\n    });\n  }\n\n  public getAdjacentSpaces(player: IPlayer, oceanSpace: Space) {\n    const board = player.game.board;\n    const emptySpaces = board.getAvailableSpacesOnLand(player).filter((space) => {\n      // Don't place a marker on a space where you already have a marker.\n      return space.player === undefined;\n    });\n    return intersection(board.getAdjacentSpaces(oceanSpace), emptySpaces);\n  }\n\n  public getCandidateSpaces(player: IPlayer) {\n    return player.game.board\n      .getAvailableSpacesForOcean(player)\n      .filter((space) => this.getAdjacentSpaces(player, space));\n  }\n  public override bespokeCanPlay(player: IPlayer): boolean {\n    if (!player.game.canAddOcean()) {\n      return false;\n    }\n    return this.getCandidateSpaces(player).length > 0;\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    player.game.defer(new PlaceOceanTile(player).andThen((oceanSpace) => {\n      UnderworldExpansion.identify(player.game, oceanSpace, player);\n      player.defer(new SelectSpace('Select space for claim', this.getAdjacentSpaces(player, oceanSpace))\n        .andThen((claimedSpace) => {\n          claimedSpace.player = player;\n          LogHelper.logBoardTileAction(player, claimedSpace, 'land claim');\n          UnderworldExpansion.identify(player.game, claimedSpace, player);\n          return undefined;\n        }));\n    }));\n\n    return undefined;\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Secret Research",
  "tags" : [ "science" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/SecretResearch.ts",
  "sourceCode" : "import {PreludeCard} from '../prelude/PreludeCard';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {Tag} from '../../../common/cards/Tag';\n\nexport class SecretResearch extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.SECRET_RESEARCH,\n      tags: [Tag.SCIENCE],\n\n      behavior: {\n        drawCard: 3,\n        underworld: {corruption: 1},\n      },\n\n      metadata: {\n        cardNumber: 'UP12',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption().cards(3);\n        }),\n        description: 'Gain 1 corruption and draw 3 cards.',\n      },\n    });\n  }\n}\n\n"
}, {
  "module" : "underworld",
  "name" : "Prospecting",
  "tags" : [ "space" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : -4,
  "compatibility" : [ "colonies" ],
  "sourceFile" : "src/server/cards/underworld/Prospecting.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {ColoniesHandler} from '../../colonies/ColoniesHandler';\nimport {PreludeCard} from '../prelude/PreludeCard';\n\nexport class Prospecting extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.PROSPECTING,\n      startingMegacredits: -4,\n      tags: [Tag.SPACE],\n\n      metadata: {\n        cardNumber: 'UP13',\n        description: 'Pay 4 Mâ‚¬. Put an additional colony tile of your choice into play. Then place a colony on it.',\n        renderData: CardRenderer.builder((b) => {\n          b.megacredits(-4).nbsp.colonyTile().colonies().asterix();\n        }),\n      },\n    });\n  }\n\n  public override bespokePlay(player: IPlayer) {\n    ColoniesHandler.addColonyTile(player, {\n      activateableOnly: true,\n      cb: (colony) => {\n        if (colony.isActive) {\n          colony.addColony(player);\n        }\n      }});\n    return undefined;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Election Sponsorship",
  "tags" : [ "mars" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "turmoil" ],
  "sourceFile" : "src/server/cards/underworld/ElectionSponsorship.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {digit} from '../Options';\nimport {ICard} from '../ICard';\n\nexport class ElectionSponsorship extends PreludeCard implements ICard {\n  public isDisabled: boolean = false;\n\n  constructor() {\n    super({\n      name: CardName.ELECTION_SPONSORSHIP,\n      tags: [Tag.MARS],\n\n      behavior: {\n        underworld: {corruption: 1},\n        turmoil: {sendDelegates: {count: 1}},\n      },\n\n      metadata: {\n        cardNumber: 'UP14',\n        renderData: CardRenderer.builder((b) => {\n          b.corruption().delegates(1).br;\n          b.plainText('Gain 1 corruption. Place 1 delegate in any party.').br;\n\n          b.effect('For the first 4 generations, gain +2 influence',\n            (eb) => eb.text('Gen 1-4').startEffect.plus().influence({amount: 2, digit}).asterix());\n        }),\n      },\n    });\n  }\n\n  public getInfluenceBonus(player: IPlayer) {\n    if (player.game.generation <= 4) {\n      return 2;\n    }\n    return 0;\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Cloud Vortex Outpost",
  "tags" : [ "venus" ],
  "cost" : 0,
  "type" : "prelude",
  "requirements" : [ ],
  "startingMegaCredits" : 0,
  "compatibility" : [ "venus" ],
  "sourceFile" : "src/server/cards/underworld/CloudVortexOutpost.ts",
  "sourceCode" : "import {IPlayer} from '../../IPlayer';\nimport {Tag} from '../../../common/cards/Tag';\nimport {CardName} from '../../../common/cards/CardName';\nimport {CardRenderer} from '../render/CardRenderer';\nimport {PreludeCard} from '../prelude/PreludeCard';\nimport {AltSecondaryTag} from '../../../common/cards/render/AltSecondaryTag';\nimport {IProjectCard, isIProjectCard} from '../IProjectCard';\nimport {CardResource} from '../../../common/CardResource';\n\nexport class CloudVortexOutpost extends PreludeCard {\n  constructor() {\n    super({\n      name: CardName.CLOUD_VORTEX_OUTPOST,\n      tags: [Tag.VENUS],\n\n      behavior: {\n        global: {venus: 2},\n      },\n\n      metadata: {\n        cardNumber: 'UP15',\n        renderData: CardRenderer.builder((b) => {\n          b.venus(2).br;\n          b.plainText('Raise Venus 2 steps').br;\n          b.effect('After you play your FIRST project card that can hold floaters, put 3 floaters on it.',\n            (eb) => eb.cards(1, {secondaryTag: AltSecondaryTag.FLOATER}).asterix().startEffect.resource(CardResource.FLOATER, 3));\n        }),\n      },\n    });\n  }\n\n  public data: {isDisabled: boolean} = {isDisabled: false};\n\n  onCardPlayed(player: IPlayer, card: IProjectCard) {\n    if (this.data.isDisabled) {\n      return;\n    }\n    if (card.resourceType === CardResource.FLOATER && isIProjectCard(card)) {\n      player.addResourceTo(card, {qty: 3, log: true});\n      this.data.isDisabled = true;\n    }\n  }\n}\n"
}, {
  "module" : "underworld",
  "name" : "Excavate:SP",
  "tags" : [ ],
  "cost" : 7,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Excavate:SP.ts",
  "sourceCode" : ""
}, {
  "module" : "underworld",
  "name" : "Collusion:SP",
  "tags" : [ ],
  "cost" : 0,
  "type" : "standard_project",
  "requirements" : [ ],
  "compatibility" : [ ],
  "sourceFile" : "src/server/cards/underworld/Collusion:SP.ts",
  "sourceCode" : ""
} ]